<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>关于我在博客上发布文章的简化教程</title>
    <url>/2024/05/13/2024-05-13-%E5%85%B3%E4%BA%8E%E6%88%91%E5%9C%A8%E5%8D%9A%E5%AE%A2%E4%B8%8A%E5%8F%91%E5%B8%83%E6%96%87%E7%AB%A0%E7%9A%84%E7%AE%80%E5%8C%96%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="一、引言"><a href="#一、引言" class="headerlink" title="一、引言"></a>一、引言</h1><p>继上一篇我在迁移完博客到云服务器上后，我发现我在每次发布文章的时候都需要进行很多行的命令操作，所以我打算写一个Shell脚本一步到位的执行完所有的更新博客的繁琐命令，并在云服务器上设置好一个定时任务来让博客自动更新。</p>
<h2 id="1、传统的更新方式"><a href="#1、传统的更新方式" class="headerlink" title="1、传统的更新方式"></a>1、传统的更新方式</h2><p>因为我的hexo是通过Dockerfile的方式构建的Node环境以及在Node镜像上部署的，所以我每次在写完文章后都需要先手动的上传写好的Markdown文件到云服务器上的Docker容器上，然后通过下面的命令进入到Docker镜像内：</p>
<p><code>docker exec -it hexo-blog /bin/bash</code></p>
<p>接着使用下面的命令分别的执行：</p>
<p><code>hexo clean</code></p>
<p><code>hexo generate -d</code></p>
<p><code>hexo server</code></p>
<p>这样我才能成功更新我的博客网站，可见这样的步骤显得是比较麻烦的，所以我们更需要编写一个shell脚本来完成这些麻烦的操作。</p>
<h2 id="2、大致思路"><a href="#2、大致思路" class="headerlink" title="2、大致思路"></a>2、大致思路</h2><p>首先我们先确定一下这个shell脚本的大致思路：</p>
<p>①要写一条shell执行命令来执行<code>docker exec -it hexo-blog /bin/bash</code>这条命令，我们首先需要先设定一个<strong>检查Docker容器是否在运行</strong>的前置条件，然后我们就可以直接写这条命令让shell识别，最后使用一个if….else语句来判定是否执行成功。</p>
<p>②要写一条shell的执行命令来执行接下来的<code>hexo clean</code>、<code>hexo generate -d</code>、<code>hexo server</code>三条命令，我们可以直接写入命令然后使用一个if….else语句来判定是否执行成功。</p>
<p>③然后我在这里的日常使用场景里面实际要实现的需求其实是<strong>在Hexo已经运行的情况下先关闭Hexo的进程</strong>，然后再执行后面的<code>hexo clean</code>等命令，所以我们需要让shell去识别在Docker镜像里面的hexo进程PID，然后使用kill命令终止这个进程。</p>
<p>④在最后我们需要执行<strong>退出Docker容器</strong>的操作，这里直接使用<strong>exit</strong>即可。</p>
<h2 id="3、脚本的结构主体和所需变量符的确定"><a href="#3、脚本的结构主体和所需变量符的确定" class="headerlink" title="3、脚本的结构主体和所需变量符的确定"></a>3、脚本的结构主体和所需变量符的确定</h2><h3 id="1、检查Docker容器是否正在运行"><a href="#1、检查Docker容器是否正在运行" class="headerlink" title="1、检查Docker容器是否正在运行"></a>1、检查Docker容器是否正在运行</h3><p>对于<strong>检查Docker容器是否在运行</strong>的这个主体很明显我们可以使用一个if …else来实现，但是我们需要注意的是我们要先设置一个<code>$container_name</code>的变量来让shell识别我们的Docker镜像的名称：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">定义Docker容器名称</span></span><br><span class="line">container_name=&quot;hexo-blog&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker ps -q -f name=<span class="string">&quot;example&quot;</span>这个意思是检查我们的目标docker容器是否正在运行</span></span><br><span class="line">if [ $(docker ps -q -f name=$container_name) ]; then</span><br><span class="line">	echo &quot;Docker容器正在运行&quot;</span><br><span class="line"></span><br><span class="line">........</span><br><span class="line"></span><br><span class="line">else</span><br><span class="line">	echo &quot;Docker容器并未运行&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></div>

<h3 id="2、进入Docker容器"><a href="#2、进入Docker容器" class="headerlink" title="2、进入Docker容器"></a>2、进入Docker容器</h3><p>这里我们直接使用命令+$container_name，最后使用EOF（EOF是一个特殊的bash语法，表示我们要输入一个多行的字符串。这个字符串会被送到<code>/bin/bash</code>命令作为输入）：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入Docker容器</span></span><br><span class="line">docker exec -it $container_name /bin/bash &lt;&lt; EOF</span><br><span class="line">........</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></div>



<h3 id="3、关闭Hexo进程并执行对应命令"><a href="#3、关闭Hexo进程并执行对应命令" class="headerlink" title="3、关闭Hexo进程并执行对应命令"></a>3、关闭Hexo进程并执行对应命令</h3><p>对于如何关闭已存在的hexo进程，我想到了两个方案：第一个方案是使用<code>kill</code>命令，然后通过<code>ps</code>、<code>grep</code>、<code>awk</code>等命令组合成一个查找命令（ps -ef | grep -v grep | awk ‘{print $2}’），这样我们就可以使用<code>kill$（ps -ef | grep -v grep | awk &#39;&#123;print $2&#125;&#39;）</code>的方式杀死hexo进程，第二个方案是使用<code>pkill</code>命令直接pkill hexo的方式来简单粗暴的终止名称为hexo的进程，我最后选择了第二个方案，因为我在实验第一个方案的时候发现每次都无法准确的找出进程ID，所以选择了第二个方案；</p>
<p>对于执行那三条命令，我的想法是直接使用if….else的判定形式直接完成，但我后来又发现重启hexo进程也就是<code>hexo server</code>这里它并不能直接使用命令在shell执行，所以<code>hexo server</code>的编写就放到下面讲：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">终止名为 <span class="string">&quot;hexo&quot;</span> 的进程</span></span><br><span class="line">pkill hexo</span><br><span class="line">if [ $? -eq 0 ]; then</span><br><span class="line">    echo &quot;hexo进程已终止&quot;</span><br><span class="line">else</span><br><span class="line">    echo &quot;hexo进程终止失败，请重试！&quot;</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行hexo clean命令</span></span><br><span class="line">hexo clean</span><br><span class="line">if [ $? -eq 0 ]; then</span><br><span class="line">    echo &quot;Hexo clean操作成功&quot;</span><br><span class="line">else</span><br><span class="line">    echo &quot;Hexo clean操作失败&quot;</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行hexo generate -d命令</span></span><br><span class="line">hexo generate -d</span><br><span class="line">if [ $? -eq 0 ]; then</span><br><span class="line">    echo &quot;Hexo generate操作成功&quot;</span><br><span class="line">else</span><br><span class="line">    echo &quot;Hexo generate操作失败&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></div>

<p>-eq是一个比较运算符，用于检查两个数是否相等。如果两个数相等，-eq运算符会返回真（即0）；如果两个数不相等，-eq运算符会返回假（即非0）。$?是一个特殊的变量，它保存了最后执行的命令的退出状态。如果命令执行成功，$?的值会是0；那么执行then后面的代码；如果命令执行失败，$?的值会是非0，跳过then后面的代码。</p>
<p>对于<code>hexo server</code>这条命令，它会启动一个持续运行的进程，这可能会阻止脚本退出，所以为了避免这个问题，你可以在后台运行<code>hexo server</code>命令；我使用了<code>nohup</code>命令来在后台运行<code>hexo server</code>命令。<code>nohup</code>命令会忽略所有的挂断（HUP）信号，这样即使我退出了shell，<code>hexo server</code>命令也会继续运行。<code>&gt; /dev/null 2&gt;&amp;1</code>会将标准输出和标准错误都重定向到<code>/dev/null</code>，这样你就不会看到任何输出。<code>&amp;</code>符号会让<code>hexo server</code>命令在后台运行。</p>

  <div class="note p-4 mb-4 rounded-small danger">
    <p>在Unix和Linux系统中，<code>/dev/null</code>是一个特殊的文件，被称为空设备文件。向这个文件写入的任何数据都会被系统丢弃。因此，它常常被用来丢弃不需要的输出数据。</p>
<p>在Shell脚本中，<code>&gt;</code>是一个重定向操作符，它会将左边的输出重定向到右边的文件。例如，<code>command &gt; /dev/null</code>会将<code>command</code>的输出重定向到<code>/dev/null</code>，也就是丢弃这些输出。</p>
<p><code>2&gt;&amp;1</code>是另一个重定向操作符，它的意思是将标准错误（文件描述符为2）重定向到标准输出（文件描述符为1）。因此，<code>command &gt; /dev/null 2&gt;&amp;1</code>的意思是将<code>command</code>的标准输出和标准错误都重定向到<code>/dev/null</code>，也就是丢弃这些输出。</p>
<p>总的来说，<code>command &gt; /dev/null 2&gt;&amp;1</code>这个命令的作用是运行<code>command</code>，但是丢弃所有的输出和错误信息。这在你不关心命令的输出，只关心命令是否成功执行的情况下非常有用。</p>

  </div>

<p>下面是实现方法：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重新启动hexo server</span></span><br><span class="line">nohup hexo server &gt; /dev/null 2&gt;&amp;1 &amp;</span><br><span class="line">echo &quot;Hexo server成功启动！&quot;</span><br></pre></td></tr></table></figure></div>

<h3 id="4、退出Docker容器"><a href="#4、退出Docker容器" class="headerlink" title="4、退出Docker容器"></a>4、退出Docker容器</h3><p>这里可以直接使用<code>exit</code>命令进行操作：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">退出Docker容器</span></span><br><span class="line">exit</span><br><span class="line">    echo &quot;成功退出Docker容器&quot;</span><br></pre></td></tr></table></figure></div>

<h2 id="4、脚本总览"><a href="#4、脚本总览" class="headerlink" title="4、脚本总览"></a>4、脚本总览</h2><p>经过上述方案的整合，我们可以编写出一个完整的高可用shell脚本：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">定义Docker容器名称</span></span><br><span class="line">container_name=&quot;hexo-blog&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查Docker容器是否正在运行</span></span><br><span class="line">if [ $(docker ps -q -f name=$container_name) ]; then</span><br><span class="line">    echo &quot;Container $container_name is running. Proceeding with the script.&quot;</span><br><span class="line"></span><br><span class="line">    # 进入Docker容器</span><br><span class="line">    docker exec -it $container_name /bin/bash &lt;&lt; EOF</span><br><span class="line"></span><br><span class="line">    # 终止名为 &quot;hexo&quot; 的进程</span><br><span class="line">    pkill hexo</span><br><span class="line">    if [ $? -eq 0 ]; then</span><br><span class="line">        echo &quot;Hexo server has been stopped successfully.&quot;</span><br><span class="line">    else</span><br><span class="line">        echo &quot;Failed to stop Hexo server. No Hexo server is running.&quot;</span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line">    # 执行hexo clean命令</span><br><span class="line">    hexo clean</span><br><span class="line">    if [ $? -eq 0 ]; then</span><br><span class="line">        echo &quot;Hexo clean operation completed successfully.&quot;</span><br><span class="line">    else</span><br><span class="line">        echo &quot;Hexo clean operation failed.&quot;</span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line">    # 执行hexo generate -d命令</span><br><span class="line">    hexo generate -d</span><br><span class="line">    if [ $? -eq 0 ]; then</span><br><span class="line">        echo &quot;Hexo generate operation completed successfully.&quot;</span><br><span class="line">    else</span><br><span class="line">        echo &quot;Hexo generate operation failed.&quot;</span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line">    # 重新启动hexo server</span><br><span class="line">    nohup hexo server &gt; /dev/null 2&gt;&amp;1 &amp;</span><br><span class="line">    echo &quot;Hexo server has been started successfully.&quot;</span><br><span class="line"></span><br><span class="line">    # 退出Docker容器</span><br><span class="line">    exit</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">    echo &quot;Exited the Docker container.&quot;</span><br><span class="line">else</span><br><span class="line">    echo &quot;Container $container_name is not running. Please start the container and try again.&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h2 id="5、脚本演示"><a href="#5、脚本演示" class="headerlink" title="5、脚本演示"></a>5、脚本演示</h2><p>我在Myshell文件夹下创建了一个update-blog.sh专门存放这个脚本文件：</p>
<div class="highlight-container" data-rel="Cmd"><figure class="iseeu highlight cmd"><table><tr><td class="code"><pre><span class="line">[root@SC /]# <span class="built_in">cd</span> Myshell/</span><br><span class="line">[root@SC Myshell]# ls</span><br><span class="line">update-blog.sh</span><br><span class="line">[root@SC Myshell]# ./update-blog.sh </span><br><span class="line">Container hexo-blog is running. Proceeding with the script.</span><br><span class="line">Hexo server has been stopped successfully.</span><br><span class="line">INFO  Validating config</span><br><span class="line">INFO  Deleted database.</span><br><span class="line">.....</span><br><span class="line">INFO  CDN available: StaticfileCDN</span><br><span class="line">INFO  CDN available: BootCDN</span><br><span class="line">Hexo clean operation completed successfully.</span><br><span class="line">INFO  Validating config</span><br><span class="line">INFO  <span class="built_in">Start</span> processing</span><br><span class="line">INFO  Files loaded <span class="keyword">in</span> <span class="number">424</span> ms</span><br><span class="line">.....</span><br><span class="line">branch &#x27;master&#x27; <span class="built_in">set</span> up to track &#x27;git@github.com:aliveman6/MyBlog.git/main&#x27;.</span><br><span class="line">INFO  Deploy done: git</span><br><span class="line">Hexo generate operation completed successfully.</span><br><span class="line">Hexo server has been started successfully.</span><br><span class="line">Exited the Docker container.</span><br><span class="line">[root@SC Myshell]# </span><br></pre></td></tr></table></figure></div>

<h2 id="6、设置脚本定时任务"><a href="#6、设置脚本定时任务" class="headerlink" title="6、设置脚本定时任务"></a>6、设置脚本定时任务</h2><p>为了更加自动化的进行博客的更新，我决定使用<code>crontab</code>命令来设置一个定时自动更新的脚本任务。</p>
<p>1、打开终端</p>
<p>2、输入<code>crontab -e</code>命令来编辑你的crontab文件</p>
<div class="highlight-container" data-rel="Cmd"><figure class="iseeu highlight cmd"><table><tr><td class="code"><pre><span class="line">[root@SC Myshell]# crontab -e</span><br><span class="line"><span class="number">0</span> <span class="number">0</span> * * * /Myshell/update-blog.sh		## 设置每天的凌晨<span class="number">12</span>点执行一次update-blog.sh脚本</span><br></pre></td></tr></table></figure></div>

<p>3、在打开的编辑器中，添加一行来定义你的定时任务。每一行都代表一个定时任务，格式如下：</p>
<div class="highlight-container" data-rel="Cmd"><figure class="iseeu highlight cmd"><table><tr><td class="code"><pre><span class="line">* * * * * command to be executed</span><br><span class="line">| | | | |</span><br><span class="line">| | | | --------Day of week（<span class="number">0</span>-<span class="number">7</span>）（Sunday=<span class="number">0</span> or <span class="number">7</span>）</span><br><span class="line">| | | ----------Month（<span class="number">1</span>-<span class="number">12</span>）</span><br><span class="line">| | ------------Day of month（<span class="number">1</span>-<span class="number">31</span>）</span><br><span class="line">| --------------Hour（<span class="number">0</span>-<span class="number">23</span>）</span><br><span class="line">----------------Minute（<span class="number">0</span>-<span class="number">59</span>）</span><br><span class="line"></span><br><span class="line">## command to be executed 指的是脚本的路径</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>4、保存并退出编辑器。</p>
<p>现在，定时任务就会被添加到cron的调度列表中，cron会在指定的时间自动执行这个任务。</p>
<h1 id="二、总结"><a href="#二、总结" class="headerlink" title="二、总结"></a>二、总结</h1><p>经过了这一系列的操作，我只需要每天在source文件夹内的_post文件夹进行添加Markdown文件，博客即可自动更新文章并生成到网站中。</p>
]]></content>
      <categories>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux系统学习笔记（一）</title>
    <url>/2024/05/14/2024-05-14-Linux%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h1 id="一、引言"><a href="#一、引言" class="headerlink" title="一、引言"></a>一、引言</h1><p>​	今天在梳理linux系统下的文件目录时发现了一篇很好的文章，遂打算记录下来文章的内容顺便写写自己的一些理解。</p>
<h2 id="1、Tree命令"><a href="#1、Tree命令" class="headerlink" title="1、Tree命令"></a>1、Tree命令</h2><p>首先我们要更直观的了解linux下的文件目录，我们需要先安装一些工具，比如<code>tree</code>，下面是每个系统安装<code>tree</code>命令的方式：</p>
<p>在Ubuntu或者Debian下：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install tree</span><br></pre></td></tr></table></figure></div>

<p>在Red hat或者Fedora下：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo dnf install tree</span><br></pre></td></tr></table></figure></div>

<p>在Arch下：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pacman -S tree</span><br></pre></td></tr></table></figure></div>

<p>在Centos下：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum install tree</span><br></pre></td></tr></table></figure></div>

<p>安装好后，我们在终端窗口运行<code>tree</code>命令：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">tree /</span><br></pre></td></tr></table></figure></div>

<p>上面的指令中，&#x2F;指的是根目录，系统中的其他目录都是从我们的根目录下的，当我们运行tree命令，并从它从根目录，我们可以看到整个目录树，系统中的所有目录以及子目录，还有它们的文件。</p>
<p>但在我们的centos上执行这条命令，它会把整个根目录下的文件都打印出来，所以我们需要开始输入筛选命令。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">tree -L 1 /</span><br><span class="line">[root@localhost x]<span class="comment"># tree -L 1 /</span></span><br><span class="line">/</span><br><span class="line">├── bin -&gt; usr/bin</span><br><span class="line">├── boot</span><br><span class="line">├── dev</span><br><span class="line">├── etc</span><br><span class="line">├── home</span><br><span class="line">├── lib -&gt; usr/lib</span><br><span class="line">├── lib64 -&gt; usr/lib64</span><br><span class="line">├── media</span><br><span class="line">├── mnt</span><br><span class="line">├── opt</span><br><span class="line">├── proc</span><br><span class="line">├── root</span><br><span class="line">├── run</span><br><span class="line">├── sbin -&gt; usr/sbin</span><br><span class="line">├── srv</span><br><span class="line">├── sys</span><br><span class="line">├── tmp</span><br><span class="line">├── usr</span><br><span class="line">└── var</span><br></pre></td></tr></table></figure></div>

<p>上面的指令指的是：只显示<code>/</code>（根目录）开头的目录树的第一级。<code>-L</code>选项告诉树你想看到多少层目录。</p>
<h2 id="2、目录详解"><a href="#2、目录详解" class="headerlink" title="2、目录详解"></a>2、目录详解</h2><h3 id=""><a href="#" class="headerlink" title="&#x2F;"></a>&#x2F;</h3><p>根目录，位于Linux文件系统目录结构的顶层，一般根目录下只存放目录。</p>
<h3 id="bin"><a href="#bin" class="headerlink" title="&#x2F;bin"></a>&#x2F;bin</h3><p><code>/bin</code>目录是包含一些二进制文件的目录，同时包含了供系统管理员及普通用户使用的重要linux命令和二进制（可执行）文件，包含shell解释器等。</p>
<h3 id="boot"><a href="#boot" class="headerlink" title="&#x2F;boot"></a>&#x2F;boot</h3><p><code>/boot</code>目录包含着启动系统所需的文件。它包含了Linux内核，最初的RAM磁盘镜像，以及启动加载程序。常用的文件譬如<code>/boot/grub/grub.conf</code>或<code>menu.lst</code>等就是用来配置启动加载程序；<code>/boot/vmlinuz</code>为linux的内核文件，一般都是单独分区，分区大小为200M即可。</p>
<h3 id="dev"><a href="#dev" class="headerlink" title="&#x2F;dev"></a>&#x2F;dev</h3><p><code>/dev</code>目录存放Linux下的设备文件。其中的许多是在启动时或者是在运行时生成的。例如将新的网络摄像头或USB设备连接上机器，则会自动弹出一个新的设备条目。</p>
<p>我们访问该目录下的某个文件，想当于访问某个设备，存放连接到计算机上的设备（终端、磁盘驱动器、光驱、网卡等）的对应文件，常用的是挂在光驱：<code>mount /dev/cdrom /mnt</code></p>
<h3 id="etc"><a href="#etc" class="headerlink" title="&#x2F;etc"></a>&#x2F;etc</h3><p><code>/etc</code>目录是”配置的所有内容“，包含大部分的系统配置文件。例如，包含系统名称、用户及其密码、网络上计算机的名称以及硬盘上分区的安装位置和时间的文件。</p>
<p>它同时也包含了了一系列shell脚本，系统的每次启动时，这些shell脚本都会打开每个系统服务。该目录中包含的内容都应该是可读的文本文件。①<code>/etc/crontab</code>,该文件定义了自动化任务运行的时间；②<code>/etc/fstab</code>,存储设备以及相关挂载点的列表 ；③<code>/etc/passward</code>，用户账号列表。etc的含义是Et cetera，表示一些相关的其他东西，&#x2F;etc从UNIX早期开始就被用来存放配置文件，一直沿用至今。需要注意的是，&#x2F;etc中存放的是<strong>系统配置文件</strong>，<strong>特定用户的配置文件</strong>放在每个用户的<code>/home</code>目录下。</p>
<h3 id="home"><a href="#home" class="headerlink" title="&#x2F;home"></a>&#x2F;home</h3><p><code>/home</code>是我们可以找到个人目录下的地方。</p>
<p>通常的配置下，每个用户都会在<code>/home</code>目录中拥有一个属于自己的目录。普通用户只能在自己的主目录中创建文件。这一限制可以保护系统免遭错误的用户行为的破坏。</p>
<h3 id="lib"><a href="#lib" class="headerlink" title="&#x2F;lib"></a>&#x2F;lib</h3><p><code>/lib</code>是库文件所在的地方。库是包含应用程序可以使用的代码文件。它们包含应用程序用于在桌面上绘制窗口、控制外围设备或将文件发送到硬盘的代码片段。</p>
<p>在文件系统周围散布着更多的<code>lib</code>目录，但是直接挂载在<code>/</code>的<code>lib</code>目录是特殊的，除此之外，它包含了所有重要的内核模块。 内核模块是使你的显卡、声卡、WiFi、打印机等工作的驱动程序。</p>
<p>&#x2F;lib目录下的库映像文件可以用来启动系统并执行一些命令，目录&#x2F;lib&#x2F;modules包含了可加载的内核模块，&#x2F;lib目录存放了所有重要的库文件，其他的库文件则大部分存放在&#x2F;usr&#x2F;lib目录下。这与Windows系统中的DLL类似。</p>
<h3 id="lost-found"><a href="#lost-found" class="headerlink" title="&#x2F;lost+found"></a>&#x2F;lost+found</h3><p>当系统意外崩溃或关机时，会产生一些文件碎片，这个目录就是用来存放这些文件碎片的。当系统启动时，fsck工具会对这个文件夹进行检查，并且会对损坏的文件系统进行修复。这个目录只在每个分区中出现，比如&#x2F;lost+found就是根分区的备份恢复目录，&#x2F;boot&#x2F;lost+found就是在&#x2F;boot分区的备份恢复目录。</p>
<h3 id="media"><a href="#media" class="headerlink" title="&#x2F;media"></a>&#x2F;media</h3><p>在<code>/media</code>目录中，当你插入外部存储器试图访问它时，将自动挂载它，系统会在&#x2F;media下自动创建子目录，之后就可以通过访问这个子目录来访问媒介。比如你在电脑上插入CD，在&#x2F;media目录下就会自动生成一个子目录，你可以通过访问这个子目录来访问CD的内容。</p>
<h3 id="mnt"><a href="#mnt" class="headerlink" title="&#x2F;mnt"></a>&#x2F;mnt</h3><p><code>/mnt</code> 目录是一些过去的残余。这是你手动挂载存储设备或分区的地方。各种设备挂载到系统后，会在&#x2F;mnt目录下生成相应设备的目录，比如挂载光驱、文件系统、CD等。</p>
<h3 id="opt"><a href="#opt" class="headerlink" title="&#x2F;opt"></a>&#x2F;opt</h3><p><code>/opt</code> 目录通常是你编译软件（即，你从源代码构建，并不是从你的系统的软件库中安装软件）的地方。应用程序最终会出现在 <code>/opt/bin</code> 目录，库会在 <code>/opt/lib</code> 目录中出现。</p>
<p>应用程序和库的另一个地方是 <code>/usr/local</code>，在这里安装软件时，也会有 <code>/usr/local/bin</code> 和 <code>/usr/local/lib</code> 目录。开发人员如何配置文件来控制编译和安装过程，这就决定了软件安装到哪个地方。</p>
<h3 id="proc"><a href="#proc" class="headerlink" title="&#x2F;proc"></a>&#x2F;proc</h3><p><code>/proc</code>，就像 <code>/dev</code> 是一个虚拟目录。它包含有关你的计算机的信息，例如关于你的 CPU 和你的 Linux 系统正在运行的内核的信息。与 <code>/dev</code> 一样，文件和目录是在计算机启动或运行时生成的，因为你的系统正在运行且会发生变化。</p>
<p>从文件角度来讲，它不是存储在硬盘中的真正的文件系统，反而是一个Linux内核维护的虚拟文件系统。它包含的文件是内核的窥视孔。该文件是可读的，从中可以看到内核是如何监管计算的。</p>
<h3 id="root"><a href="#root" class="headerlink" title="&#x2F;root"></a>&#x2F;root</h3><p><code>/root</code> 是系统的超级用户（也称为“管理员”）的主目录。</p>
<h3 id="run"><a href="#run" class="headerlink" title="&#x2F;run"></a>&#x2F;run</h3><p><code>/run</code> 目录用来存放应用程序在运行期间需要的一些短暂存在的文件，比如socket和pid文件，这些文件对这些应用程序的运行很重要，因此不能把他们放在<code>/tmp</code>目录下，因为<code>/tmp</code>目录下的文件有可能会被系统清空。</p>
<h3 id="sbin"><a href="#sbin" class="headerlink" title="&#x2F;sbin"></a>&#x2F;sbin</h3><p><code>/sbin</code> 与 <code>/bin</code> 类似，但它包含的应用程序只有超级用户（即首字母的 <code>s</code> ）才需要。你可以使用 <code>sudo</code> 命令使用这些应用程序，该命令暂时允许你在许多 Linux 发行版上拥有超级用户权限。<code>/sbin</code> 目录通常包含可以安装、删除和格式化各种东西的工具。</p>
<h3 id="srv"><a href="#srv" class="headerlink" title="&#x2F;srv"></a>&#x2F;srv</h3><p><code>/srv</code> 目录主要用来存放一些系统提供的网络服务的数据。如果你正在 Linux 机器上运行 Web 服务器，你网站的 HTML文件将放到 <code>/srv/http</code>（或 <code>/srv/www</code>）。 如果你正在运行 FTP 服务器，则你的文件将放到 <code>/srv/ftp</code>。</p>
<h3 id="sys"><a href="#sys" class="headerlink" title="&#x2F;sys"></a>&#x2F;sys</h3><p><code>/sys</code> 是另一个类似 <code>/proc</code> 和 <code>/dev</code> 的虚拟文件系统，它还包含连接到计算机的设备的信息。都是保存在内存当中，主要是保存一些和内核相关的信息。挂载sysfs 虚拟文件系统，我们可以通过sysfs 文件系统访问 Linux 内核。</p>
<h3 id="tmp"><a href="#tmp" class="headerlink" title="&#x2F;tmp"></a>&#x2F;tmp</h3><p><code>/tmp</code> 包含临时文件，通常由正在运行的应用程序放置。文件和目录通常（并非总是）包含应用程序现在不需要但以后可能需要的数据。</p>
<p>你还可以使用 <code>/tmp</code> 来存储你自己的临时文件 。</p>
<h3 id="usr"><a href="#usr" class="headerlink" title="&#x2F;usr"></a>&#x2F;usr</h3><p><code>/usr</code> 包含了大量目录，而这些目录又包含了应用程序、库、文档、壁纸、图标和许多其他需要应用程序和服务共享的内容。</p>
<p>我们还可以在 <code>/usr</code> 目录下找到 <code>bin</code>，<code>sbin</code>，<code>lib</code> 目录，它们与挂载到根目录下的那些有什么区别呢？现在的区别不是很大。在早期，<code>/bin</code> 目录（挂载在根目录下的）只会包含一些基本的命令，例如 <code>ls</code>、<code>mv</code> 和 <code>rm</code> ；这是一些在安装系统的时候就会预装的一些命令，用于维护系统的一个基本的命令。 而 <code>/usr/bin</code> 目录则包含了用户自己安装和用于工作的软件，例如文字处理器，浏览器和一些其他的软件。</p>
<p>但是许多现代的 Linux 发行版只是把所有的东西都放到 <code>/usr/bin</code> 中，并让 <code>/bin</code> 指向 <code>/usr/bin</code>，以防彻底删除它会破坏某些东西。因此，Debian、Ubuntu 和 Mint 仍然保持 <code>/bin</code> 和 <code>/usr/bin</code> （和 <code>/sbin</code> 和 <code>/usr/sbin</code> ）分离；其他的，比如 Arch 和它衍生版，只是有一个“真实”存储二进制程序的目录，<code>/usr/bin</code>，其余的任何 <code>bin</code> 目录是指向 <code>/usr/</code>bin&#96; 的“假”目录。</p>
<p>可以很明显地发现，Linux将普通用户和系统使用的程序分开存放，比如上面提到过，系统使用的一些重要程序存放在<code>/bin</code>，而那些不重要的程序就被放在<code>/usr/bin</code>。不太重要的系统管理程序存放在&#x2F;usr&#x2F;sbin而不是&#x2F;sbin。usr也被称为UNIX Software Resource，这是比较早期的说法。下面是&#x2F;usr目录下常见的几个子目录的含义。</p>
<h3 id="usr-local"><a href="#usr-local" class="headerlink" title="&#x2F;usr&#x2F;local"></a>&#x2F;usr&#x2F;local</h3><p>这是系统预设的让你安装你后来升级的套件的目录。例如，当你发现有更新的 Web 套件（如 Apache ）可以安装，而你又不想以 rpm 的方式升级你的套件，则你可以将 apache 这个套件安装在 &#x2F;usr&#x2F;local 底下。安装在这里有个好处，因为目前大家的系统都是差不多的，所以如果你的系统要让别人接管的话，也比较容易上手！也比较容易找的到数据！因此，如果你有需要的话，通常都会将 &#x2F;usr&#x2F;local&#x2F;bin 这个路径加到 path 中。</p>
<h3 id="usr-include"><a href="#usr-include" class="headerlink" title="&#x2F;usr&#x2F;include"></a>&#x2F;usr&#x2F;include</h3><p>存放编程语言的头文件和包含文件</p>
<h3 id="usr-share"><a href="#usr-share" class="headerlink" title="&#x2F;usr&#x2F;share"></a>&#x2F;usr&#x2F;share</h3><p>包含了&#x2F;usr&#x2F;bin中的程序所使用的的全部共享数据，这包含默认配置文件、图标、屏幕背景、音频文件等。</p>
<h3 id="usr-src"><a href="#usr-src" class="headerlink" title="&#x2F;usr&#x2F;src"></a>&#x2F;usr&#x2F;src</h3><p>存放源码</p>
<h3 id="usr-share-man或-usr-local-man"><a href="#usr-share-man或-usr-local-man" class="headerlink" title="&#x2F;usr&#x2F;share&#x2F;man或&#x2F;usr&#x2F;local&#x2F;man"></a>&#x2F;usr&#x2F;share&#x2F;man或&#x2F;usr&#x2F;local&#x2F;man</h3><p>程序说明文件存放目录，使用 <code>man</code>、 <code>ls</code>时会查询<code>/usr/share/man/man1/ls.1.gz</code>的内容，建议单独分区，设置较大的磁盘空间。这两个目录为放置各类套件说明档的地方，如果执行 <code>man man</code>，则系统会自动去找这两个目录下的所有说明文件。</p>
<h3 id="var"><a href="#var" class="headerlink" title="&#x2F;var"></a>&#x2F;var</h3><p><code>/var</code> 目录包含了放在 <code>/var/log</code> 子目录的日志文件之类。日志是记录系统中发生的事件的文件。如果内核中出现了什么问题，它将被记录到 <code>/var/log</code> 下的文件中；如果有人试图从外部侵入你的计算机，你的防火墙也将记录尝试。它还包含用于任务的假脱机程序。这些“任务”可以是你发送给共享打印机必须等待执行的任务，因为另一个用户正在打印一个长文档，或者是等待递交给系统上的用户的邮件。</p>
<h3 id="var-log"><a href="#var-log" class="headerlink" title="&#x2F;var&#x2F;log"></a>&#x2F;var&#x2F;log</h3><p>包含的日志文件，记录了各种系统活动。这些文件非常重要，并且应该时不时监控它们。其中最有用的文件是<code>/var/log/messages</code>。安全起见，只有超级用户才能查看日志文件。</p>
<h1 id="二、总结"><a href="#二、总结" class="headerlink" title="二、总结"></a>二、总结</h1><p>这次的文章主要是记录一下别人文章里的linux文件系统的各项解释，方便以后自己日常查看。</p>
<p>参考文章：</p>
<p><a class="link"   href="https://www.hanhongju.com/linux%E7%B3%BB%E7%BB%9F%E4%B8%AD%E7%9B%AE%E5%BD%95%E7%9A%84%E5%86%85%E5%AE%B9%E8%AF%A6%E8%A7%A3/" >Linux系统中目录的内容详解 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://linux.cn/article-9798-1.html" >Linux文件系统详解 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>字符串和编码</title>
    <url>/2024/05/15/2024-05-15-%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E7%BC%96%E7%A0%81/</url>
    <content><![CDATA[<h1 id="一、引言"><a href="#一、引言" class="headerlink" title="一、引言"></a>一、引言</h1><p>我们都知道字符串是我们的应用层语言的一种数据类型，但是，我们关于字符串还需要了解一下其编码问题。</p>
<p>这也是我在学习Python时看到有大佬解释的关于字符编码的问题。</p>
<h2 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h2><h3 id="1、ASCII编码"><a href="#1、ASCII编码" class="headerlink" title="1、ASCII编码"></a>1、ASCII编码</h3><p>​	我们都知道计算机只能处理数字，如果要处理文本，就必须先把文本转换成数字才能处理，最早的计算机在设计时采用的是8个比特（bit）作为一个字节（byte），所以一个字节大概能表示的最大整数就是255（因为二进制<code>11111111</code>&#x3D;十进制255），如果要表示更大的整数，我们就必须要用更多的字节。比如两个字节看可以表示的最大整数是<code>65535</code>，四个字节可以表示的最大整数是<code>4294967295</code>。</p>
<p>​	由于计算机是美国人发明的，因此最早只有127个字符被编码到计算机里，也就是大小写英文字母+数字+一些符号，这个编码表就被称为<code>ASCII编码</code>。比如我们的大写字母A的编码是65，小写字母z的编码是122，下面是一张常用的ASCII编码表：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://streamcons.oss-cn-guangzhou.aliyuncs.com/img/2024-05-15_224033.png"
                     
                ></p>
<h3 id="2、GB2312编码"><a href="#2、GB2312编码" class="headerlink" title="2、GB2312编码"></a>2、GB2312编码</h3><p>但是，要用一个字节处理中文显然是不够的，至少需要两个字节，而且还不能和ASCII编码冲突，所以我们制定了<code>GB2312编码</code>，用来把中文编进去。</p>
<p>GB2312标准共收录6763个汉字，其中一级汉字3755个，二级汉字3008个；同时，GB2312收录了包括拉丁字母、希腊字母、日文平假名及片假名字母、俄语西里尔字母在内的682个全角字符。整个字符集分成94个区，每区有94个位。感兴趣的话可以<a href="https://www.bejson.com/document/gb2312/"><strong>点击这里</strong></a>进行查阅。</p>
<h3 id="3、Unicode字符集"><a href="#3、Unicode字符集" class="headerlink" title="3、Unicode字符集"></a>3、Unicode字符集</h3><p>全世界有上百种语言，日本把日文编到<code>Shift_JIS</code>里，韩国把韩文编到<code>Euc_kr</code>里，所以各国有各国的标准，在多语言混合的文本中，我们一打开就会有乱码。</p>
<p>因此，<code>Unicode字符集</code>就出现了。Unicode把所有语言都统一到一套编码上，这样就不会有乱码发生了。</p>
<p>如今Unicode字符集也在不断的发展，最常用的是UCS-16编码，用两个字节表示一个字符（如果要用到非常偏僻的字符就需要14个字节）。现代操作系统和大多数编程语言都直接支持Unicode。</p>
<h3 id="4、ASCII编码和Unicode编码的区别"><a href="#4、ASCII编码和Unicode编码的区别" class="headerlink" title="4、ASCII编码和Unicode编码的区别"></a>4、ASCII编码和Unicode编码的区别</h3><p>在ASCII编码中，它通常用一个字节表示，而Unicode编码通常用两个字节表示。</p>
<p>字母<code>A</code>用ASCII编码表示为十进制的<code>65</code>，二进制之的<code>01000001</code>。</p>
<p>字符<code>0</code>用ASCII编码表示为十进制的<code>48</code>，二进制的<code>00110000</code>。</p>

  <div class="note p-4 mb-4 rounded-small red icon-padding">
    <i class="note-icon fa-solid fa-bolt"></i><p>注意：字符<code>&#39;0&#39;</code>和整数0是不同的。</p>

  </div>

<p>汉字<code>中</code>已经超出ASCII编码的范围，用Unicode编码是十进制的<code>20013</code>，二进制的<code>01001110 00101101</code>，而字母A用Unicode编码表示的话只需要在前面补0凑数就可以了，因此A的Unicode编码是<code>00000000 01000001</code>。</p>
<h3 id="5、UTF-8编码"><a href="#5、UTF-8编码" class="headerlink" title="5、UTF-8编码"></a>5、UTF-8编码</h3><p>问题又来了，统一成Unicode编码的话英文用Unicode编码比ASCII编码多出了一倍的存储空间，在存储和传输十分不划算。</p>
<p>所以为了节约，我们又发明了把Unicode编码转化为”可变长编码“的<code>UTF-8</code>编码。UTF-8编码把一个Unicode字符根据不同的数字大小编码成1-6个字节，常用的英文字母被编码成1个字节，汉字通常是3个字节，只有很生僻的字符才会被编码成4-6个字节。如果你要传输的文本包含大量英文字符，用UTF-8编码就能节省空间，下面是一张三种编码的对比表：</p>
<table>
<thead>
<tr>
<th align="center">字符</th>
<th align="center">ASCII</th>
<th align="center">Unicode</th>
<th align="center">UTF-8</th>
</tr>
</thead>
<tbody><tr>
<td align="center">A</td>
<td align="center">01000001</td>
<td align="center">00000000 01000001</td>
<td align="center">01000001</td>
</tr>
<tr>
<td align="center">中</td>
<td align="center">x</td>
<td align="center">01001110 00101101</td>
<td align="center">11100100 10111000 10101101</td>
</tr>
</tbody></table>
<p>从上表还可发现，UTF-8编码有一个额外的好处，就是ASCII编码实际上可以被看成是UTF-8编码的一部分，所以，大量只支持ASCII编码的历史遗留软件可以在UTF-8编码下继续工作。</p>
<h1 id="二、总结"><a href="#二、总结" class="headerlink" title="二、总结"></a>二、总结</h1><p>我们现在可以总结一下现在的计算机系统通用的字符编码工作方式：</p>
<p>在计算机内存中，<strong>统一使用Unicode编码</strong>，当需要<strong>保存到硬盘或者需要传输</strong>的时候，就转换为UTF-8编码。</p>
<p>​	用记事本编辑的时候，从文件读取的UTF-8字符被转换为Unicode字符到内存里，编辑完成后，保存的时候再把Unicode转换为UTF-8保存到文件：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://streamcons.oss-cn-guangzhou.aliyuncs.com/img/2024-05-15_233201.png"
                     
                ></p>
<p>​	浏览网页的时候，服务器会把动态生成的Unicode内容转换为UTF-8再传输到浏览器：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://streamcons.oss-cn-guangzhou.aliyuncs.com/img/2024-05-15_233325.png"
                     
                ></p>
<p>所以我们看到很多网页的源码上会有类似<code>&lt;meta charset=&quot;UTF-8&quot; /&gt;</code>的信息，表示该网页正是用的UTF-8编码。</p>
<p>参考文章：</p>
<p><a class="link"   href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017075323632896#0" >字符串和编码 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://tool.oschina.net/commons?type=4" >ASCII对照表 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>计算机基础</category>
      </categories>
      <tags>
        <tag>计算机基础</tag>
      </tags>
  </entry>
  <entry>
    <title>关于使用Prometheus+Grafana监控构建我的hexo个人博客（一）</title>
    <url>/2024/05/16/2024-05-16-%E5%85%B3%E4%BA%8E%E4%BD%BF%E7%94%A8Prometheus+Grafana%E7%9B%91%E6%8E%A7%E6%9E%84%E5%BB%BA%E6%88%91%E7%9A%84hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h1 id="一、引言"><a href="#一、引言" class="headerlink" title="一、引言"></a>一、引言</h1><p>近期因为总是觉得我每次都需要进云服务器中查看服务器和Docker容器的性能指标太过于麻烦，因此打算使用一台监控系统来直接监视我每次需要查看的这些指标，经过了多次参考，最终选择了Prometheus+Grafana的监控体系来完成这一需求。</p>
<p>优点：</p>
<ol>
<li>可直接使用Docker进行创造镜像及构建</li>
<li>可扩展性极强</li>
<li>面板的可视化大大方便了我的监测</li>
<li>能够自由进行个性化配置</li>
</ol>
<p>下面是我的安装过程：</p>
<h2 id="1、安装Docker"><a href="#1、安装Docker" class="headerlink" title="1、安装Docker"></a>1、安装Docker</h2><p>如果你的服务器上还没有安装 Docker，可以使用以下命令安装：</p>
<div class="highlight-container" data-rel="Cmd"><figure class="iseeu highlight cmd"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install -y docker.io</span><br></pre></td></tr></table></figure></div>

<p>在我的服务器中，因为安装了旧版本的docker，后面我尝试着使用<code>docker pull</code>命令也无法成功pull，所以我选择了先卸掉旧版本的docker，然后再安装最新版本的docker：</p>
<h3 id="1、移除旧版本的Docker"><a href="#1、移除旧版本的Docker" class="headerlink" title="1、移除旧版本的Docker"></a>1、移除旧版本的Docker</h3><p>首先，删除旧版本的 Docker 及其相关的依赖包：</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">sudo yum remove docker \</span><br><span class="line">                docker-client \</span><br><span class="line">                docker-client-latest \</span><br><span class="line">                docker-common \</span><br><span class="line">                docker-latest \</span><br><span class="line">                docker-latest-logrotate \</span><br><span class="line">                docker-logrotate \</span><br><span class="line">                docker-engine</span><br></pre></td></tr></table></figure></div>

<h3 id="2、安装Docker-CE"><a href="#2、安装Docker-CE" class="headerlink" title="2、安装Docker CE"></a>2、安装Docker CE</h3><p>执行以下步骤来安装 Docker CE：</p>
<h4 id="1、设置Docker仓库"><a href="#1、设置Docker仓库" class="headerlink" title="1、设置Docker仓库"></a>1、设置Docker仓库</h4><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">sudo yum install -y yum-utils</span><br><span class="line">sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure></div>

<h4 id="2、安装Docker-CE-1"><a href="#2、安装Docker-CE-1" class="headerlink" title="2、安装Docker CE"></a>2、安装Docker CE</h4><div class="highlight-container" data-rel="Cmd"><figure class="iseeu highlight cmd"><table><tr><td class="code"><pre><span class="line">sudo yum install -y docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure></div>

<h4 id="3、启动Docker并设置开机自启"><a href="#3、启动Docker并设置开机自启" class="headerlink" title="3、启动Docker并设置开机自启"></a>3、启动Docker并设置开机自启</h4><div class="highlight-container" data-rel="Cmd"><figure class="iseeu highlight cmd"><table><tr><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">start</span> docker</span><br><span class="line">sudo systemctl enable docker</span><br></pre></td></tr></table></figure></div>

<h3 id="3、验证安装"><a href="#3、验证安装" class="headerlink" title="3、验证安装"></a>3、验证安装</h3><div class="highlight-container" data-rel="Cmd"><figure class="iseeu highlight cmd"><table><tr><td class="code"><pre><span class="line">docker version</span><br></pre></td></tr></table></figure></div>

<h3 id="4、关于在旧版本中Docker的镜像以及容器问题"><a href="#4、关于在旧版本中Docker的镜像以及容器问题" class="headerlink" title="4、关于在旧版本中Docker的镜像以及容器问题"></a>4、关于在旧版本中Docker的镜像以及容器问题</h3><p>我们在移除旧版本的 Docker 时，系统会删除 Docker 的相关文件，但不会删除 Docker 的镜像和容器数据。为了确保你的 Docker 镜像和容器在移除和重新安装 Docker 之后<strong>仍然保留</strong>，我们需要先进行备份后再进行安装，最后安装完后再将镜像以及数据迁移过去：</p>
<h4 id="1、备份Docker数据"><a href="#1、备份Docker数据" class="headerlink" title="1、备份Docker数据"></a>1、备份Docker数据</h4><p>默认情况下，Docker 数据存储在 <code>/var/lib/docker</code> 目录下。在移除 Docker 之前，你可以备份这个目录：</p>
<div class="highlight-container" data-rel="Cmd"><figure class="iseeu highlight cmd"><table><tr><td class="code"><pre><span class="line">sudo cp -r /var/lib/docker /var/lib/docker_backup</span><br></pre></td></tr></table></figure></div>

<h4 id="2、安装完之后使用cp命令还原数据"><a href="#2、安装完之后使用cp命令还原数据" class="headerlink" title="2、安装完之后使用cp命令还原数据"></a>2、安装完之后使用cp命令还原数据</h4><div class="highlight-container" data-rel="Cmd"><figure class="iseeu highlight cmd"><table><tr><td class="code"><pre><span class="line">sudo cp -r -f -v /var/lib/docker_backup /var/lib/docker</span><br></pre></td></tr></table></figure></div>

<p>关于<code>cp</code>命令：</p>
<p>参数说明：</p>
<ul>
<li><code>-r</code> 或 <code>-R</code>：递归地复制目录及其所有内容。</li>
<li><code>-f</code>：强制复制，覆盖目标位置的现有文件而不提示。</li>
<li><code>-v</code>：显示详细信息，打印出正在复制的文件和目录。</li>
</ul>
<h4 id="3、验证Docker镜像和容器："><a href="#3、验证Docker镜像和容器：" class="headerlink" title="3、验证Docker镜像和容器："></a>3、验证Docker镜像和容器：</h4><p>检查 Docker 镜像和容器是否保留：</p>
<div class="highlight-container" data-rel="Cmd"><figure class="iseeu highlight cmd"><table><tr><td class="code"><pre><span class="line">docker images</span><br><span class="line">docker ps -a</span><br></pre></td></tr></table></figure></div>

<h2 id="2、拉去所需要的镜像"><a href="#2、拉去所需要的镜像" class="headerlink" title="2、拉去所需要的镜像"></a>2、拉去所需要的镜像</h2><h3 id="1、拉取镜像"><a href="#1、拉取镜像" class="headerlink" title="1、拉取镜像"></a>1、拉取镜像</h3><p>我们需要从docker仓库中拉取所需镜像：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull prom/prometheus</span><br><span class="line">docker pull grafana/grafana</span><br><span class="line">docker pull prom/node-exporter</span><br><span class="line">docker pull google/cadvisor</span><br></pre></td></tr></table></figure></div>

<h3 id="2、验证是否拉取成功"><a href="#2、验证是否拉取成功" class="headerlink" title="2、验证是否拉取成功"></a>2、验证是否拉取成功</h3><div class="highlight-container" data-rel="Cmd"><figure class="iseeu highlight cmd"><table><tr><td class="code"><pre><span class="line">[root@SC /]# docker images</span><br><span class="line">REPOSITORY           TAG       IMAGE ID       CREATED       SIZE</span><br><span class="line">grafana/grafana      latest    cd2b3782ca63   <span class="number">4</span> days ago    <span class="number">429</span>MB</span><br><span class="line">hexo-image           latest    <span class="number">9</span>e1281bc9afc   <span class="number">6</span> days ago    <span class="number">1</span>.<span class="number">13</span>GB</span><br><span class="line">prom/prometheus      latest    ecb74a3b23a9   <span class="number">9</span> days ago    <span class="number">272</span>MB</span><br><span class="line">prom/node-exporter   latest    <span class="number">9</span>b82e0f21071   <span class="number">3</span> weeks ago   <span class="number">23</span>.<span class="number">3</span>MB</span><br></pre></td></tr></table></figure></div>

<h3 id="3、启动所需镜像"><a href="#3、启动所需镜像" class="headerlink" title="3、启动所需镜像"></a>3、启动所需镜像</h3><p>使用docker ps -a命令查看镜像是否被启动成功：</p>
<div class="highlight-container" data-rel="Cmd"><figure class="iseeu highlight cmd"><table><tr><td class="code"><pre><span class="line">[root@SC /]# docker ps -a</span><br><span class="line">CONTAINER ID   IMAGE                COMMAND                  CREATED        STATUS        PORTS                                       NAMES</span><br><span class="line">a87dc5357f15   prom/prometheus      &quot;/bin/prometheus --c…&quot;   <span class="number">9</span> hours ago    Up <span class="number">9</span> hours    <span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>:<span class="number">1111</span>-&gt;<span class="number">1111</span>/tcp, :::<span class="number">1111</span>-&gt;<span class="number">1111</span>/tcp   prometheus</span><br><span class="line">dd2adfd01f3f   google/cadvisor      &quot;/usr/bin/cadvisor -…&quot;   <span class="number">9</span> hours ago    Up <span class="number">9</span> hours    <span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>:<span class="number">2222</span>-&gt;<span class="number">2222</span>/tcp, :::<span class="number">2222</span>-&gt;<span class="number">2222</span>/tcp   cadvisor</span><br><span class="line">e2510459cba2   grafana/grafana      &quot;/run.sh&quot;                <span class="number">12</span> hours ago   Up <span class="number">12</span> hours   <span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>:<span class="number">3333</span>-&gt;<span class="number">3333</span>/tcp, :::<span class="number">3333</span>-&gt;<span class="number">3333</span>/tcp   grafana</span><br><span class="line"><span class="number">1</span>ad25759c5a9   prom/node-exporter   &quot;/bin/node_exporter&quot;     <span class="number">12</span> hours ago   Up <span class="number">9</span> hours    <span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>:<span class="number">4444</span>-&gt;<span class="number">4444</span>/tcp, :::<span class="number">4444</span>-&gt;<span class="number">4444</span>/tcp   node_exporter</span><br><span class="line">d4fd59bef37e   hexo-image           &quot;docker-entrypoint.s…&quot;   <span class="number">6</span> days ago     Up <span class="number">11</span> hours   <span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>:<span class="number">5555</span>-&gt;<span class="number">5555</span>/tcp, :::<span class="number">5555</span>-&gt;<span class="number">5555</span>/tcp   hexo-blog</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>



<h1 id="二、cAdvisor和Node-exporter"><a href="#二、cAdvisor和Node-exporter" class="headerlink" title="二、cAdvisor和Node_exporter"></a>二、cAdvisor和Node_exporter</h1><h2 id="选择原因"><a href="#选择原因" class="headerlink" title="选择原因"></a>选择原因</h2><p>选择使用 cAdvisor 和 Node Exporter 来监控系统和容器性能指标，是基于它们各自的特点和功能优势：</p>
<p><strong>cAdvisor（Container Advisor）</strong></p>
<p><strong>用途：</strong>监控容器性能指标</p>
<p><strong>优点：</strong></p>
<ol>
<li><strong>专为容器设计</strong>：cAdvisor 专注于监控容器化环境中的容器性能指标，能够收集到详细的容器级别的资源使用情况，包括 CPU、内存、网络和磁盘 I&#x2F;O。</li>
<li><strong>自动发现容器</strong>：cAdvisor 能够自动发现并监控主机上运行的所有容器，无需额外配置。</li>
<li><strong>详细的容器指标</strong>：cAdvisor 提供丰富的容器级别的性能指标，包括容器启动时间、资源限制、资源请求和资源使用情况。</li>
<li><strong>简易部署</strong>：cAdvisor 可以很容易地以 Docker 容器的形式部署，并且能够立即开始收集指标数据。</li>
</ol>
<p><strong>Node Exporter</strong></p>
<p><strong>用途：</strong>监控主机系统性能指标</p>
<p><strong>优点：</strong></p>
<ol>
<li><strong>广泛适用</strong>：Node Exporter 是通用的主机监控工具，适用于监控物理机、虚拟机和各种类型的服务器。</li>
<li><strong>详细的系统指标</strong>：Node Exporter 提供丰富的系统级别的性能指标，包括 CPU 使用率、内存使用情况、磁盘 I&#x2F;O、文件系统使用情况和网络流量等。</li>
<li><strong>稳定可靠</strong>：Node Exporter 是 Prometheus 官方支持的 Exporter，经过广泛测试和应用，具有高可靠性和稳定性。</li>
<li><strong>模块化设计</strong>：Node Exporter 使用模块化设计，允许用户根据需要启用或禁用不同的指标收集模块。</li>
</ol>
<p>关于我为什么选择cAdvisor和node_exporter来监控容器性能指标和系统性能指标，原因如下：</p>
<ol>
<li><strong>专用性和适用性</strong>：cAdvisor 专门用于监控容器性能，能够收集到详细的容器级别指标，而 Node Exporter 则适用于监控主机系统，提供全面的系统级别指标。</li>
<li><strong>丰富的指标</strong>：cAdvisor 提供容器内的详细性能数据，而 Node Exporter 提供主机系统的详细性能数据，两者结合可以实现全面的监控覆盖。</li>
<li><strong>易于集成</strong>：两者都与 Prometheus 无缝集成，能够轻松收集、存储和查询性能指标。</li>
<li><strong>广泛使用和支持</strong>：cAdvisor 和 Node Exporter 都是社区中广泛使用的监控工具，具有良好的支持和文档，可以帮助用户快速部署和解决问题。</li>
</ol>
<h2 id="实际应用场景"><a href="#实际应用场景" class="headerlink" title="实际应用场景"></a>实际应用场景</h2><p>我在网上还能看到一些额外的实际应用场景：</p>
<ul>
<li><strong>cAdvisor</strong>：适用于需要详细监控 Docker 容器性能的场景，例如 Kubernetes 集群中的容器监控，Docker Swarm 中的服务监控等。</li>
<li><strong>Node Exporter</strong>：适用于需要全面监控主机系统性能的场景，例如服务器健康监控，物理机和虚拟机的性能监控等。</li>
</ul>
<p>通过结合使用 cAdvisor 和 Node Exporter，可以实现对整个基础设施（包括容器和主机）的全面监控，确保系统和应用的健康运行。</p>
<h1 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h1><p>本文讲述的是我在部署Prometheus+Grafana监控系统前的安装过程以及容器的正常运行，下一篇文章会写我在后面是如何配置文件以实现监控我们的云服务器和容器的性能。</p>
]]></content>
      <categories>
        <category>博客迁移</category>
      </categories>
      <tags>
        <tag>Prometheus</tag>
        <tag>Grafana</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>关于使用Prometheus+Grafana监控构建我的hexo个人博客（二）</title>
    <url>/2024/05/17/2024-05-17-%E5%85%B3%E4%BA%8E%E4%BD%BF%E7%94%A8Prometheus+Grafana%E7%9B%91%E6%8E%A7%E6%9E%84%E5%BB%BA%E6%88%91%E7%9A%84hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<h1 id="一、引言"><a href="#一、引言" class="headerlink" title="一、引言"></a>一、引言</h1><p>继上一篇安装完Prometheus+Grafana的Docker后，这篇来写配置文件。</p>
<h2 id="1、promtheus配置"><a href="#1、promtheus配置" class="headerlink" title="1、promtheus配置"></a>1、promtheus配置</h2><p>首先我们需要新建一个promtheus的文件夹用于存放配置文件以prometheus.yml及docker的容器创建脚本：</p>
<p><code>mkdir prometheus/</code></p>
<p>接下来我们新建一个prometheus.yml文件用于存放我们需要prometheus去识别哪些服务：</p>
<p>prometheus.yml：</p>
<div class="highlight-container" data-rel="Cmd"><figure class="iseeu highlight cmd"><table><tr><td class="code"><pre><span class="line">[root@SC prometheus]# touch prometheus.yml</span><br><span class="line">[root@SC prometheus]# vim prometheus.yml</span><br><span class="line">[root@SC prometheus]# cat prometheus.yml </span><br><span class="line"></span><br><span class="line">## 全局设定</span><br><span class="line"><span class="function">global:</span></span><br><span class="line"><span class="function">  <span class="title">scrape_interval</span>: 15<span class="title">s</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">scrape_configs</span>:</span></span><br><span class="line"><span class="function">  - <span class="title">job_name</span>: &#x27;<span class="title">prometheus</span>&#x27;</span></span><br><span class="line"><span class="function">    <span class="title">static_configs</span>:</span></span><br><span class="line"><span class="function">      - <span class="title">targets</span>: [&#x27;<span class="title">localhost</span>:9090&#x27;]</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">  - <span class="title">job_name</span>: &#x27;<span class="title">node_exporter</span>&#x27;</span></span><br><span class="line"><span class="function">    <span class="title">static_configs</span>:</span></span><br><span class="line"><span class="function">      - <span class="title">targets</span>: [&#x27;<span class="title">localhost</span>:9100&#x27;]</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">  - <span class="title">job_name</span>: &#x27;<span class="title">cadvisor</span>&#x27;</span></span><br><span class="line"><span class="function">    <span class="title">static_configs</span>:</span></span><br><span class="line"><span class="function">      - <span class="title">targets</span>: [&#x27;<span class="title">localhost</span>:8080&#x27;]</span></span><br></pre></td></tr></table></figure></div>

<h2 id="2、启动镜像"><a href="#2、启动镜像" class="headerlink" title="2、启动镜像"></a>2、启动镜像</h2><p>现在我们需要把Node Exporter、cAdvisor、Grafana、prometheus镜像启动，在启动的同时我们要注意需要配置好必要的选项。</p>
<p>我们可以直接写一个sh脚本来存放多命令的<code>docker run</code>命令。</p>
<h3 id="1、启动Node-Exporter"><a href="#1、启动Node-Exporter" class="headerlink" title="1、启动Node Exporter"></a>1、启动Node Exporter</h3><p>使用以下命令启动 Node Exporter 以监控服务器状态：</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">[root@SC prometheus]<span class="comment"># cat start_node_exporter.sh </span></span><br><span class="line">docker run -d \					<span class="comment">##  以分离模式（后台运行）启动容器。</span></span><br><span class="line">	-p 9100:9100 \				<span class="comment">## 将主机的 8080 端口映射到容器的 8080 端口。这是为了让你可以通过访问主机的 8080 端口查看 cAdvisor 提供的监控界									  面。</span></span><br><span class="line">	--name node_exporter \		<span class="comment">## 指定pull下来的镜像名称</span></span><br><span class="line">	prom/node-exporter</span><br><span class="line">[root@SC prometheus]<span class="comment"># chmod 777 start_node_exporter.sh</span></span><br><span class="line">[root@SC prometheus]<span class="comment"># ./start_node_exporter.sh</span></span><br><span class="line">[root@SC /]<span class="comment"># docker ps | grep node_exporter</span></span><br><span class="line">[root@SC prometheus]<span class="comment"># docker ps | grep node_exporter</span></span><br><span class="line">1ad257754s4gf   prom/node-exporter   <span class="string">&quot;/bin/node_exporter&quot;</span>     25 hours ago   Up 22 hours   0.0.0.0:9100-&gt;9100/tcp, :::9100-&gt;9100/tcp   node_exporter</span><br></pre></td></tr></table></figure></div>

<p>成功启动后，我们可以直接使用localhost:9100（localhost指的是你的本地地址或者是指定IP）地址来访问是否成功获取性能数据：</p>
<p>成功启动：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://streamcons.oss-cn-guangzhou.aliyuncs.com/img/2024-05-19_122750.png"
                     
                ></p>
<p>成功获取性能指标：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://streamcons.oss-cn-guangzhou.aliyuncs.com/img/2024-05-19_122839.png"
                     
                ></p>
<h3 id="2、启动cAdvisor"><a href="#2、启动cAdvisor" class="headerlink" title="2、启动cAdvisor"></a>2、启动cAdvisor</h3><p>同理我们可以按照上面的步骤开启cAdvisor</p>
<p>使用以下命令启动 cAdvisor 以监控 Docker 容器状态：</p>
<div class="highlight-container" data-rel="Cmd"><figure class="iseeu highlight cmd"><table><tr><td class="code"><pre><span class="line">[root@SC prometheus]# cat start_cAdvisor.sh </span><br><span class="line">docker run -d \											## 以分离模式（后台运行）启动容器</span><br><span class="line">	-p <span class="number">8080</span>:<span class="number">8080</span> \										## 将主机的 <span class="number">8080</span> 端口映射到容器的 <span class="number">8080</span> 端口。</span><br><span class="line">	--name cadvisor \									## 指定容器名称</span><br><span class="line">	--volume=/:/rootfs:ro \								## 将主机的根目录（/）挂载到容器的 /rootfs 目录，并设置为只读模式。这是为了让 																	cAdvisor 读取主机文件系统的相关信息</span><br><span class="line">	--volume=/var/run:/var/run:ro \						## 将主机的 /var/run 目录挂载到容器的 /var/run 目录，并设置为只读模式。这是为了让 															cAdvisor 读取 Docker 守护进程的相关信息。</span><br><span class="line">	--volume=/sys:/sys:ro \								## 将主机的 /sys 目录挂载到容器的 /sys 目录，并设置为只读模式。这是为了让 cAdvisor 															读取系统相关的统计信息。</span><br><span class="line">	--volume=/var/lib/docker:/var/lib/docker:ro \		##  将主机的 /var/lib/docker 目录挂载到容器的 /var/lib/docker 目录，并设置为只读																模式。这是为了让 cAdvisor 读取 Docker 容器的相关信息。</span><br><span class="line">	--volume=/dev/kmsg:/dev/kmsg:ro \</span><br><span class="line">	google/cadvisor										##  指定使用的 Docker 镜像为 google/cadvisor。</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p><strong>题外话</strong></p>
<details class="red" data-header-exclude><summary><i class="fa-solid fa-chevron-right"></i>Folding 测试： --volume指令 </summary>
              <div class='content'>
              <p>在 Docker 中，-v 选项用于<strong>将主机系统上的目录或文件挂载到容器内的目录</strong>。挂载可以是只读的，也可以是读写的。通过挂载，你可以使容器内的应用程序访问和使用主机上的数据。</p>  <div class="note p-4 mb-4 rounded-small tip">    <p>挂载的用途</p><ul><li>配置持久化：挂载配置文件，可以使你在主机上修改配置文件后，容器内的服务自动使用最新的配置，而无需重新构建镜像。</li><li>数据共享：将主机上的数据目录挂载到容器内，可以实现数据共享。</li><li>持久化存储：将容器内的数据目录挂载到主机上，防止数据丢失，例如数据库数据文件等。</li></ul>  </div>
              </div>
            </details>

<p>成功开启：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://streamcons.oss-cn-guangzhou.aliyuncs.com/img/2024-05-19_151359.png"
                     
                ></p>
<p>成功获取性能指标：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://streamcons.oss-cn-guangzhou.aliyuncs.com/img/2024-05-19_151545.png"
                     
                ></p>
<h3 id="3、启动prometheus"><a href="#3、启动prometheus" class="headerlink" title="3、启动prometheus"></a>3、启动prometheus</h3><p>使用以下命令启动 Prometheus：</p>
<div class="highlight-container" data-rel="Cmd"><figure class="iseeu highlight cmd"><table><tr><td class="code"><pre><span class="line">[root@SC prometheus]# cat start_prometheus.sh </span><br><span class="line">docker run -d \</span><br><span class="line">	-p <span class="number">9090</span>:<span class="number">9090</span> \</span><br><span class="line">	--name prometheus \</span><br><span class="line">	-v /prometheus/prometheus.yml:/etc/prometheus/prometheus.yml \       ##用于将主机上的文件 prometheus.yml 挂载到容器内的 																				 /etc/prometheus/prometheus.yml 位置。</span><br><span class="line">	prom/prometheus	</span><br></pre></td></tr></table></figure></div>

<p>现在我们打开prometheus（它默认端口是9090端口）：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://streamcons.oss-cn-guangzhou.aliyuncs.com/img/2024-05-19_114824.png"
                     
                ></p>
<h3 id="4、启动Grafana"><a href="#4、启动Grafana" class="headerlink" title="4、启动Grafana"></a>4、启动Grafana</h3><p>使用以下命令启动 Grafana：</p>
<div class="highlight-container" data-rel="Cmd"><figure class="iseeu highlight cmd"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">  -p <span class="number">3000</span>:<span class="number">3000</span> \</span><br><span class="line">  --name grafana \</span><br><span class="line">  grafana/grafana</span><br></pre></td></tr></table></figure></div>

<p>现在我们打开Grafana（默认端口是3000）：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://streamcons.oss-cn-guangzhou.aliyuncs.com/img/2024-05-19_115058.png"
                     
                ></p>
<h3 id="5、关于出现的问题"><a href="#5、关于出现的问题" class="headerlink" title="5、关于出现的问题"></a>5、关于出现的问题</h3><p>如果出现了问题，网站无法打开，首先检查容器有没有打开：</p>
<div class="highlight-container" data-rel="Cmd"><figure class="iseeu highlight cmd"><table><tr><td class="code"><pre><span class="line">## Up意味着容器打开了</span><br><span class="line">[root@SC /]# docker ps | grep prometheus</span><br><span class="line">a87dc58912741123   prom/prometheus      &quot;/bin/prometheus --c…&quot;   <span class="number">21</span> hours ago   Up <span class="number">21</span> hours   <span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>:<span class="number">9090</span>-&gt;<span class="number">9090</span>/tcp, :::<span class="number">9090</span>-&gt;<span class="number">9090</span>/tcp   prometheus</span><br><span class="line">[root@SC /]# docker ps | grep grafana</span><br><span class="line">e25104qdfhqwoid1   grafana/grafana      &quot;/run.sh&quot;                <span class="number">24</span> hours ago   Up <span class="number">24</span> hours   <span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>:<span class="number">3000</span>-&gt;<span class="number">3000</span>/tcp, :::<span class="number">3000</span>-&gt;<span class="number">3000</span>/tcp   grafana</span><br></pre></td></tr></table></figure></div>

<p>接下来检查下防火墙有没有拦截，而在云服务器中，我们需要设置实例的安全组，它的入方向规则需要手动添加并发行端口：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://streamcons.oss-cn-guangzhou.aliyuncs.com/img/2024-05-19_115846.png"
                     
                ></p>
<h2 id="3、配置Grafana"><a href="#3、配置Grafana" class="headerlink" title="3、配置Grafana"></a>3、配置Grafana</h2><p>首先我们需要优先检查在prometheus中能否获取到Node Exporter和cAdvisor的metrics文件夹下的性能统计信息：</p>
<p>在浏览器中访问 Prometheus 的界面 <code>http://your-server-ip:9090</code>，在 “Status” -&gt; “Targets” 页面中查看所有目标的状态。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://streamcons.oss-cn-guangzhou.aliyuncs.com/img/2024-05-19_152651.png"
                     
                ></p>
<p>可以看到，三个模块都是UP状态，证明一切运行正常。</p>
<h3 id="配置prometheus数据源："><a href="#配置prometheus数据源：" class="headerlink" title="配置prometheus数据源："></a>配置prometheus数据源：</h3>
  <div class="note p-4 mb-4 rounded-small primary">
    <p>默认的Grafana账号和密码都是admin</p>

  </div>

<ul>
<li>登录后，转到 Data Sources -&gt; Add data source -&gt; Prometheus</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://streamcons.oss-cn-guangzhou.aliyuncs.com/img/2024-05-19_153525.png"
                     
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://streamcons.oss-cn-guangzhou.aliyuncs.com/img/2024-05-19_153930.png"
                     
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://streamcons.oss-cn-guangzhou.aliyuncs.com/img/2024-05-19_154051.png"
                     
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://streamcons.oss-cn-guangzhou.aliyuncs.com/img/2024-05-19_154141.png"
                     
                ></p>
<ul>
<li>创建仪表盘，添加面板，选择相应的 Prometheus 指标进行可视化</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://streamcons.oss-cn-guangzhou.aliyuncs.com/img/2024-05-19_155149.png"
                     
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://streamcons.oss-cn-guangzhou.aliyuncs.com/img/2024-05-19_155310.png"
                     
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://streamcons.oss-cn-guangzhou.aliyuncs.com/img/2024-05-19_155847.png"
                     
                ></p>
<p>最后我们选择apply（应用）即可。</p>
<p>这里面的编辑面板只是介绍了基础的功能，更多复杂的功能需要我们自己一个个慢慢去研究。</p>
<h1 id="二、最后的呈现效果"><a href="#二、最后的呈现效果" class="headerlink" title="二、最后的呈现效果"></a>二、最后的呈现效果</h1><p>我自己是使用了下面的这些指标来作为监控面板：</p>
<h2 id="1、服务器内存使用情况"><a href="#1、服务器内存使用情况" class="headerlink" title="1、服务器内存使用情况"></a>1、服务器内存使用情况</h2><p>这里使用了promQL语句</p>
<p><code>100 * (1 - (node_memory_MemAvailable_bytes / node_memory_MemTotal_bytes))</code></p>
<h2 id="2、服务器-CPU-负载"><a href="#2、服务器-CPU-负载" class="headerlink" title="2、服务器 CPU 负载"></a>2、服务器 CPU 负载</h2><p><code>node_load1</code></p>
<h2 id="3、服务器-CPU-使用率"><a href="#3、服务器-CPU-使用率" class="headerlink" title="3、服务器 CPU 使用率"></a>3、服务器 CPU 使用率</h2><p><code>100 - (avg by (instance) (irate(node_cpu_seconds_total&#123;mode=&quot;idle&quot;&#125;[5m])) * 100)</code></p>
<h2 id="4、容器-CPU-使用率"><a href="#4、容器-CPU-使用率" class="headerlink" title="4、容器 CPU 使用率"></a>4、容器 CPU 使用率</h2><p><code>sum(rate(container_cpu_usage_seconds_total&#123;image!=&quot;&quot;&#125;[5m])) by (name)</code></p>
<h2 id="5、容器内存使用情况"><a href="#5、容器内存使用情况" class="headerlink" title="5、容器内存使用情况"></a>5、容器内存使用情况</h2><p>sum(container_memory_usage_bytes{image!&#x3D;””}) by (name)</p>
<h2 id="6、服务器网络流量"><a href="#6、服务器网络流量" class="headerlink" title="6、服务器网络流量"></a>6、服务器网络流量</h2><p><code>sum(rate(node_network_receive_bytes_total[5m])) by (instance)</code><br><code>sum(rate(node_network_transmit_bytes_total[5m])) by (instance)</code></p>
<h2 id="7、容器网络流量"><a href="#7、容器网络流量" class="headerlink" title="7、容器网络流量"></a>7、容器网络流量</h2><p><code>sum(rate(container_network_receive_bytes_total&#123;container_label_com_docker_compose_service!=&quot;&quot;&#125;[5m])) by (container_label_com_docker_compose_service)</code></p>
<p><code>sum(rate(container_network_transmit_bytes_total&#123;container_label_com_docker_compose_service!=&quot;&quot;&#125;[5m])) by (container_label_com_docker_compose_service)</code></p>
<h2 id="8、服务器磁盘使用情况"><a href="#8、服务器磁盘使用情况" class="headerlink" title="8、服务器磁盘使用情况"></a>8、服务器磁盘使用情况</h2><p><code>folder_usage_bytes</code></p>
<h2 id="9、服务器磁盘-I-O"><a href="#9、服务器磁盘-I-O" class="headerlink" title="9、服务器磁盘 I&#x2F;O"></a>9、服务器磁盘 I&#x2F;O</h2><p><code>rate(node_disk_reads_completed_total[5m])</code><br><code>rate(node_disk_writes_completed_total[5m])</code></p>
<p>这是总览：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://streamcons.oss-cn-guangzhou.aliyuncs.com/img/2024-05-19_213008.png"
                     
                ></p>
<h1 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h1><p>总的来说，已经基本达成一套promethus+grafana系统来监控我的个人博客的需求。</p>
]]></content>
      <categories>
        <category>博客迁移</category>
      </categories>
      <tags>
        <tag>Prometheus</tag>
        <tag>Grafana</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>关于使用Prometheus+Grafana监控构建我的hexo个人博客（番外一）</title>
    <url>/2024/05/18/2024-05-18-%E5%85%B3%E4%BA%8E%E4%BD%BF%E7%94%A8Prometheus+Grafana%E7%9B%91%E6%8E%A7%E6%9E%84%E5%BB%BA%E6%88%91%E7%9A%84hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E7%95%AA%E5%A4%96%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h1 id="一、引言"><a href="#一、引言" class="headerlink" title="一、引言"></a>一、引言</h1><p>在记录prometheus的查询过程中，我并没有写出编写promQL语句的过程，只是简单的给出了结果。这篇文章就记录一下我的编写过程。</p>
<h2 id="编写过程"><a href="#编写过程" class="headerlink" title="编写过程"></a>编写过程</h2><h3 id="1、服务器内存使用情况"><a href="#1、服务器内存使用情况" class="headerlink" title="1、服务器内存使用情况"></a>1、服务器内存使用情况</h3><p><strong>100 * (1 - (node_memory_MemAvailable_bytes &#x2F; node_memory_MemTotal_bytes))</strong></p>
<p>解释：</p>
<ul>
<li><code>node_memory_MemTotal_bytes</code>：这是系统总内存的度量。它提供了服务器总的可用内存量。</li>
<li><code>node_memory_MemAvailable_bytes</code>：这是系统可用内存的度量。它包括未使用的内存和可以快速回收的内存。</li>
<li><code>node_memory_MemAvailable_bytes / node_memory_MemTotal_bytes</code>：计算系统可用内存占总内存的比例，这里使用的是我们数学的分数思想。</li>
<li><code>1 - (node_memory_MemAvailable_bytes / node_memory_MemTotal_bytes)</code>：计算已使用内存占总内存的比例，1-分数。</li>
<li><code>100 * ...</code>：将比例转换为百分比。</li>
</ul>
<h3 id="2、服务器-CPU-负载"><a href="#2、服务器-CPU-负载" class="headerlink" title="2、服务器 CPU 负载"></a>2、服务器 CPU 负载</h3><p><strong>node_load1</strong></p>
<p>解释：</p>
<ul>
<li><code>node_load1</code>：这是过去 1 分钟的系统平均负载。负载是一个代表任务队列长度的度量，表示系统的忙碌程度。负载值越高，表示系统越繁忙。</li>
</ul>
<h3 id="3、服务器-CPU-使用率"><a href="#3、服务器-CPU-使用率" class="headerlink" title="3、服务器 CPU 使用率"></a>3、服务器 CPU 使用率</h3><p><strong>100 - (avg by (instance) (irate(node_cpu_seconds_total{mode&#x3D;”idle”}[5m])) * 100)</strong></p>
<p>解释：</p>
<ul>
<li><code>node_cpu_seconds_total&#123;mode=&quot;idle&quot;&#125;</code>：这是 CPU 在 <code>idle</code> 模式下的累计时间。它表示 CPU 处于空闲状态的时间总和。</li>
<li><code>irate(node_cpu_seconds_total&#123;mode=&quot;idle&quot;&#125;[5m])</code>：计算 5 分钟内 CPU 空闲时间的瞬时速率。<code>irate</code> 函数计算区间速率，是用来计算快速变化值的理想选择。</li>
<li><code>avg by (instance)</code>：对每个实例取平均值，以便在多个 CPU 核心的服务器上得到一个平均的 CPU 使用率。</li>
<li><code>100 - ... * 100</code>：计算 CPU 使用率。我们用 100 减去空闲时间的百分比来得到使用率。</li>
</ul>
<h3 id="4、容器-CPU-使用率"><a href="#4、容器-CPU-使用率" class="headerlink" title="4、容器 CPU 使用率"></a>4、容器 CPU 使用率</h3><p><strong>sum(rate(container_cpu_usage_seconds_total{image!&#x3D;””}[5m])) by (name)</strong></p>
<p>解释：</p>
<ul>
<li><code>container_cpu_usage_seconds_total&#123;image!=&quot;&quot;&#125;</code>：这是每个容器的 CPU 使用时间，过滤掉没有镜像名称的容器。</li>
<li><code>rate(container_cpu_usage_seconds_total&#123;image!=&quot;&quot;&#125;[5m])</code>：计算 5 分钟内 CPU 使用时间的速率。<code>rate</code> 函数适用于计算长期趋势。</li>
<li><code>sum(rate(...)) by (name)</code>：按容器名称汇总 CPU 使用率。这意味着我们将所有 CPU 使用时间按容器名称聚合在一起。</li>
</ul>
<h3 id="5、容器内存使用情况"><a href="#5、容器内存使用情况" class="headerlink" title="5、容器内存使用情况"></a>5、容器内存使用情况</h3><p><strong>sum(container_memory_usage_bytes{image!&#x3D;””}) by (name)</strong></p>
<p>解释：</p>
<ul>
<li><code>container_memory_usage_bytes&#123;image!=&quot;&quot;&#125;</code>：这是每个容器的内存使用量，过滤掉没有镜像名称的容器。</li>
<li><code>sum(container_memory_usage_bytes&#123;image!=&quot;&quot;&#125;) by (name)</code>：按容器名称汇总内存使用量。这意味着我们将所有内存使用量按容器名称聚合在一起。</li>
</ul>
<h3 id="6、服务器磁盘使用情况"><a href="#6、服务器磁盘使用情况" class="headerlink" title="6、服务器磁盘使用情况"></a>6、服务器磁盘使用情况</h3><p><strong>folder_usage_bytes</strong></p>
<p>解释：</p>
<p>这个是我通过在服务器上编写脚本收集到数据后集成为.prom的文件，最后通过promethus识别.prom后缀文件来展示在Grafana上。这里先不细说，我留着下一篇文章专门详细说说怎么成功获取并展示在Grafana上。</p>
<h3 id="7、服务器网络流量"><a href="#7、服务器网络流量" class="headerlink" title="7、服务器网络流量"></a>7、服务器网络流量</h3><p><strong>sum(rate(node_network_receive_bytes_total[5m])) by (instance)</strong><br><strong>sum(rate(node_network_transmit_bytes_total[5m])) by (instance)</strong></p>
<p>解释：</p>
<ul>
<li><code>node_network_receive_bytes_total</code>：接收的网络流量总字节数。</li>
<li><code>rate(node_network_receive_bytes_total[5m])</code>：计算 5 分钟内接收网络流量的速率。</li>
<li><code>sum(rate(node_network_receive_bytes_total[5m])) by (instance)</code>：按实例汇总接收的网络流量速率。</li>
<li><code>node_network_transmit_bytes_total</code>：发送的网络流量总字节数。</li>
<li><code>rate(node_network_transmit_bytes_total[5m])</code>：计算 5 分钟内发送网络流量的速率。</li>
<li><code>sum(rate(node_network_transmit_bytes_total[5m])) by (instance)</code>：按实例汇总发送的网络流量速率。</li>
</ul>
<h3 id="8、服务器磁盘-I-O"><a href="#8、服务器磁盘-I-O" class="headerlink" title="8、服务器磁盘 I&#x2F;O"></a>8、服务器磁盘 I&#x2F;O</h3><p><strong>rate(node_disk_reads_completed_total[5m])</strong><br><strong>rate(node_disk_writes_completed_total[5m])</strong></p>
<p>解释：</p>
<ul>
<li><code>node_disk_reads_completed_total</code>：完成的磁盘读取操作总数。</li>
<li><code>rate(node_disk_reads_completed_total[5m])</code>：计算 5 分钟内读取操作的速率。</li>
<li><code>node_disk_writes_completed_total</code>：完成的磁盘写入操作总数。</li>
<li><code>rate(node_disk_writes_completed_total[5m])</code>：计算 5 分钟内写入操作的速率。</li>
</ul>
<h3 id="9、容器网络流量"><a href="#9、容器网络流量" class="headerlink" title="9、容器网络流量"></a>9、容器网络流量</h3><p><strong>sum(rate(container_network_receive_bytes_total{container_label_com_docker_compose_service!&#x3D;””}[5m])) by (container_label_com_docker_compose_service)</strong><br><strong>sum(rate(container_network_transmit_bytes_total{container_label_com_docker_compose_service!&#x3D;””}[5m])) by (container_label_com_docker_compose_service)</strong></p>
<p>解释：</p>
<ul>
<li><code>container_network_receive_bytes_total&#123;container_label_com_docker_compose_service!=&quot;&quot;&#125;</code>：接收的容器网络流量总字节数，过滤掉<strong>没有 Docker Compose 服务标签</strong>的容器。</li>
<li><code>rate(container_network_receive_bytes_total&#123;container_label_com_docker_compose_service!=&quot;&quot;&#125;[5m])</code>：计算 5 分钟内接收网络流量的速率。</li>
<li><code>sum(rate(container_network_receive_bytes_total&#123;container_label_com_docker_compose_service!=&quot;&quot;&#125;[5m])) by (container_label_com_docker_compose_service)</code>：按容器标签汇<strong>总接收</strong>的网络流量速率。</li>
<li><code>container_network_transmit_bytes_total&#123;container_label_com_docker_compose_service!=&quot;&quot;&#125;</code>：发送的容器网络流量总字节数，过滤掉没有  Docker Compose 服务标签的容器。</li>
<li><code>rate(container_network_transmit_bytes_total&#123;container_label_com_docker_compose_service!=&quot;&quot;&#125;[5m])</code>：计算 5 分钟内发送网络流量的速率。</li>
<li><code>sum(rate(container_network_transmit_bytes_total&#123;container_label_com_docker_compose_service!=&quot;&quot;&#125;[5m])) by (container_label_com_docker_compose_service)</code>：按容器标签汇总发送的网络流量速率。</li>
</ul>
<p>最后，按自己喜欢的风格在Grafana上进行可视化面板的设计即可。</p>
<h1 id="二、总结"><a href="#二、总结" class="headerlink" title="二、总结"></a>二、总结</h1><p>本文写的是我在编写<strong>prometheus</strong>查询的<strong>promQL</strong>语句时的每个指标的详细编写过程。</p>
]]></content>
      <categories>
        <category>博客迁移</category>
      </categories>
      <tags>
        <tag>Prometheus</tag>
      </tags>
  </entry>
  <entry>
    <title>关于使用Prometheus+Grafana监控构建我的hexo个人博客（番外二）</title>
    <url>/2024/05/19/2024-05-19-%E5%85%B3%E4%BA%8E%E4%BD%BF%E7%94%A8Prometheus+Grafana%E7%9B%91%E6%8E%A7%E6%9E%84%E5%BB%BA%E6%88%91%E7%9A%84hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E7%95%AA%E5%A4%96%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<h1 id="一、引言"><a href="#一、引言" class="headerlink" title="一、引言"></a>一、引言</h1><p>在我的一个监控指标<strong>”服务器磁盘使用情况“</strong>中，我发现我并不能单纯的从prometheus上直接使用promQL语句直接查询（因为Node exporter并没有收集到我想</p>
<p>要的字段数据），所以我参考了网上的资料后发现了可以先使用shell脚本收集我的服务器上的磁盘使用情况，然后使用docker时**<u>映射</u>**收集到的文件，最后使这些</p>
<p>数据集成到node_exporter上，通过prometheus查询字段，展示到Grafana上就大功告成。</p>
<h2 id="1、测试需要用到的命令"><a href="#1、测试需要用到的命令" class="headerlink" title="1、测试需要用到的命令"></a>1、测试需要用到的命令</h2><p>首先我们要明确在Linux上如何使用命令查看服务器磁盘使用情况：</p>
<h3 id="1、Basename"><a href="#1、Basename" class="headerlink" title="1、Basename"></a>1、Basename</h3><p>我们需要让linux打印出需要显示的文件夹名称，为此，我们可以选择<code>basename</code>命令。</p>
<details class="blue" data-header-exclude><summary><i class="fa-solid fa-chevron-right"></i>Folding Basename 命令 </summary>
              <div class='content'>
              <p><code>basename</code> 是一个 Linux 命令，用于从路径中删除前缀部分并返回文件名或目录名。他通常用于各种 Shell 脚本和命令行操作中。</p>  <div class="note p-4 mb-4 rounded-small danger">    <p>基本语法：</p><p><code>basename  [OPTION]  NAME  [SUFFIX]</code></p><p>常见选项：</p><ul><li><code>NAME</code>：要处理的路径。</li><li><code>SUFFIX</code>：可选参数，如果指定，basename 会删除文件名末尾的 <code>SUFFIX</code>。</li></ul>  </div>   <div class="note-large blue">    <div class="notel-title rounded-t-lg p-3 font-bold text-lg flex flex-row gap-2 items-center">      <p>联合使用</p><pre><code>&lt;/div&gt;&lt;div class=&quot;notel-content&quot;&gt;  &lt;p&gt;&lt;code&gt;basename&lt;/code&gt; 通常与 &lt;code&gt;dirname&lt;/code&gt; 命令一起使用，以提取路径的目录部分和文件名部分。例如：&lt;/p&gt;</code></pre><p>##脚本开始##</p><p>path&#x3D;”&#x2F;usr&#x2F;local&#x2F;bin&#x2F;script.sh”</p><p>dir&#x3D;$(dirname “$path”)</p><p>file&#x3D;$(basename “$path”)</p><p>echo “Directory: $dir”</p><p>echo “File: $file”</p><p>##脚本结束##</p><p>输出：</p><p>Directory: &#x2F;usr&#x2F;local&#x2F;bin</p><p>File: script.sh</p><pre><code>&lt;/div&gt;</code></pre>  </div><p>常见用法场景</p><ol><li><strong>脚本处理路径</strong>： 在编写 Shell 脚本时，经常需要处理文件路径，<code>basename</code> 可以轻松提取文件名以供进一步处理。</li><li><strong>日志文件名生成</strong>： 从完整路径中提取日志文件名，用于创建或处理日志文件。</li><li><strong>文件后缀处理</strong>： 通过去除后缀名，<code>basename</code> 可用于处理不同类型的文件，如更改文件扩展名。</li></ol>
              </div>
            </details>



<h3 id="2、du"><a href="#2、du" class="headerlink" title="2、du"></a>2、du</h3><p>其次我们要在linux上打印出各个文件夹的存储占用大小，因此我们可以选择du命令：</p>
<div class="highlight-container" data-rel="Cmd"><figure class="iseeu highlight cmd"><table><tr><td class="code"><pre><span class="line">## 使用du -s查询某个文件的存储占用比</span><br><span class="line">[root@SC /]# du -s /boot </span><br><span class="line"><span class="number">180280</span>	/boot</span><br><span class="line">## 使用awk命令来打印出我们需要的数据</span><br><span class="line">[root@SC /]# du -s /boot | awk &#x27;&#123;<span class="built_in">print</span> $<span class="number">1</span>&#125;&#x27;</span><br><span class="line"><span class="number">180280</span></span><br></pre></td></tr></table></figure></div>

<p>这样我们就确定好了需要的数据，接下来就可以确定我们的脚本结构，然后编写脚本了。</p>
<h2 id="2、确定脚本结构"><a href="#2、确定脚本结构" class="headerlink" title="2、确定脚本结构"></a>2、确定脚本结构</h2><h3 id="1、定义监控的文件夹路径和输出文件"><a href="#1、定义监控的文件夹路径和输出文件" class="headerlink" title="1、定义监控的文件夹路径和输出文件"></a>1、定义监控的文件夹路径和输出文件</h3><p>我们需要有一个文件夹来存放数据，所以我们要定义一个文件夹路径和输出文件：</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">BASE_PATH=<span class="string">&quot;/&quot;</span></span><br><span class="line">OUTPUT_FILE=<span class="string">&quot;/path/to/textfile_collector/folder_usage.prom&quot;</span></span><br></pre></td></tr></table></figure></div>

<p><code>BASE_PATH</code> 定义了要监控的根目录路径。<code>OUTPUT_FILE</code> 指定了 <strong>Prometheus Node Exporter Textfile Collector</strong> 将要读取的输出文件路径。</p>
<h3 id="2、确保输出目录存在"><a href="#2、确保输出目录存在" class="headerlink" title="2、确保输出目录存在"></a>2、确保输出目录存在</h3><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p $(<span class="built_in">dirname</span> <span class="variable">$OUTPUT_FILE</span>)</span><br></pre></td></tr></table></figure></div>

<p><code>$(dirname $OUTPUT_FILE)</code> 提取输出文件路径的目录部分。<code>mkdir -p</code> 命令确保该目录存在（如果不存在，则创建它）。</p>
<h3 id="3、清空输出文件"><a href="#3、清空输出文件" class="headerlink" title="3、清空输出文件"></a>3、清空输出文件</h3><p>在每次收集完数据后我们如果要再下一次实时的再收集新的数据，我们就需要先把之前的数据清空之前的数据：</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">&gt; <span class="variable">$OUTPUT_FILE</span></span><br></pre></td></tr></table></figure></div>

<h3 id="4、遍历根目录下的每个文件夹，收集使用情况"><a href="#4、遍历根目录下的每个文件夹，收集使用情况" class="headerlink" title="4、遍历根目录下的每个文件夹，收集使用情况"></a>4、遍历根目录下的每个文件夹，收集使用情况</h3><p>使用for…in循环结构来遍历根目录下的每个一级文件夹，使用do…done结构来输出打印信息</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">for folder in $BASE_PATH*/ ; do</span><br><span class="line">    folder_name=$(basename &quot;$folder&quot;)</span><br><span class="line">    ## 这里使用if语句是因为proc、sys、dev不属于我们需要收集的文件夹，原因是他们不包含实际数据</span><br><span class="line">    if [ &quot;$folder_name&quot; != &quot;proc&quot; ] &amp;&amp; [ &quot;$folder_name&quot; != &quot;sys&quot; ] &amp;&amp; [ &quot;$folder_name&quot; != &quot;dev&quot; ]; then</span><br><span class="line">        usage=$(du -s &quot;$folder&quot; | awk &#x27;&#123;print $1&#125;&#x27;)</span><br><span class="line">        echo &quot;folder_usage_bytes&#123;folder=\&quot;$folder_name\&quot;&#125; $usage&quot; &gt;&gt; $OUTPUT_FILE</span><br><span class="line">    fi</span><br><span class="line">done</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<ul>
<li><code>for folder in $BASE_PATH*/ ; do</code>：遍历根目录下的每个一级文件夹。<code>$BASE_PATH*/</code> 匹配根目录下的每个目录。</li>
<li><code>folder_name=$(basename &quot;$folder&quot;)</code>：使用 <code>basename</code> 命令获取文件夹的名称。</li>
<li><code>if [ &quot;$folder_name&quot; != &quot;proc&quot; ] &amp;&amp; [ &quot;$folder_name&quot; != &quot;sys&quot; ] &amp;&amp; [ &quot;$folder_name&quot; != &quot;dev&quot; ]; then</code>：跳过特殊的系统目录 <code>proc</code>、<code>sys</code> 和 <code>dev</code>，因为这些目录不包含实际数据且不应该监控。</li>
<li><code>usage=$(du -s &quot;$folder&quot; | awk &#39;&#123;print $1&#125;&#39;)</code>：使用 <code>du -s</code> 命令计算文件夹的总大小（以块为单位）。<code>awk &#39;&#123;print $1&#125;&#39;</code> 提取大小值。</li>
<li><code>echo &quot;folder_usage_bytes&#123;folder=\&quot;$folder_name\&quot;&#125; $usage&quot; &gt;&gt; $OUTPUT_FILE</code>：将文件夹名称和使用大小格式化为 Prometheus 指标，并追加到输出文件中。</li>
</ul>
<h2 id="3、脚本编写"><a href="#3、脚本编写" class="headerlink" title="3、脚本编写"></a>3、脚本编写</h2><p>这是我们脚本的整体过程：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">定义监控的文件夹路径</span></span><br><span class="line">BASE_PATH=&quot;/&quot;</span><br><span class="line">OUTPUT_FILE=&quot;/path/to/textfile_collector/folder_usage.prom&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">确保输出目录存在</span></span><br><span class="line">mkdir -p $(dirname $OUTPUT_FILE)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">清空输出文件</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"><span class="variable">$OUTPUT_FILE</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">遍历根目录下的每个文件夹，收集使用情况</span></span><br><span class="line">for folder in $BASE_PATH*/ ; do</span><br><span class="line">    folder_name=$(basename &quot;$folder&quot;)</span><br><span class="line">    if [ &quot;$folder_name&quot; != &quot;proc&quot; ] &amp;&amp; [ &quot;$folder_name&quot; != &quot;sys&quot; ] &amp;&amp; [ &quot;$folder_name&quot; != &quot;dev&quot; ]; then</span><br><span class="line">        usage=$(du -s &quot;$folder&quot; | awk &#x27;&#123;print $1&#125;&#x27;)</span><br><span class="line">        echo &quot;folder_usage_bytes&#123;folder=\&quot;$folder_name\&quot;&#125; $usage&quot; &gt;&gt; $OUTPUT_FILE</span><br><span class="line">    fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure></div>

<h2 id="4、运行-Node-Exporter-Docker-容器并映射目录"><a href="#4、运行-Node-Exporter-Docker-容器并映射目录" class="headerlink" title="4、运行 Node Exporter Docker 容器并映射目录"></a>4、运行 Node Exporter Docker 容器并映射目录</h2><p>我们使用的使docker安装Node Exporter，所以我们需要重做一个Docker容器并将脚本文件从主机映射到容器的目录内，这样才能让容器收集到主机的数据。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@SC prometheus]# mkdir Node_exporter</span><br><span class="line">[root@SC prometheus]# cd Node_exporter/</span><br><span class="line">[root@SC Node_exporter]# mkdir textfile_collector</span><br><span class="line">[root@SC Node_exporter]# docker stop node_exporter </span><br><span class="line">node_exporter</span><br><span class="line">[root@SC Node_exporter]# docker rm node_exporter </span><br><span class="line">node_exporter</span><br></pre></td></tr></table></figure></div>

<p>配置Node exporter的Docker run脚本：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@SC prometheus]# vim start_node_exporter.sh </span><br><span class="line">[root@SC prometheus]# ls</span><br><span class="line">Node_exporter  prometheus.yml  start_cAdvisor.sh  start_node_exporter.sh  start_prometheus.sh</span><br><span class="line">[root@SC prometheus]# cat start_node_exporter.sh </span><br><span class="line">docker run -d \</span><br><span class="line">	-p 9100:9100 \</span><br><span class="line">	--name node_exporter \</span><br><span class="line">	-v /prometheus/Node_exporter/textfile_collector:/var/lib/node_exporter/textfile_collector \</span><br><span class="line">	prom/node-exporter --collector.textfile.directory=/var/lib/node_exporter/textfile_collector</span><br><span class="line">[root@SC prometheus]# </span><br><span class="line">[root@SC prometheus]# ./start_node_exporter.sh </span><br><span class="line">782806f0c37e5e24eced4f81fed933f2dea10538s4fcb3f7ebfd8dqwdihqw111212312</span><br><span class="line">[root@SC prometheus]# cd Node_exporter/</span><br><span class="line">[root@SC Node_exporter]# vim update_ServerFileSystemProportion.sh </span><br><span class="line">[root@SC Node_exporter]# cat update_ServerFileSystemProportion.sh </span><br><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">BASE_PATH=&quot;/&quot;</span><br><span class="line">OUTPUT_FILE=&quot;/prometheus/Node_exporter/textfile_collector/folder_usage.prom&quot;</span><br><span class="line"></span><br><span class="line"># 确保输出目录存在</span><br><span class="line">mkdir -p $(dirname $OUTPUT_FILE)</span><br><span class="line"></span><br><span class="line"># 清空输出文件</span><br><span class="line">&gt; $OUTPUT_FILE</span><br><span class="line"></span><br><span class="line"># 遍历根目录下的每个文件夹，收集使用情况</span><br><span class="line">for folder in $BASE_PATH*/ ; do</span><br><span class="line">    folder_name=$(basename &quot;$folder&quot;)</span><br><span class="line">    if [ &quot;$folder_name&quot; != &quot;proc&quot; ] &amp;&amp; [ &quot;$folder_name&quot; != &quot;sys&quot; ] &amp;&amp; [ &quot;$folder_name&quot; != &quot;dev&quot; ]; then</span><br><span class="line">        usage=$(du -s &quot;$folder&quot; | awk &#x27;&#123;print $1&#125;&#x27;)</span><br><span class="line">        echo &quot;folder_usage_bytes&#123;folder=\&quot;$folder_name\&quot;&#125; $usage&quot; &gt;&gt; $OUTPUT_FILE</span><br><span class="line">    fi</span><br><span class="line">done</span><br><span class="line">[root@SC Node_exporter]# chmod 777 update_ServerFileSystemProportion.sh </span><br><span class="line">[root@SC Node_exporter]# ls</span><br><span class="line">textfile_collector  update_ServerFileSystemProportion.sh</span><br><span class="line">[root@SC Node_exporter]# ./update_ServerFileSystemProportion.sh </span><br><span class="line">[root@SC Node_exporter]# ls</span><br><span class="line">textfile_collector  update_ServerFileSystemProportion.sh</span><br><span class="line">[root@SC Node_exporter]# cd textfile_collector/</span><br><span class="line">[root@SC textfile_collector]# ls</span><br><span class="line">folder_usage.prom</span><br><span class="line">[root@SC textfile_collector]# cat folder_usage.prom </span><br><span class="line">folder_usage_bytes&#123;folder=&quot;bin&quot;&#125; 360772</span><br><span class="line">folder_usage_bytes&#123;folder=&quot;boot&quot;&#125; 180280</span><br><span class="line">folder_usage_bytes&#123;folder=&quot;Dockerfile&quot;&#125; 8</span><br><span class="line">folder_usage_bytes&#123;folder=&quot;etc&quot;&#125; 40404</span><br><span class="line">folder_usage_bytes&#123;folder=&quot;home&quot;&#125; 4</span><br><span class="line">folder_usage_bytes&#123;folder=&quot;lib&quot;&#125; 836080</span><br><span class="line">folder_usage_bytes&#123;folder=&quot;lib64&quot;&#125; 180732</span><br><span class="line">folder_usage_bytes&#123;folder=&quot;lost+found&quot;&#125; 16</span><br><span class="line">folder_usage_bytes&#123;folder=&quot;media&quot;&#125; 4</span><br><span class="line">folder_usage_bytes&#123;folder=&quot;mnt&quot;&#125; 4</span><br><span class="line">folder_usage_bytes&#123;folder=&quot;Myshell&quot;&#125; 8</span><br><span class="line">folder_usage_bytes&#123;folder=&quot;opt&quot;&#125; 41388</span><br><span class="line">folder_usage_bytes&#123;folder=&quot;path&quot;&#125; 12</span><br><span class="line">folder_usage_bytes&#123;folder=&quot;prometheus&quot;&#125; 36</span><br><span class="line">folder_usage_bytes&#123;folder=&quot;root&quot;&#125; 272</span><br><span class="line">folder_usage_bytes&#123;folder=&quot;run&quot;&#125; 884</span><br><span class="line">folder_usage_bytes&#123;folder=&quot;sbin&quot;&#125; 46632</span><br><span class="line">folder_usage_bytes&#123;folder=&quot;srv&quot;&#125; 4</span><br><span class="line">folder_usage_bytes&#123;folder=&quot;tmp&quot;&#125; 40</span><br><span class="line">folder_usage_bytes&#123;folder=&quot;usr&quot;&#125; 2604296</span><br><span class="line">folder_usage_bytes&#123;folder=&quot;var&quot;&#125; 7282588</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>



<p>可以看到，我们收集并按照prometheus的格式打印出了”folder_usage_bytes{folder&#x3D;”bin”} 360772“这样的数据，我们接下来直接<strong>重启prometheus容器</strong>后擦汗寻是否能搜索到<code>”folder_usage_bytes“字段</code>的数据：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://streamcons.oss-cn-guangzhou.aliyuncs.com/img/2024-05-19_235817.png"
                     
                ></p>
<p>搜索成功，接下来我们就可以直接去Grafana上进行个性化面板配置了。</p>
<h1 id="二、总结"><a href="#二、总结" class="headerlink" title="二、总结"></a>二、总结</h1><p>此文讲述的使我怎么使用shell脚本收集数据并通过docker映射到容器中进行prometheus的数据集成，实现了”实时监控服务器使用情况“这一需求。</p>
]]></content>
      <categories>
        <category>博客迁移</category>
      </categories>
      <tags>
        <tag>Shell</tag>
        <tag>Prometheus</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux系统学习笔记（二）：Vim</title>
    <url>/2024/05/20/2024-05-20-Linux%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9AVim/</url>
    <content><![CDATA[<h1 id="一、引言"><a href="#一、引言" class="headerlink" title="一、引言"></a>一、引言</h1><p>这篇文章记一次我们经常使用的Vim命令，这个vim在我们的linux发行版中是主流的编辑工具。特此记录下vim的用法。</p>
<h2 id="1、Vim的三种模式"><a href="#1、Vim的三种模式" class="headerlink" title="1、Vim的三种模式"></a>1、Vim的三种模式</h2><h3 id="1、命令模式"><a href="#1、命令模式" class="headerlink" title="1、命令模式"></a>1、命令模式</h3><p>使用 Vim 编辑文件时，默认处于命令模式。在此模式下，可以使用上、下、左、右键或者 k、j、h、l 命令进行光标移动，还可以对文件内容进行<strong>复制、粘贴、替换、删除</strong>等操作。</p>
<h3 id="2、输入模式"><a href="#2、输入模式" class="headerlink" title="2、输入模式"></a>2、输入模式</h3><p>在输入模式下可以对文件执行写操作，类似在 Windows 的文档中输入内容。进入输入模式的方法是输入 i、a、o 等插入命令，编写完成后按 Esc 键即可返回命令模式。</p>
<h3 id="3、编辑模式"><a href="#3、编辑模式" class="headerlink" title="3、编辑模式"></a>3、编辑模式</h3><p>如果要保存、查找或者替换一些内容等，就需要进入编辑模式。编辑模式的进入方法为：在命令模式下按”:”键，Vim 窗口的左下方会出现一个”:”符号，这时就可以输入相关的指令进行操作了。指令执行后会自动返回命令模式。</p>
<h2 id="2、普通模式常用命令"><a href="#2、普通模式常用命令" class="headerlink" title="2、普通模式常用命令"></a>2、普通模式常用命令</h2><h3 id="1、光标移动"><a href="#1、光标移动" class="headerlink" title="1、光标移动"></a>1、光标移动</h3><p>以字符为移动：</p>
<ul>
<li><code>h</code>：向左移动一个字符</li>
<li><code>j</code>：向下移动一行</li>
<li><code>k</code>：向上移动一行</li>
<li><code>l</code>：向右移动一个字符</li>
</ul>
<p>以单词为移动：</p>
<ul>
<li><code>w</code>：移动光标到下一个单词的单词首</li>
<li><code>b</code>：移动光标到上一个单词的单词首</li>
<li><code>e</code>：移动光标到下一个单词的单词尾</li>
<li><code>c</code>：移动到行尾或者行首</li>
</ul>
<h3 id="2、插入"><a href="#2、插入" class="headerlink" title="2、插入"></a>2、插入</h3><ul>
<li><code>i</code>：在当前光标所在位置插入随后输入的文本，光标后的文本<strong>相应向右移动</strong></li>
<li><code>a</code>：在当前光标所在位置之后插入随后输入的文本</li>
<li><code>o</code>：在光标所在行的下面<strong>插入新的一行</strong>。光标停在空行首，等待输入文本</li>
</ul>
<p>当处于输入模式的时候，右下角的状态如下：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://streamcons.oss-cn-guangzhou.aliyuncs.com/img/2024-05-20_221517.png"
                     
                ></p>
<h3 id="3、编辑"><a href="#3、编辑" class="headerlink" title="3、编辑"></a>3、编辑</h3><p>查找指定字符串</p>
<p>在命令模式下输入：<code>/char</code> <code>#char</code>为需要查找的字符，在查找的过程中还以使用$^等进行匹配，然后enter键就可以了，然后使用<code>n</code>，<code>N</code>进行下一个或者上一个查找。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://streamcons.oss-cn-guangzhou.aliyuncs.com/img/2024-05-20_222021.png"
                     
                ></p>
<h3 id="4、替换"><a href="#4、替换" class="headerlink" title="4、替换"></a>4、替换</h3><ul>
<li><code>r</code>：替换当前光标的单个字符</li>
<li><code>R</code>：从当前光标开始替换，esc退出</li>
<li><code>:s/old/new</code>：在当前行替换第一个匹配的 <code>old</code>为 <code>new</code></li>
<li><code>:s/old/new/g</code>：在当前行替换<strong>所有的</strong> <code>old</code>为 <code>new</code></li>
<li><code>%s/old/new/g</code>：在整个文件中替换<strong>所有的</strong> <code>old</code>为 <code>new</code></li>
<li><code>%s/old/new/gc</code>：在整个文件中替换<strong>所有的</strong> <code>old</code>为 <code>new</code>，并确认每次替换</li>
</ul>
<h3 id="5、删除"><a href="#5、删除" class="headerlink" title="5、删除"></a>5、删除</h3><ul>
<li><code>x</code>：删除光标所在字符</li>
<li><code>dd</code>：删除整行</li>
<li><code>dw</code>：删除到下一个单词开始</li>
<li><code>ndd</code> ：表示删除当前光标接下来的n行， 例如5dd意思就是删除当前光标的5行</li>
</ul>
<h3 id="6、复制"><a href="#6、复制" class="headerlink" title="6、复制"></a>6、复制</h3><ul>
<li><code>yy</code>：复制整行</li>
<li><code>p</code>：在光标后粘贴</li>
<li><code>P</code>：在光标前粘贴</li>
<li><code>nyy</code> ：表示复制当前光标接下来的n行， 例如5yy意思就是复制当前光标的5行</li>
</ul>
<h3 id="7、撤销和重做"><a href="#7、撤销和重做" class="headerlink" title="7、撤销和重做"></a>7、撤销和重做</h3><ul>
<li><code>u</code>：撤销上一步操作</li>
<li><code>Ctrl + r</code>：重做被撤销的操作</li>
</ul>
<p>8、保存和退出</p>
<ul>
<li><code>:w</code>：保存文件</li>
<li><code>:q</code>：退出Vim</li>
<li><code>:wq</code>：保存并退出</li>
<li><code>:q！</code>：保存并退出</li>
<li><code>:sav filename</code>：另存为新文件</li>
</ul>
<h2 id="3、其他常用设置"><a href="#3、其他常用设置" class="headerlink" title="3、其他常用设置"></a>3、其他常用设置</h2><p>Vim的配置文件是<code>~/.vimrc</code>。下面是各类选项：</p>
<div class="highlight-container" data-rel="Cmd"><figure class="iseeu highlight cmd"><table><tr><td class="code"><pre><span class="line">&quot; 显示行号</span><br><span class="line"><span class="built_in">set</span> number</span><br><span class="line"></span><br><span class="line">&quot; 语法高亮</span><br><span class="line">syntax on</span><br><span class="line"></span><br><span class="line">&quot; 自动缩进</span><br><span class="line"><span class="built_in">set</span> autoindent</span><br><span class="line"></span><br><span class="line">&quot; 设置tab宽度为<span class="number">4</span>个空格</span><br><span class="line"><span class="built_in">set</span> tabstop=<span class="number">4</span></span><br><span class="line"><span class="built_in">set</span> shiftwidth=<span class="number">4</span></span><br><span class="line"><span class="built_in">set</span> expandtab</span><br><span class="line"></span><br><span class="line">&quot; 搜索时忽略大小写</span><br><span class="line"><span class="built_in">set</span> ignorecase</span><br><span class="line"></span><br><span class="line">&quot; 高亮显示搜索结果</span><br><span class="line"><span class="built_in">set</span> hlsearch</span><br><span class="line"></span><br><span class="line">是否依据语法显示相关的颜色帮助。如果颜色收到了干扰，可以取消此设置。</span><br><span class="line">syn on</span><br><span class="line">syn off</span><br><span class="line"></span><br><span class="line">是否保存自动备份文件。默认是nobackup不备份，如果设置了备份，则会产生“文件名~”作为备份文件</span><br><span class="line"><span class="built_in">set</span> backup</span><br><span class="line"><span class="built_in">set</span> nobackup</span><br></pre></td></tr></table></figure></div>



<h1 id="二、总结"><a href="#二、总结" class="headerlink" title="二、总结"></a>二、总结</h1><p>Vim是一款功能强大的文本编辑器，通过掌握其基本用法和命令，可以极大地提高文本编辑的效率。灵活运用Vim的模式、命令和插件，可以满足不同用户的需求。</p>
<p>参考文章：<a class="link"   href="https://www.cnblogs.com/zsql/p/10583396.html" >Linux之vim详解 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux命令学习笔记（一）</title>
    <url>/2024/05/09/Linux%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h1 id="Linux命令"><a href="#Linux命令" class="headerlink" title="Linux命令"></a>Linux命令</h1><p>近期整理了下常用的Linux命令，现在想将他们整理在博客中，因此开了这篇文章。</p>
<h2 id="ps、date、wc命令"><a href="#ps、date、wc命令" class="headerlink" title="ps、date、wc命令"></a>ps、date、wc命令</h2><h3 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h3><p>​	Linux下会运行各种各样的进程，如果要进行监控我们必须对这些进程进行监控；ps命令可以看到<strong>进程的运行状态</strong>、<strong>进程是否结束</strong>、<strong>哪些进程占用了过多的资源</strong>等。但注意，<strong>ps命令是<code>显示瞬间进程的状态</code>，并不会动态连续跟进进程状态，如果想对进程进行实时监控应该用<code>top命令</code>。</strong></p>
<h3 id="date"><a href="#date" class="headerlink" title="date"></a>date</h3><p>​	date命令可以<strong>按照指定格式显示日期</strong>，只键入date则可以默认显示当前时间。</p>
<h3 id="wc"><a href="#wc" class="headerlink" title="wc"></a>wc</h3><p>​	在Linux下wc命令用于计算字数，利用wc指令我们可以<strong>计算文件的Bytes数、字数、或是列数</strong>。</p>
<p>下面是三个命令对应参数的使用方法：</p>
<div class="tabs" id="tab-first-unique-name"><ul class="nav-tabs"><li class="tab active"><a class="#first-unique-name-1">ps</a></li><li class="tab"><a class="#first-unique-name-2">date</a></li><li class="tab"><a class="#first-unique-name-3">wc</a></li></ul><div class="tab-content"><div class="tab-pane active" id="first-unique-name-1"><p>ps [选项]</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>-A</td>
<td>显示所有进程，跟-e效果一样</td>
</tr>
<tr>
<td>-a</td>
<td>显示现行终端机下的所有进程，包括其他用户的进程</td>
</tr>
<tr>
<td>-u</td>
<td>显示当前用户的进程状态</td>
</tr>
<tr>
<td>-x</td>
<td>通常与-a一起使用，方便列出完整的信息</td>
</tr>
<tr>
<td>-l</td>
<td>较长，较详细的将PID的信息列出</td>
</tr>
<tr>
<td>-j</td>
<td>工作的格式（jobs format）</td>
</tr>
<tr>
<td>-f</td>
<td>把进程的所有信息都显示出来</td>
</tr>
<tr>
<td>-e</td>
<td>表示所有继承</td>
</tr>
</tbody></table></div><div class="tab-pane" id="first-unique-name-2"><p>date ”+今天是%Y“（格式）</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>%n</td>
<td>下一行</td>
</tr>
<tr>
<td>%t</td>
<td>跳格</td>
</tr>
<tr>
<td>%H</td>
<td>小时（1-12）</td>
</tr>
<tr>
<td>%k</td>
<td>小时（0-23）</td>
</tr>
<tr>
<td>%l</td>
<td>小时（1-12）</td>
</tr>
<tr>
<td>%M</td>
<td>分钟（00-59）</td>
</tr>
<tr>
<td>%p</td>
<td>显示本地AM或PM</td>
</tr>
<tr>
<td>%r</td>
<td>直接显示（24小时制）</td>
</tr>
<tr>
<td>%S</td>
<td>秒</td>
</tr>
<tr>
<td>%A</td>
<td>显示星期几（Sunday格式）</td>
</tr>
<tr>
<td>%B</td>
<td>月份</td>
</tr>
<tr>
<td>%j</td>
<td>一年中的第几天</td>
</tr>
<tr>
<td>%Y</td>
<td>年</td>
</tr>
<tr>
<td>%m</td>
<td>月</td>
</tr>
<tr>
<td>%d</td>
<td>日</td>
</tr>
<tr>
<td>%x</td>
<td>直接显示日期</td>
</tr>
</tbody></table></div><div class="tab-pane" id="first-unique-name-3"><p>wc [-c -l -w] [-help] [–version] [文件]</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>-c（–chars）</td>
<td>只显示bytes数</td>
</tr>
<tr>
<td>-l（–lines）</td>
<td>只显示行数</td>
</tr>
<tr>
<td>-w（–words）</td>
<td>只显示字数</td>
</tr>
<tr>
<td>–help</td>
<td>在线帮助</td>
</tr>
<tr>
<td>–version</td>
<td>显示版本信息</td>
</tr>
</tbody></table></div></div></div>

<h3 id="终端下使用例子"><a href="#终端下使用例子" class="headerlink" title="终端下使用例子"></a>终端下使用例子</h3><h4 id="ps命令例子"><a href="#ps命令例子" class="headerlink" title="ps命令例子"></a>ps命令例子</h4><div class="highlight-container" data-rel="Cmd"><figure class="iseeu highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="function">root@debian:~# <span class="title">ps</span> -<span class="title">l</span></span></span><br><span class="line"><span class="function"><span class="title">F</span> <span class="title">S</span>   <span class="title">UID</span>     <span class="title">PID</span>    <span class="title">PPID</span>  <span class="title">C</span> <span class="title">PRI</span>  <span class="title">NI</span> <span class="title">ADDR</span> <span class="title">SZ</span> <span class="title">WCHAN</span>  <span class="title">TTY</span>          <span class="title">TIME</span> <span class="title">CMD</span></span></span><br><span class="line"><span class="function">4 <span class="title">S</span>     0    1042    1018  0  80   0 -  2033 -      <span class="title">pts</span>/0    00:00:00 <span class="title">bash</span></span></span><br><span class="line"><span class="function">4 <span class="title">R</span>     0    1054    1042  0  80   0 -  2476 -      <span class="title">pts</span>/0    00:00:00 <span class="title">ps</span></span></span><br><span class="line"><span class="function"><span class="title">root</span>@<span class="title">debian</span>:~# <span class="title">ps</span> -<span class="title">aux</span></span></span><br><span class="line"><span class="function">    <span class="title">PID</span> <span class="title">TTY</span>          <span class="title">TIME</span> <span class="title">CMD</span></span></span><br><span class="line"><span class="function">    661 <span class="title">tty1</span>     00:00:00 <span class="title">dbus</span>-<span class="title">run</span>-<span class="title">sessio</span></span></span><br><span class="line"><span class="function">    662 <span class="title">tty1</span>     00:00:00 <span class="title">dbus</span>-<span class="title">daemon</span></span></span><br><span class="line"><span class="function">    665 <span class="title">tty1</span>     00:00:00 <span class="title">gnome</span>-<span class="title">session</span>-<span class="title">b</span></span></span><br><span class="line"><span class="function">    709 <span class="title">tty1</span>     00:00:03 <span class="title">gnome</span>-<span class="title">shell</span></span></span><br><span class="line"><span class="function">    786 <span class="title">tty1</span>     00:00:00 <span class="title">at</span>-<span class="title">spi</span>-<span class="title">bus</span>-<span class="title">laun</span></span></span><br><span class="line"><span class="function">    791 <span class="title">tty1</span>     00:00:00 <span class="title">dbus</span>-<span class="title">daemon</span></span></span><br><span class="line"><span class="function">    795 <span class="title">tty1</span>     00:00:00 <span class="title">Xwayland</span></span></span><br><span class="line"><span class="function">    818 <span class="title">tty1</span>     00:00:00 <span class="title">xdg</span>-<span class="title">permission</span>-</span></span><br><span class="line"><span class="function">    832 <span class="title">tty1</span>     00:00:00 <span class="title">gjs</span></span></span><br><span class="line"><span class="function">    833 <span class="title">tty1</span>     00:00:00 <span class="title">at</span>-<span class="title">spi2</span>-<span class="title">registr</span></span></span><br><span class="line"><span class="function">    835 <span class="title">tty1</span>     00:00:00 <span class="title">gsd</span>-<span class="title">sharing</span></span></span><br><span class="line"><span class="function">    841 <span class="title">tty1</span>     00:00:00 <span class="title">gsd</span>-<span class="title">wacom</span></span></span><br><span class="line"><span class="function">    844 <span class="title">tty1</span>     00:00:00 <span class="title">gsd</span>-<span class="title">color</span></span></span><br><span class="line"><span class="function">    846 <span class="title">tty1</span>     00:00:00 <span class="title">gsd</span>-<span class="title">keyboard</span></span></span><br><span class="line"><span class="function">    847 <span class="title">tty1</span>     00:00:00 <span class="title">gsd</span>-<span class="title">print</span>-<span class="title">notif</span></span></span><br><span class="line"><span class="function">    848 <span class="title">tty1</span>     00:00:00 <span class="title">gsd</span>-<span class="title">rfkill</span></span></span><br><span class="line"><span class="function">    850 <span class="title">tty1</span>     00:00:00 <span class="title">gsd</span>-<span class="title">smartcard</span></span></span><br><span class="line"><span class="function">    856 <span class="title">tty1</span>     00:00:00 <span class="title">gsd</span>-<span class="title">datetime</span></span></span><br><span class="line"><span class="function">    860 <span class="title">tty1</span>     00:00:00 <span class="title">gsd</span>-<span class="title">media</span>-<span class="title">keys</span></span></span><br><span class="line"><span class="function">    863 <span class="title">tty1</span>     00:00:00 <span class="title">gsd</span>-<span class="title">screensaver</span></span></span><br><span class="line"><span class="function">    865 <span class="title">tty1</span>     00:00:00 <span class="title">gsd</span>-<span class="title">sound</span></span></span><br><span class="line"><span class="function">    872 <span class="title">tty1</span>     00:00:00 <span class="title">gsd</span>-<span class="title">a11y</span>-<span class="title">settin</span></span></span><br><span class="line"><span class="function">    875 <span class="title">tty1</span>     00:00:00 <span class="title">gsd</span>-<span class="title">housekeepin</span></span></span><br><span class="line"><span class="function">    880 <span class="title">tty1</span>     00:00:00 <span class="title">gsd</span>-<span class="title">power</span></span></span><br><span class="line"><span class="function">    905 <span class="title">tty1</span>     00:00:00 <span class="title">gsd</span>-<span class="title">printer</span></span></span><br><span class="line"><span class="function">    945 <span class="title">tty1</span>     00:00:00 <span class="title">ibus</span>-<span class="title">daemon</span></span></span><br><span class="line"><span class="function">    963 <span class="title">tty1</span>     00:00:00 <span class="title">ibus</span>-<span class="title">dconf</span></span></span><br><span class="line"><span class="function">    967 <span class="title">tty1</span>     00:00:00 <span class="title">ibus</span>-<span class="title">extension</span>-</span></span><br><span class="line"><span class="function">    970 <span class="title">tty1</span>     00:00:00 <span class="title">ibus</span>-<span class="title">x11</span></span></span><br><span class="line"><span class="function">    975 <span class="title">tty1</span>     00:00:00 <span class="title">ibus</span>-<span class="title">portal</span></span></span><br><span class="line"><span class="function">   1007 <span class="title">tty1</span>     00:00:00 <span class="title">ibus</span>-<span class="title">engine</span>-<span class="title">sim</span></span></span><br><span class="line"><span class="function">   1055 <span class="title">pts</span>/0    00:00:00 <span class="title">ps</span></span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Cmd"><figure class="iseeu highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="function">root@debian:~# <span class="title">ps</span> -<span class="title">ef</span> | <span class="title">grep</span> <span class="title">php</span></span></span><br><span class="line"><span class="function"><span class="title">root</span>        1142    1042  0 23:01 <span class="title">pts</span>/0    00:00:00 <span class="title">grep</span> <span class="title">php</span></span></span><br><span class="line"><span class="function"><span class="title">root</span>@<span class="title">debian</span>:~# <span class="title">ps</span> -<span class="title">auf</span></span></span><br><span class="line"><span class="function"><span class="title">USER</span>         <span class="title">PID</span> %<span class="title">CPU</span> %<span class="title">MEM</span>    <span class="title">VSZ</span>   <span class="title">RSS</span> <span class="title">TTY</span>      <span class="title">STAT</span> <span class="title">START</span>   <span class="title">TIME</span> <span class="title">COMMAND</span></span></span><br><span class="line"><span class="function"><span class="title">root</span>        1042  0.0  0.2   8280  4808 <span class="title">pts</span>/0    <span class="title">Ss</span>   22:57   0:00 -<span class="title">bash</span></span></span><br><span class="line"><span class="function"><span class="title">root</span>        1208  0.0  0.1  10328  3644 <span class="title">pts</span>/0    <span class="title">R</span>+   23:05   0:00  \<span class="title">_</span> <span class="title">ps</span> -<span class="title">auf</span></span></span><br><span class="line"><span class="function"><span class="title">Debian</span>-+     650  0.0  0.2 159276  5588 <span class="title">tty1</span>     <span class="title">Ssl</span>+ 22:56   0:00 /<span class="title">usr</span>/<span class="title">libexec</span>/<span class="title">gdm</span>-<span class="title">wayland</span>-<span class="title">session</span> <span class="title">dbus</span>-<span class="title">run</span>-<span class="title">session</span> -- <span class="title">gnome</span>-<span class="title">session</span> --</span></span><br><span class="line"><span class="function"><span class="title">Debian</span>-+     661  0.0  0.0   6112  1164 <span class="title">tty1</span>     <span class="title">S</span>+   22:56   0:00  \<span class="title">_</span> <span class="title">dbus</span>-<span class="title">run</span>-<span class="title">session</span> -- <span class="title">gnome</span>-<span class="title">session</span> --<span class="title">autostart</span> /<span class="title">usr</span>/<span class="title">share</span>/<span class="title">gdm</span>/<span class="title">gree</span></span></span><br><span class="line"><span class="function"><span class="title">Debian</span>-+     662  0.0  0.2   8528  4944 <span class="title">tty1</span>     <span class="title">S</span>+   22:56   0:00      \<span class="title">_</span> <span class="title">dbus</span>-<span class="title">daemon</span> --<span class="title">nofork</span> --<span class="title">print</span>-<span class="title">address</span> 4 --<span class="title">session</span></span></span><br><span class="line"><span class="function"><span class="title">Debian</span>-+     665  0.0  0.9 593900 19408 <span class="title">tty1</span>     <span class="title">Sl</span>+  22:56   0:00      \<span class="title">_</span> /<span class="title">usr</span>/<span class="title">libexec</span>/<span class="title">gnome</span>-<span class="title">session</span>-<span class="title">binary</span> --<span class="title">systemd</span> --<span class="title">autostart</span> /<span class="title">usr</span>/</span></span><br><span class="line"><span class="function"><span class="title">Debian</span>-+     709  0.5 10.8 3949816 215504 <span class="title">tty1</span>   <span class="title">Sl</span>+  22:56   0:03          \<span class="title">_</span> /<span class="title">usr</span>/<span class="title">bin</span>/<span class="title">gnome</span>-<span class="title">shell</span></span></span><br><span class="line"><span class="function"><span class="title">Debian</span>-+     795  0.0  2.4 750112 47796 <span class="title">tty1</span>     <span class="title">Sl</span>+  22:56   0:00          |   \<span class="title">_</span> /<span class="title">usr</span>/<span class="title">bin</span>/<span class="title">Xwayland</span> :1024 -<span class="title">rootless</span> -<span class="title">noreset</span> -<span class="title">accessx</span> -</span></span><br><span class="line"><span class="function"><span class="title">Debian</span>-+     945  0.0  0.5 312092 11752 <span class="title">tty1</span>     <span class="title">Sl</span>   22:56   0:00          |   \<span class="title">_</span> <span class="title">ibus</span>-<span class="title">daemon</span> --<span class="title">panel</span> <span class="title">disable</span> -<span class="title">r</span> --<span class="title">xim</span></span></span><br><span class="line"><span class="function"><span class="title">Debian</span>-+     963  0.0  0.3 234256  7104 <span class="title">tty1</span>     <span class="title">Sl</span>   22:56   0:00          |       \<span class="title">_</span> /<span class="title">usr</span>/<span class="title">libexec</span>/<span class="title">ibus</span>-<span class="title">dconf</span></span></span><br><span class="line"><span class="function"><span class="title">Debian</span>-+     967  0.1  1.4 346844 29104 <span class="title">tty1</span>     <span class="title">Sl</span>   22:56   0:00          |       \<span class="title">_</span> /<span class="title">usr</span>/<span class="title">libexec</span>/<span class="title">ibus</span>-<span class="title">extension</span>-<span class="title">gtk3</span></span></span><br><span class="line"><span class="function"><span class="title">Debian</span>-+    1007  0.0  0.3 160428  7104 <span class="title">tty1</span>     <span class="title">Sl</span>   22:56   0:00          |       \<span class="title">_</span> /<span class="title">usr</span>/<span class="title">libexec</span>/<span class="title">ibus</span>-<span class="title">engine</span>-<span class="title">simple</span></span></span><br><span class="line"><span class="function"><span class="title">Debian</span>-+     835  0.0  0.6 462948 12224 <span class="title">tty1</span>     <span class="title">Sl</span>+  22:56   0:00          \<span class="title">_</span> /<span class="title">usr</span>/<span class="title">libexec</span>/<span class="title">gsd</span>-<span class="title">sharing</span></span></span><br><span class="line"><span class="function"><span class="title">Debian</span>-+     841  0.0  1.1 342640 22248 <span class="title">tty1</span>     <span class="title">Sl</span>+  22:56   0:00          \<span class="title">_</span> /<span class="title">usr</span>/<span class="title">libexec</span>/<span class="title">gsd</span>-<span class="title">wacom</span></span></span><br><span class="line"><span class="function"><span class="title">Debian</span>-+     844  0.0  1.3 525316 27316 <span class="title">tty1</span>     <span class="title">Sl</span>+  22:56   0:00          \<span class="title">_</span> /<span class="title">usr</span>/<span class="title">libexec</span>/<span class="title">gsd</span>-<span class="title">color</span></span></span><br><span class="line"><span class="function"><span class="title">Debian</span>-+     846  0.0  1.2 342300 24196 <span class="title">tty1</span>     <span class="title">Sl</span>+  22:56   0:00          \<span class="title">_</span> /<span class="title">usr</span>/<span class="title">libexec</span>/<span class="title">gsd</span>-<span class="title">keyboard</span></span></span><br><span class="line"><span class="function"><span class="title">Debian</span>-+     847  0.0  0.5 247056 11320 <span class="title">tty1</span>     <span class="title">Sl</span>+  22:56   0:00          \<span class="title">_</span> /<span class="title">usr</span>/<span class="title">libexec</span>/<span class="title">gsd</span>-<span class="title">print</span>-<span class="title">notifications</span></span></span><br><span class="line"><span class="function"><span class="title">Debian</span>-+     848  0.0  0.3 454748  6084 <span class="title">tty1</span>     <span class="title">Sl</span>+  22:56   0:00          \<span class="title">_</span> /<span class="title">usr</span>/<span class="title">libexec</span>/<span class="title">gsd</span>-<span class="title">rfkill</span></span></span><br><span class="line"><span class="function"><span class="title">Debian</span>-+     850  0.0  0.5 313144 10092 <span class="title">tty1</span>     <span class="title">Sl</span>+  22:56   0:00          \<span class="title">_</span> /<span class="title">usr</span>/<span class="title">libexec</span>/<span class="title">gsd</span>-<span class="title">smartcard</span></span></span><br><span class="line"><span class="function"><span class="title">Debian</span>-+     856  0.0  0.9 376748 18296 <span class="title">tty1</span>     <span class="title">Sl</span>+  22:56   0:00          \<span class="title">_</span> /<span class="title">usr</span>/<span class="title">libexec</span>/<span class="title">gsd</span>-<span class="title">datetime</span></span></span><br><span class="line"><span class="function"><span class="title">Debian</span>-+     860  0.0  1.5 932140 29928 <span class="title">tty1</span>     <span class="title">Sl</span>+  22:56   0:00          \<span class="title">_</span> /<span class="title">usr</span>/<span class="title">libexec</span>/<span class="title">gsd</span>-<span class="title">media</span>-<span class="title">keys</span></span></span><br><span class="line"><span class="function"><span class="title">Debian</span>-+     863  0.0  0.2 233180  5868 <span class="title">tty1</span>     <span class="title">Sl</span>+  22:56   0:00          \<span class="title">_</span> /<span class="title">usr</span>/<span class="title">libexec</span>/<span class="title">gsd</span>-<span class="title">screensaver</span>-<span class="title">proxy</span></span></span><br><span class="line"><span class="function"><span class="title">Debian</span>-+     865  0.0  0.6 320120 12236 <span class="title">tty1</span>     <span class="title">Sl</span>+  22:56   0:00          \<span class="title">_</span> /<span class="title">usr</span>/<span class="title">libexec</span>/<span class="title">gsd</span>-<span class="title">sound</span></span></span><br><span class="line"><span class="function"><span class="title">Debian</span>-+     872  0.0  0.4 307472  8780 <span class="title">tty1</span>     <span class="title">Sl</span>+  22:56   0:00          \<span class="title">_</span> /<span class="title">usr</span>/<span class="title">libexec</span>/<span class="title">gsd</span>-<span class="title">a11y</span>-<span class="title">settings</span></span></span><br><span class="line"><span class="function"><span class="title">Debian</span>-+     875  0.0  0.3 309484  7492 <span class="title">tty1</span>     <span class="title">Sl</span>+  22:56   0:00          \<span class="title">_</span> /<span class="title">usr</span>/<span class="title">libexec</span>/<span class="title">gsd</span>-<span class="title">housekeeping</span></span></span><br><span class="line"><span class="function"><span class="title">Debian</span>-+     880  0.0  1.3 377352 27376 <span class="title">tty1</span>     <span class="title">Sl</span>+  22:56   0:00          \<span class="title">_</span> /<span class="title">usr</span>/<span class="title">libexec</span>/<span class="title">gsd</span>-<span class="title">power</span></span></span><br><span class="line"><span class="function"><span class="title">Debian</span>-+     975  0.0  0.3 234240  7236 <span class="title">tty1</span>     <span class="title">Sl</span>+  22:56   0:00 /<span class="title">usr</span>/<span class="title">libexec</span>/<span class="title">ibus</span>-<span class="title">portal</span></span></span><br><span class="line"><span class="function"><span class="title">Debian</span>-+     970  0.0  2.6 921360 52300 <span class="title">tty1</span>     <span class="title">Sl</span>   22:56   0:00 /<span class="title">usr</span>/<span class="title">libexec</span>/<span class="title">ibus</span>-<span class="title">x11</span> --<span class="title">kill</span>-<span class="title">daemon</span></span></span><br><span class="line"><span class="function"><span class="title">Debian</span>-+     905  0.0  0.7 345284 15392 <span class="title">tty1</span>     <span class="title">Sl</span>+  22:56   0:00 /<span class="title">usr</span>/<span class="title">libexec</span>/<span class="title">gsd</span>-<span class="title">printer</span></span></span><br><span class="line"><span class="function"><span class="title">Debian</span>-+     833  0.0  0.3 165732  6940 <span class="title">tty1</span>     <span class="title">Sl</span>+  22:56   0:00 /<span class="title">usr</span>/<span class="title">libexec</span>/<span class="title">at</span>-<span class="title">spi2</span>-<span class="title">registryd</span> --<span class="title">use</span>-<span class="title">gnome</span>-<span class="title">session</span></span></span><br><span class="line"><span class="function"><span class="title">Debian</span>-+     832  0.0  1.5 2600904 30356 <span class="title">tty1</span>    <span class="title">Sl</span>+  22:56   0:00 /<span class="title">usr</span>/<span class="title">bin</span>/<span class="title">gjs</span> /<span class="title">usr</span>/<span class="title">share</span>/<span class="title">gnome</span>-<span class="title">shell</span>/<span class="title">org.gnome.Shell.Notifications</span></span></span><br><span class="line"><span class="function"><span class="title">Debian</span>-+     818  0.0  0.2 233344  4616 <span class="title">tty1</span>     <span class="title">Sl</span>+  22:56   0:00 /<span class="title">usr</span>/<span class="title">libexec</span>/<span class="title">xdg</span>-<span class="title">permission</span>-<span class="title">store</span></span></span><br><span class="line"><span class="function"><span class="title">Debian</span>-+     786  0.0  0.3 307364  6352 <span class="title">tty1</span>     <span class="title">Sl</span>+  22:56   0:00 /<span class="title">usr</span>/<span class="title">libexec</span>/<span class="title">at</span>-<span class="title">spi</span>-<span class="title">bus</span>-<span class="title">launcher</span></span></span><br><span class="line"><span class="function"><span class="title">Debian</span>-+     791  0.0  0.2   8096  4288 <span class="title">tty1</span>     <span class="title">S</span>+   22:56   0:00  \<span class="title">_</span> /<span class="title">usr</span>/<span class="title">bin</span>/<span class="title">dbus</span>-<span class="title">daemon</span> --<span class="title">config</span>-<span class="title">file</span>=/<span class="title">usr</span>/<span class="title">share</span>/<span class="title">defaults</span>/<span class="title">at</span>-<span class="title">spi2</span>/<span class="title">ac</span></span></span><br></pre></td></tr></table></figure></div>

<h4 id="date命令例子"><a href="#date命令例子" class="headerlink" title="date命令例子"></a>date命令例子</h4><div class="highlight-container" data-rel="Cmd"><figure class="iseeu highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="function">root@debian:~# <span class="title">date</span> &quot;+现在时间是：%<span class="title">Y</span>-%<span class="title">m</span>-%<span class="title">d</span> %<span class="title">H</span>:%<span class="title">M</span>:%<span class="title">S</span>&quot;			###输出“现在时间是<span class="title">xxxxxx</span>”</span></span><br><span class="line"><span class="function">现在时间是：2024-05-09 23:11:20</span></span><br><span class="line"><span class="function"><span class="title">root</span>@<span class="title">debian</span>:~# <span class="title">date</span> &quot;+%<span class="title">Y</span>-%<span class="title">m</span>-%<span class="title">d</span> %<span class="title">H</span>:%<span class="title">M</span>:%<span class="title">S</span>&quot; -<span class="title">d</span> &quot;-3 <span class="title">year</span>&quot;		###输出现在时间后减3年的年月日、实时时间</span></span><br><span class="line"><span class="function">2021-05-09 23:14:15</span></span><br><span class="line"><span class="function"><span class="title">root</span>@<span class="title">debian</span>:~# <span class="title">time</span>=`<span class="title">date</span> &quot;+%<span class="title">s</span>&quot;`							###输出从1970年1月1日到目前为止的秒数</span></span><br><span class="line"><span class="function"><span class="title">root</span>@<span class="title">debian</span>:~# <span class="title">echo</span> $<span class="title">time</span> </span></span><br><span class="line"><span class="function">1715267700</span></span><br><span class="line"><span class="function"><span class="title">root</span>@<span class="title">debian</span>:~# <span class="title">date</span> +%<span class="title">x</span>										###输出当前的年月日</span></span><br><span class="line"><span class="function">2024年05月09日</span></span><br><span class="line"><span class="function"><span class="title">root</span>@<span class="title">debian</span>:~# <span class="title">date</span> +%<span class="title">c</span>										###输出当前时间的年月日、实时时间</span></span><br><span class="line"><span class="function">2024年05月09日 星期四 23时16分21秒</span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></table></figure></div>

<h4 id="wc命令例子"><a href="#wc命令例子" class="headerlink" title="wc命令例子"></a>wc命令例子</h4><div class="highlight-container" data-rel="Cmd"><figure class="iseeu highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="function">root@debian:/<span class="title">test</span># <span class="title">cat</span> <span class="title">test.txt</span> 					###<span class="title">cat</span>命令抓取<span class="title">test</span>内容</span></span><br><span class="line"><span class="function"><span class="title">View</span> <span class="title">the</span> <span class="title">passwords</span> <span class="title">stored</span> <span class="title">by</span> <span class="title">your</span> <span class="title">Web</span> <span class="title">browser</span> (<span class="title">Supports</span> <span class="title">Internet</span> <span class="title">Explorer</span>, <span class="title">Firefox</span>, <span class="title">Chrome</span>, <span class="title">Safari</span>, <span class="title">and</span> <span class="title">Opera</span>)</span></span><br><span class="line"><span class="function"> <span class="title">Extract</span> <span class="title">passwords</span> <span class="title">and</span> <span class="title">other</span> <span class="title">information</span> <span class="title">from</span> <span class="title">router</span> <span class="title">backup</span> <span class="title">file</span> (<span class="title">For</span> <span class="title">supported</span> <span class="title">routers</span>).</span></span><br><span class="line"><span class="function"><span class="title">Recovers</span> <span class="title">the</span> <span class="title">passwords</span> <span class="title">of</span> <span class="title">dialup</span> <span class="title">entries</span> (<span class="title">VPN</span> <span class="title">and</span> <span class="title">Internet</span> <span class="title">connections</span>). <span class="title">Works</span> <span class="title">also</span> <span class="title">under</span> <span class="title">Windows</span> 2000/<span class="title">XP.i</span></span></span><br><span class="line"><span class="function"><span class="title">Freeware</span> <span class="title">utility</span> <span class="title">that</span> <span class="title">recovers</span> <span class="title">the</span> <span class="title">network</span> <span class="title">passwords</span> <span class="title">stored</span> <span class="title">by</span> <span class="title">Windows</span> <span class="title">XP</span> (<span class="title">Credentials</span> <span class="title">file</span>).</span></span><br><span class="line"><span class="function"><span class="title">displays</span> <span class="title">useful</span> <span class="title">information</span> <span class="title">about</span> <span class="title">your</span> <span class="title">network</span> <span class="title">adapters</span>: <span class="title">IP</span> <span class="title">addresses</span>, <span class="title">Hardware</span> <span class="title">address</span>, <span class="title">WINS</span> <span class="title">servers</span>, <span class="title">DNS</span> <span class="title">servers</span>, <span class="title">MTU</span> <span class="title">value</span>, <span class="title">Number</span> <span class="title">of</span> <span class="title">bytes</span> <span class="title">received</span> <span class="title">or</span> <span class="title">sent</span>, <span class="title">The</span> <span class="title">current</span> <span class="title">transfer</span> <span class="title">speed</span></span></span><br><span class="line"><span class="function"><span class="title">root</span>@<span class="title">debian</span>:/<span class="title">test</span># <span class="title">wc</span> <span class="title">test.txt</span> 						###5为文件行数，83为文件总单词数，591为文件总字节数</span></span><br><span class="line"><span class="function">  5  83 591 <span class="title">test.txt</span></span></span><br><span class="line"><span class="function"><span class="title">root</span>@<span class="title">debian</span>:/<span class="title">test</span># <span class="title">cat</span> <span class="title">test.txt</span> | <span class="title">wc</span> -<span class="title">l</span>				###单独统计文件的行数</span></span><br><span class="line"><span class="function">5</span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></table></figure></div>



<h2 id="cat、rm、echo命令"><a href="#cat、rm、echo命令" class="headerlink" title="cat、rm、echo命令"></a>cat、rm、echo命令</h2><h3 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h3><p>​	在终端设备上<strong>显示文件内容</strong>，cat命令只适合<strong>查看内容较少的文件</strong>。对于内容多的文件可以用more命令查看。</p>
<h3 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h3><p>​	删除文件或目录，<strong>一次可以删除多个文件</strong>，或递归删除目录及其内的所有子文件。</p>
<h3 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h3><p>​	在终端设备上<strong>输出指定字符串或变量提取后的值</strong>，可以将输出的指定字符串内容同管道符一起传递给后续命令作为标准输入信息进行二次处理，还可以和输出重定向符一起操作，将信息直接写入文件。</p>
<p>下面是三个命令对应参数的使用方法：</p>
<div class="tabs" id="tab-first-unique-name"><ul class="nav-tabs"><li class="tab active"><a class="#first-unique-name-1">cat</a></li><li class="tab"><a class="#first-unique-name-2">rm</a></li><li class="tab"><a class="#first-unique-name-3">echo</a></li></ul><div class="tab-content"><div class="tab-pane active" id="first-unique-name-1"><p>cat [参数] [文件名]</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>-A</td>
<td>等价于-vET参数组合</td>
</tr>
<tr>
<td>-b</td>
<td>显示行数（空数不编号）</td>
</tr>
<tr>
<td>-e</td>
<td>等价于-vE组合</td>
</tr>
<tr>
<td>-E</td>
<td>每行结束处显示$符号</td>
</tr>
<tr>
<td>-n</td>
<td>显示行数（空行也编号）</td>
</tr>
<tr>
<td>-s</td>
<td>显示行数（多个空行显示一个编号）</td>
</tr>
<tr>
<td>-t</td>
<td>等价于-vT组合</td>
</tr>
<tr>
<td>-T</td>
<td>将TAB字符显示为^|符号</td>
</tr>
<tr>
<td>-v</td>
<td>使用^和M-引用</td>
</tr>
<tr>
<td>–help</td>
<td>显示帮助信息</td>
</tr>
<tr>
<td>–version</td>
<td>显示版本信息</td>
</tr>
</tbody></table></div><div class="tab-pane" id="first-unique-name-2"><p>rm [参数] [文件名]</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>-d</td>
<td>仅删除无子文件的空目录</td>
</tr>
<tr>
<td>-f</td>
<td>强制删除文件而不询问</td>
</tr>
<tr>
<td>-i</td>
<td>删除文件前询问用户是否确认</td>
</tr>
<tr>
<td>-r</td>
<td>递归删除目录及其内全部子文件</td>
</tr>
<tr>
<td>-v</td>
<td>显示执行过程的详细信息</td>
</tr>
<tr>
<td>–help</td>
<td>显示帮助信息</td>
</tr>
<tr>
<td>–version</td>
<td>显示版本信息</td>
</tr>
</tbody></table></div><div class="tab-pane" id="first-unique-name-3"><p>echo [参数] [字符串或$变量名]</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>-e “\a”</td>
<td>发出警告音</td>
</tr>
<tr>
<td>-e “\b”</td>
<td>删除前面一个字符</td>
</tr>
<tr>
<td>-e “\c”</td>
<td>结尾不加换行符</td>
</tr>
<tr>
<td>-e “\f”</td>
<td>换行后光标仍停留在原来的位置</td>
</tr>
<tr>
<td>-e “\n”</td>
<td>换行后光标移至行首</td>
</tr>
<tr>
<td>-e “\r”</td>
<td>光标移至行首但不换行</td>
</tr>
<tr>
<td>-E</td>
<td>禁止反斜杠转义</td>
</tr>
<tr>
<td>-n</td>
<td>不输出结尾的换行符</td>
</tr>
<tr>
<td>–version</td>
<td>显示版本信息</td>
</tr>
<tr>
<td>–help</td>
<td>显示帮助信息</td>
</tr>
</tbody></table></div></div></div>

<h3 id="终端下使用例子-1"><a href="#终端下使用例子-1" class="headerlink" title="终端下使用例子"></a>终端下使用例子</h3><h4 id="cat命令例子"><a href="#cat命令例子" class="headerlink" title="cat命令例子"></a>cat命令例子</h4><div class="highlight-container" data-rel="Cmd"><figure class="iseeu highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="function">root@debian:/<span class="title">test</span># <span class="title">cat</span> <span class="title">test.txt</span> -<span class="title">A</span></span></span><br><span class="line"><span class="function"><span class="title">View</span> <span class="title">the</span> <span class="title">passwords</span> <span class="title">stored</span> <span class="title">by</span> <span class="title">your</span> <span class="title">Web</span> <span class="title">browser</span> (<span class="title">Supports</span> <span class="title">Internet</span> <span class="title">Explorer</span>, <span class="title">Firefox</span>, <span class="title">Chrome</span>, <span class="title">Safari</span>, <span class="title">and</span> <span class="title">Opera</span>)$</span></span><br><span class="line"><span class="function"> <span class="title">Extract</span> <span class="title">passwords</span> <span class="title">and</span> <span class="title">other</span> <span class="title">information</span> <span class="title">from</span> <span class="title">router</span> <span class="title">backup</span> <span class="title">file</span> (<span class="title">For</span> <span class="title">supported</span> <span class="title">routers</span>).$</span></span><br><span class="line"><span class="function"><span class="title">Recovers</span> <span class="title">the</span> <span class="title">passwords</span> <span class="title">of</span> <span class="title">dialup</span> <span class="title">entries</span> (<span class="title">VPN</span> <span class="title">and</span> <span class="title">Internet</span> <span class="title">connections</span>). <span class="title">Works</span> <span class="title">also</span> <span class="title">under</span> <span class="title">Windows</span> 2000/<span class="title">XP.i</span>$</span></span><br><span class="line"><span class="function"><span class="title">Freeware</span> <span class="title">utility</span> <span class="title">that</span> <span class="title">recovers</span> <span class="title">the</span> <span class="title">network</span> <span class="title">passwords</span> <span class="title">stored</span> <span class="title">by</span> <span class="title">Windows</span> <span class="title">XP</span> (<span class="title">Credentials</span> <span class="title">file</span>).$</span></span><br><span class="line"><span class="function"><span class="title">displays</span> <span class="title">useful</span> <span class="title">information</span> <span class="title">about</span> <span class="title">your</span> <span class="title">network</span> <span class="title">adapters</span>: <span class="title">IP</span> <span class="title">addresses</span>, <span class="title">Hardware</span> <span class="title">address</span>, <span class="title">WINS</span> <span class="title">servers</span>, <span class="title">DNS</span> <span class="title">servers</span>, <span class="title">MTU</span> <span class="title">value</span>, <span class="title">Number</span> <span class="title">of</span> <span class="title">bytes</span> <span class="title">received</span> <span class="title">or</span> <span class="title">sent</span>, <span class="title">The</span> <span class="title">current</span> <span class="title">transfer</span> <span class="title">speed</span>$</span></span><br><span class="line"><span class="function"><span class="title">root</span>@<span class="title">debian</span>:/<span class="title">test</span># <span class="title">cat</span> <span class="title">test.txt</span> -<span class="title">b</span></span></span><br><span class="line"><span class="function">     1	<span class="title">View</span> <span class="title">the</span> <span class="title">passwords</span> <span class="title">stored</span> <span class="title">by</span> <span class="title">your</span> <span class="title">Web</span> <span class="title">browser</span> (<span class="title">Supports</span> <span class="title">Internet</span> <span class="title">Explorer</span>, <span class="title">Firefox</span>, <span class="title">Chrome</span>, <span class="title">Safari</span>, <span class="title">and</span> <span class="title">Opera</span>)</span></span><br><span class="line"><span class="function">     2	 <span class="title">Extract</span> <span class="title">passwords</span> <span class="title">and</span> <span class="title">other</span> <span class="title">information</span> <span class="title">from</span> <span class="title">router</span> <span class="title">backup</span> <span class="title">file</span> (<span class="title">For</span> <span class="title">supported</span> <span class="title">routers</span>).</span></span><br><span class="line"><span class="function">     3	<span class="title">Recovers</span> <span class="title">the</span> <span class="title">passwords</span> <span class="title">of</span> <span class="title">dialup</span> <span class="title">entries</span> (<span class="title">VPN</span> <span class="title">and</span> <span class="title">Internet</span> <span class="title">connections</span>). <span class="title">Works</span> <span class="title">also</span> <span class="title">under</span> <span class="title">Windows</span> 2000/<span class="title">XP.i</span></span></span><br><span class="line"><span class="function">     4	<span class="title">Freeware</span> <span class="title">utility</span> <span class="title">that</span> <span class="title">recovers</span> <span class="title">the</span> <span class="title">network</span> <span class="title">passwords</span> <span class="title">stored</span> <span class="title">by</span> <span class="title">Windows</span> <span class="title">XP</span> (<span class="title">Credentials</span> <span class="title">file</span>).</span></span><br><span class="line"><span class="function">     5	<span class="title">displays</span> <span class="title">useful</span> <span class="title">information</span> <span class="title">about</span> <span class="title">your</span> <span class="title">network</span> <span class="title">adapters</span>: <span class="title">IP</span> <span class="title">addresses</span>, <span class="title">Hardware</span> <span class="title">address</span>, <span class="title">WINS</span> <span class="title">servers</span>, <span class="title">DNS</span> <span class="title">servers</span>, <span class="title">MTU</span> <span class="title">value</span>, <span class="title">Number</span> <span class="title">of</span> <span class="title">bytes</span> <span class="title">received</span> <span class="title">or</span> <span class="title">sent</span>, <span class="title">The</span> <span class="title">current</span> <span class="title">transfer</span> <span class="title">speed</span></span></span><br><span class="line"><span class="function"><span class="title">root</span>@<span class="title">debian</span>:/<span class="title">test</span># <span class="title">cat</span> <span class="title">test.txt</span> -<span class="title">Ab</span></span></span><br><span class="line"><span class="function">     1	<span class="title">View</span> <span class="title">the</span> <span class="title">passwords</span> <span class="title">stored</span> <span class="title">by</span> <span class="title">your</span> <span class="title">Web</span> <span class="title">browser</span> (<span class="title">Supports</span> <span class="title">Internet</span> <span class="title">Explorer</span>, <span class="title">Firefox</span>, <span class="title">Chrome</span>, <span class="title">Safari</span>, <span class="title">and</span> <span class="title">Opera</span>)$</span></span><br><span class="line"><span class="function">     2	 <span class="title">Extract</span> <span class="title">passwords</span> <span class="title">and</span> <span class="title">other</span> <span class="title">information</span> <span class="title">from</span> <span class="title">router</span> <span class="title">backup</span> <span class="title">file</span> (<span class="title">For</span> <span class="title">supported</span> <span class="title">routers</span>).$</span></span><br><span class="line"><span class="function">     3	<span class="title">Recovers</span> <span class="title">the</span> <span class="title">passwords</span> <span class="title">of</span> <span class="title">dialup</span> <span class="title">entries</span> (<span class="title">VPN</span> <span class="title">and</span> <span class="title">Internet</span> <span class="title">connections</span>). <span class="title">Works</span> <span class="title">also</span> <span class="title">under</span> <span class="title">Windows</span> 2000/<span class="title">XP.i</span>$</span></span><br><span class="line"><span class="function">     4	<span class="title">Freeware</span> <span class="title">utility</span> <span class="title">that</span> <span class="title">recovers</span> <span class="title">the</span> <span class="title">network</span> <span class="title">passwords</span> <span class="title">stored</span> <span class="title">by</span> <span class="title">Windows</span> <span class="title">XP</span> (<span class="title">Credentials</span> <span class="title">file</span>).$</span></span><br><span class="line"><span class="function">     5	<span class="title">displays</span> <span class="title">useful</span> <span class="title">information</span> <span class="title">about</span> <span class="title">your</span> <span class="title">network</span> <span class="title">adapters</span>: <span class="title">IP</span> <span class="title">addresses</span>, <span class="title">Hardware</span> <span class="title">address</span>, <span class="title">WINS</span> <span class="title">servers</span>, <span class="title">DNS</span> <span class="title">servers</span>, <span class="title">MTU</span> <span class="title">value</span>, <span class="title">Number</span> <span class="title">of</span> <span class="title">bytes</span> <span class="title">received</span> <span class="title">or</span> <span class="title">sent</span>, <span class="title">The</span> <span class="title">current</span> <span class="title">transfer</span> <span class="title">speed</span>$</span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></table></figure></div>

<h4 id="rm命令例子"><a href="#rm命令例子" class="headerlink" title="rm命令例子"></a>rm命令例子</h4><div class="highlight-container" data-rel="Cmd"><figure class="iseeu highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="function">root@debian:/<span class="title">test</span># <span class="title">rm</span> -<span class="title">rfv</span> <span class="title">test.txt</span> </span></span><br><span class="line"><span class="function">已删除 &#x27;<span class="title">test.txt</span>&#x27;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="ping、netstat、ssh命令"><a href="#ping、netstat、ssh命令" class="headerlink" title="ping、netstat、ssh命令"></a>ping、netstat、ssh命令</h2><h3 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h3><p>​	测试主机间网络的连通性，发送出基于ICMP传输协议的数据包，要求对方主机予以回复。</p>
<h3 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h3><p>​	显示各种网络相关信息，例如网络连接状态、路由表信息、接口状态、NAT、多播成员等。这个命令还可在windows所有系统上运行。</p>
<h3 id="ssh"><a href="#ssh" class="headerlink" title="ssh"></a>ssh</h3><p>​	安全的远程连接服务器主机系统。</p>
<p>下面是三个命令对应参数的使用方法：</p>
<div class="tabs" id="tab-first-unique-name"><ul class="nav-tabs"><li class="tab active"><a class="#first-unique-name-1">ping</a></li><li class="tab"><a class="#first-unique-name-2">netstat</a></li><li class="tab"><a class="#first-unique-name-3">ssh</a></li></ul><div class="tab-content"><div class="tab-pane active" id="first-unique-name-1"><p>ping [参数] [域名或IP地址]</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>-4</td>
<td>基于IPv4协议</td>
</tr>
<tr>
<td>-6</td>
<td>基于IPv6协议</td>
</tr>
<tr>
<td>-a</td>
<td>发送数据包时发出蜂鸣声</td>
</tr>
<tr>
<td>-b</td>
<td>允许ping一个广播地址</td>
</tr>
<tr>
<td>-c</td>
<td>设置发送数据包的次数</td>
</tr>
<tr>
<td>-d</td>
<td>使用接口的SO_DEBUG功能</td>
</tr>
<tr>
<td>-f</td>
<td>使用泛洪模式大量向目标发送数据包</td>
</tr>
<tr>
<td>-h</td>
<td>显示帮助信息</td>
</tr>
<tr>
<td>-i</td>
<td>设置收发信息的间隔时间</td>
</tr>
<tr>
<td>-l</td>
<td>使用指定的网络接口送出数据包</td>
</tr>
<tr>
<td>-m</td>
<td>仅输出数值</td>
</tr>
<tr>
<td>-p</td>
<td>设置填满数据包的范本样式</td>
</tr>
<tr>
<td>-q</td>
<td>静默执行模式</td>
</tr>
<tr>
<td>-R</td>
<td>记录路由过程信息</td>
</tr>
<tr>
<td>-s</td>
<td>设置数据包的大小</td>
</tr>
<tr>
<td>-t</td>
<td>设置存活数值TTL的大小</td>
</tr>
<tr>
<td>-v</td>
<td>显示执行过程详细信息</td>
</tr>
<tr>
<td>-V</td>
<td>显示版本信息</td>
</tr>
</tbody></table></div><div class="tab-pane" id="first-unique-name-2"><p>netstat [参数]</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>-a</td>
<td>显示所有连接中的接口信息</td>
</tr>
<tr>
<td>-A</td>
<td>设置网络连接类型</td>
</tr>
<tr>
<td>-c</td>
<td>持续显示网络状态</td>
</tr>
<tr>
<td>-C</td>
<td>显示路由配置信息</td>
</tr>
<tr>
<td>-F</td>
<td>显示路由缓存信息</td>
</tr>
<tr>
<td>-g</td>
<td>显示多重广播功能群组成员名单</td>
</tr>
<tr>
<td>-h</td>
<td>显示帮助信息</td>
</tr>
<tr>
<td>-i</td>
<td>显示网络界面信息表单</td>
</tr>
<tr>
<td>-l</td>
<td>仅显示正在监听的服务状态</td>
</tr>
<tr>
<td>-n</td>
<td>直接使用IP地址而不是域名</td>
</tr>
<tr>
<td>-N</td>
<td>显示网络硬件外围设备的符号链接名称</td>
</tr>
<tr>
<td>-o</td>
<td>显示计时器数据信息</td>
</tr>
<tr>
<td>-p</td>
<td>显示正在使用接口的程序识别码和名称</td>
</tr>
<tr>
<td>-r</td>
<td>显示路由表信息</td>
</tr>
<tr>
<td>-s</td>
<td>显示网络工作信息统计表信息</td>
</tr>
<tr>
<td>-t</td>
<td>显示TCP传输协议的连线状态</td>
</tr>
<tr>
<td>-u</td>
<td>显示UDP传输协议的连线状态</td>
</tr>
<tr>
<td>-V</td>
<td>显示版本信息</td>
</tr>
</tbody></table></div><div class="tab-pane" id="first-unique-name-3"><p>ssh [参数] [域名或IP地址]</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>-1</td>
<td>使用SSH协议版本1</td>
</tr>
<tr>
<td>-2</td>
<td>使用SSH协议版本2</td>
</tr>
<tr>
<td>-4</td>
<td>基于IPv4协议</td>
</tr>
<tr>
<td>-6</td>
<td>基于IPv6协议</td>
</tr>
<tr>
<td>-a</td>
<td>关闭认证代理连接转发功能</td>
</tr>
<tr>
<td>-A</td>
<td>开启认证代理连接转发功能</td>
</tr>
<tr>
<td>-b</td>
<td>设置本地对外提供服务的IP地址</td>
</tr>
<tr>
<td>-c</td>
<td>设置会话的密码算法</td>
</tr>
<tr>
<td>-C</td>
<td>压缩所有数据</td>
</tr>
<tr>
<td>-f</td>
<td>后台执行ssh命令</td>
</tr>
<tr>
<td>-F</td>
<td>设置配置文件</td>
</tr>
<tr>
<td>-g</td>
<td>允许远程主机连接本机的转发端口</td>
</tr>
<tr>
<td>-i</td>
<td>设置密钥文件</td>
</tr>
<tr>
<td>-l</td>
<td>设置登录名</td>
</tr>
<tr>
<td>-N</td>
<td>不执行远程指令</td>
</tr>
<tr>
<td>-o</td>
<td>设置配置参数选项</td>
</tr>
<tr>
<td>-p</td>
<td>设置远程服务器上的端口号</td>
</tr>
<tr>
<td>-q</td>
<td>静默执行模式</td>
</tr>
<tr>
<td>-s</td>
<td>请求远程主机上的子系统调用</td>
</tr>
<tr>
<td>-v</td>
<td>显示执行过程详细信息</td>
</tr>
<tr>
<td>-V</td>
<td>显示版本信息</td>
</tr>
<tr>
<td>-x</td>
<td>关闭x11转发功能</td>
</tr>
<tr>
<td>-X</td>
<td>开启x11转发功能</td>
</tr>
<tr>
<td>-y</td>
<td>信任x11转发功能</td>
</tr>
</tbody></table></div></div></div>

<h3 id="终端下使用例子-2"><a href="#终端下使用例子-2" class="headerlink" title="终端下使用例子"></a>终端下使用例子</h3><h4 id="ping命令例子"><a href="#ping命令例子" class="headerlink" title="ping命令例子"></a>ping命令例子</h4><div class="highlight-container" data-rel="Cmd"><figure class="iseeu highlight cmd"><table><tr><td class="code"><pre><span class="line">###	<span class="built_in">ping</span> <span class="number">192</span>.<span class="number">168</span>.<span class="number">18</span>.<span class="number">20</span> <span class="number">5</span>次</span><br><span class="line"><span class="function">root@debian:/<span class="title">test</span># <span class="title">ping</span> 192.168.18.20 -<span class="title">c</span> 5</span></span><br><span class="line"><span class="function"><span class="title">PING</span> 192.168.18.20 (192.168.18.20) 56(84) <span class="title">bytes</span> <span class="title">of</span> <span class="title">data</span>.</span></span><br><span class="line"><span class="function">64 <span class="title">bytes</span> <span class="title">from</span> 192.168.18.20: <span class="title">icmp_seq</span>=1 <span class="title">ttl</span>=128 <span class="title">time</span>=0.398 <span class="title">ms</span></span></span><br><span class="line"><span class="function">64 <span class="title">bytes</span> <span class="title">from</span> 192.168.18.20: <span class="title">icmp_seq</span>=2 <span class="title">ttl</span>=128 <span class="title">time</span>=0.439 <span class="title">ms</span></span></span><br><span class="line"><span class="function">64 <span class="title">bytes</span> <span class="title">from</span> 192.168.18.20: <span class="title">icmp_seq</span>=3 <span class="title">ttl</span>=128 <span class="title">time</span>=0.437 <span class="title">ms</span></span></span><br><span class="line"><span class="function">64 <span class="title">bytes</span> <span class="title">from</span> 192.168.18.20: <span class="title">icmp_seq</span>=4 <span class="title">ttl</span>=128 <span class="title">time</span>=0.448 <span class="title">ms</span></span></span><br><span class="line"><span class="function">64 <span class="title">bytes</span> <span class="title">from</span> 192.168.18.20: <span class="title">icmp_seq</span>=5 <span class="title">ttl</span>=128 <span class="title">time</span>=0.484 <span class="title">ms</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">--- 192.168.18.20 <span class="title">ping</span> <span class="title">statistics</span> ---</span></span><br><span class="line"><span class="function">5 <span class="title">packets</span> <span class="title">transmitted</span>, 5 <span class="title">received</span>, 0% <span class="title">packet</span> <span class="title">loss</span>, <span class="title">time</span> 4105<span class="title">ms</span></span></span><br><span class="line"><span class="function"><span class="title">rtt</span> <span class="title">min</span>/<span class="title">avg</span>/<span class="title">max</span>/<span class="title">mdev</span> = 0.398/0.441/0.484/0.027 <span class="title">ms</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">###	<span class="title">ping</span> 192.168.18.20 5次，每次相隔2秒</span></span><br><span class="line"><span class="function"><span class="title">root</span>@<span class="title">debian</span>:/<span class="title">test</span># <span class="title">ping</span> 192.168.18.20 -<span class="title">c</span> 5 -<span class="title">i</span> 2</span></span><br><span class="line"><span class="function"><span class="title">PING</span> 192.168.18.20 (192.168.18.20) 56(84) <span class="title">bytes</span> <span class="title">of</span> <span class="title">data</span>.</span></span><br><span class="line"><span class="function">64 <span class="title">bytes</span> <span class="title">from</span> 192.168.18.20: <span class="title">icmp_seq</span>=1 <span class="title">ttl</span>=128 <span class="title">time</span>=0.475 <span class="title">ms</span></span></span><br><span class="line"><span class="function">64 <span class="title">bytes</span> <span class="title">from</span> 192.168.18.20: <span class="title">icmp_seq</span>=2 <span class="title">ttl</span>=128 <span class="title">time</span>=0.435 <span class="title">ms</span></span></span><br><span class="line"><span class="function">64 <span class="title">bytes</span> <span class="title">from</span> 192.168.18.20: <span class="title">icmp_seq</span>=3 <span class="title">ttl</span>=128 <span class="title">time</span>=0.400 <span class="title">ms</span></span></span><br><span class="line"><span class="function">64 <span class="title">bytes</span> <span class="title">from</span> 192.168.18.20: <span class="title">icmp_seq</span>=4 <span class="title">ttl</span>=128 <span class="title">time</span>=0.413 <span class="title">ms</span></span></span><br><span class="line"><span class="function">64 <span class="title">bytes</span> <span class="title">from</span> 192.168.18.20: <span class="title">icmp_seq</span>=5 <span class="title">ttl</span>=128 <span class="title">time</span>=0.337 <span class="title">ms</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">--- 192.168.18.20 <span class="title">ping</span> <span class="title">statistics</span> ---</span></span><br><span class="line"><span class="function">5 <span class="title">packets</span> <span class="title">transmitted</span>, 5 <span class="title">received</span>, 0% <span class="title">packet</span> <span class="title">loss</span>, <span class="title">time</span> 8063<span class="title">ms</span></span></span><br><span class="line"><span class="function"><span class="title">rtt</span> <span class="title">min</span>/<span class="title">avg</span>/<span class="title">max</span>/<span class="title">mdev</span> = 0.337/0.412/0.475/0.045 <span class="title">ms</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">###	<span class="title">ping</span> <span class="title">bing</span>的官网 5次</span></span><br><span class="line"><span class="function"><span class="title">root</span>@<span class="title">debian</span>:/<span class="title">test</span># <span class="title">ping</span> <span class="title">www.bing.com</span> -<span class="title">c</span> 5</span></span><br><span class="line"><span class="function"><span class="title">PING</span> <span class="title">china.bing123.com</span> (202.89.233.100) 56(84) <span class="title">bytes</span> <span class="title">of</span> <span class="title">data</span>.</span></span><br><span class="line"><span class="function">64 <span class="title">bytes</span> <span class="title">from</span> 202.89.233.100 (202.89.233.100): <span class="title">icmp_seq</span>=1 <span class="title">ttl</span>=128 <span class="title">time</span>=48.2 <span class="title">ms</span></span></span><br><span class="line"><span class="function">64 <span class="title">bytes</span> <span class="title">from</span> 202.89.233.100 (202.89.233.100): <span class="title">icmp_seq</span>=2 <span class="title">ttl</span>=128 <span class="title">time</span>=49.0 <span class="title">ms</span></span></span><br><span class="line"><span class="function">64 <span class="title">bytes</span> <span class="title">from</span> 202.89.233.100 (202.89.233.100): <span class="title">icmp_seq</span>=3 <span class="title">ttl</span>=128 <span class="title">time</span>=50.7 <span class="title">ms</span></span></span><br><span class="line"><span class="function">64 <span class="title">bytes</span> <span class="title">from</span> 202.89.233.100 (202.89.233.100): <span class="title">icmp_seq</span>=4 <span class="title">ttl</span>=128 <span class="title">time</span>=103 <span class="title">ms</span></span></span><br><span class="line"><span class="function">64 <span class="title">bytes</span> <span class="title">from</span> 202.89.233.100 (202.89.233.100): <span class="title">icmp_seq</span>=5 <span class="title">ttl</span>=128 <span class="title">time</span>=76.2 <span class="title">ms</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">--- <span class="title">china.bing123.com</span> <span class="title">ping</span> <span class="title">statistics</span> ---</span></span><br><span class="line"><span class="function">5 <span class="title">packets</span> <span class="title">transmitted</span>, 5 <span class="title">received</span>, 0% <span class="title">packet</span> <span class="title">loss</span>, <span class="title">time</span> 4007<span class="title">ms</span></span></span><br><span class="line"><span class="function"><span class="title">rtt</span> <span class="title">min</span>/<span class="title">avg</span>/<span class="title">max</span>/<span class="title">mdev</span> = 48.234/65.394/102.764/21.410 <span class="title">ms</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">###	<span class="title">ping</span> <span class="title">bing</span>官网 5次，每次相隔3秒，设置发送包的大小为1024，设置<span class="title">ttl</span>值为255</span></span><br><span class="line"><span class="function"><span class="title">root</span>@<span class="title">debian</span>:/<span class="title">test</span># <span class="title">ping</span> <span class="title">www.bing.com</span> -<span class="title">i</span> 3 -<span class="title">s</span> 1024 -<span class="title">t</span> 255 -<span class="title">c</span> 5</span></span><br><span class="line"><span class="function"><span class="title">PING</span> <span class="title">china.bing123.com</span> (202.89.233.100) 1024(1052) <span class="title">bytes</span> <span class="title">of</span> <span class="title">data</span>.</span></span><br><span class="line"><span class="function">1032 <span class="title">bytes</span> <span class="title">from</span> 202.89.233.100 (202.89.233.100): <span class="title">icmp_seq</span>=1 <span class="title">ttl</span>=128 <span class="title">time</span>=46.4 <span class="title">ms</span></span></span><br><span class="line"><span class="function">1032 <span class="title">bytes</span> <span class="title">from</span> 202.89.233.100 (202.89.233.100): <span class="title">icmp_seq</span>=2 <span class="title">ttl</span>=128 <span class="title">time</span>=46.0 <span class="title">ms</span></span></span><br><span class="line"><span class="function">1032 <span class="title">bytes</span> <span class="title">from</span> 202.89.233.100 (202.89.233.100): <span class="title">icmp_seq</span>=3 <span class="title">ttl</span>=128 <span class="title">time</span>=47.1 <span class="title">ms</span></span></span><br><span class="line"><span class="function">1032 <span class="title">bytes</span> <span class="title">from</span> 202.89.233.100 (202.89.233.100): <span class="title">icmp_seq</span>=4 <span class="title">ttl</span>=128 <span class="title">time</span>=46.9 <span class="title">ms</span></span></span><br><span class="line"><span class="function">1032 <span class="title">bytes</span> <span class="title">from</span> 202.89.233.100 (202.89.233.100): <span class="title">icmp_seq</span>=5 <span class="title">ttl</span>=128 <span class="title">time</span>=46.3 <span class="title">ms</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">--- <span class="title">china.bing123.com</span> <span class="title">ping</span> <span class="title">statistics</span> ---</span></span><br><span class="line"><span class="function">5 <span class="title">packets</span> <span class="title">transmitted</span>, 5 <span class="title">received</span>, 0% <span class="title">packet</span> <span class="title">loss</span>, <span class="title">time</span> 12016<span class="title">ms</span></span></span><br><span class="line"><span class="function"><span class="title">rtt</span> <span class="title">min</span>/<span class="title">avg</span>/<span class="title">max</span>/<span class="title">mdev</span> = 46.049/46.550/47.075/0.374 <span class="title">ms</span></span></span><br></pre></td></tr></table></figure></div>



<p>参考文章：</p>
<p><a class="link"   href="https://www.cnblogs.com/baichunyu/p/15346804.html" >https://www.cnblogs.com/baichunyu/p/15346804.html <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://www.cnblogs.com/qmfsun/p/4598650.html" >https://www.cnblogs.com/qmfsun/p/4598650.html <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://www.cnblogs.com/xzpin/p/11074038.html" >https://www.cnblogs.com/xzpin/p/11074038.html <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://www.linuxcool.com/" >https://www.linuxcool.com/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>Linux命令</category>
      </categories>
      <tags>
        <tag>Linux命令</tag>
      </tags>
  </entry>
  <entry>
    <title>Shell脚本学习笔记（一）</title>
    <url>/2024/05/08/Shell%E8%84%9A%E6%9C%AC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h1 id="Shell大纲"><a href="#Shell大纲" class="headerlink" title="Shell大纲"></a>Shell大纲</h1><p>下图是我看网络课程所画出的思维导图：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://streamcons.oss-cn-guangzhou.aliyuncs.com/img/Shell%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE.png"
                     
                ></p>
<h2 id="一、变量替换和测试"><a href="#一、变量替换和测试" class="headerlink" title="一、变量替换和测试"></a>一、变量替换和测试</h2><h3 id="1、-变量-匹配规则"><a href="#1、-变量-匹配规则" class="headerlink" title="1、${变量#匹配规则}"></a>1、${变量#匹配规则}</h3><p>从头开始匹配，最短删除（匹配后相应的规则后只删除第一个匹配到的）</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">root@XQH:/TestShell# variable_2=&quot;I love you,Do you love me?&quot;</span><br><span class="line">root@XQH:/TestShell# echo $variable_2</span><br><span class="line">I love you,Do you love me?</span><br><span class="line">root@XQH:/TestShell# var1=$&#123;variable_2#*ov&#125;</span><br><span class="line">root@XQH:/TestShell# echo $var1</span><br><span class="line">e you,Do you love me?</span><br></pre></td></tr></table></figure></div>

<h3 id="2、-变量-匹配规则"><a href="#2、-变量-匹配规则" class="headerlink" title="2、${变量##匹配规则}"></a>2、${变量##匹配规则}</h3><p>从头开始匹配，最长删除</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">root@XQH:/TestShell# var2=$&#123;variable_2##*ov&#125;</span><br><span class="line">root@XQH:/TestShell# echo $var2</span><br><span class="line">e me?</span><br></pre></td></tr></table></figure></div>

<h3 id="3、-变量-匹配规则"><a href="#3、-变量-匹配规则" class="headerlink" title="3、${变量%匹配规则}"></a>3、${变量%匹配规则}</h3><p>从尾开始匹配，最短删除</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">root@XQH:/TestShell# var3=$&#123;variable_2%ov*&#125;</span><br><span class="line">root@XQH:/TestShell# echo $var3</span><br><span class="line">I love you,Do you l</span><br></pre></td></tr></table></figure></div>

<h3 id="4、-变量-匹配规则"><a href="#4、-变量-匹配规则" class="headerlink" title="4、${变量%%匹配规则}"></a>4、${变量%%匹配规则}</h3><p>从尾开始匹配，最短删除</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">root@XQH:/TestShell# var3=$&#123;variable_2%%ov*&#125;</span><br><span class="line">root@XQH:/TestShell# echo $var3             </span><br><span class="line">I l</span><br></pre></td></tr></table></figure></div>

<h3 id="5、-变量-旧字符串-新字符串"><a href="#5、-变量-旧字符串-新字符串" class="headerlink" title="5、${变量&#x2F;旧字符串&#x2F;新字符串}"></a>5、${变量&#x2F;旧字符串&#x2F;新字符串}</h3><p>替换变量内的旧字符串，只替换第一处</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">root@XQH:/TestShell# echo $PATH</span><br><span class="line">/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin</span><br><span class="line"></span><br><span class="line">root@XQH:/TestShell# var5=$&#123;PATH/bin/BIN&#125;</span><br><span class="line">root@XQH:/TestShell# echo $var5</span><br><span class="line">/usr/local/sBIN:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin</span><br></pre></td></tr></table></figure></div>

<h3 id="6、-变量-旧字符串-新字符串"><a href="#6、-变量-旧字符串-新字符串" class="headerlink" title="6、${变量&#x2F;&#x2F;旧字符串&#x2F;新字符串}"></a>6、${变量&#x2F;&#x2F;旧字符串&#x2F;新字符串}</h3><p>替换变量内的旧字符串，全部替换</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">root@XQH:/TestShell# var6=$&#123;PATH//bin/BIN&#125;</span><br><span class="line">root@XQH:/TestShell# echo $var6</span><br><span class="line">/usr/local/sBIN:/usr/local/BIN:/usr/sBIN:/usr/BIN:/sBIN:/BIN</span><br></pre></td></tr></table></figure></div>

<h2 id="二、字符串处理"><a href="#二、字符串处理" class="headerlink" title="二、字符串处理"></a>二、字符串处理</h2><p><strong>有用到expr这个关键字的话索引下下标从1开始，没有用到expr关键字的话检索时索引下标都是从0开始</strong></p>
<h3 id="1、计算字符串长度"><a href="#1、计算字符串长度" class="headerlink" title="1、计算字符串长度"></a>1、计算字符串长度</h3><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">使用命令$&#123;#string&#125;</span><br><span class="line">root@XQH:/TestShell# varA1=&quot;Hello World&quot;</span><br><span class="line">root@XQH:/TestShell# len=$&#123;#varA1&#125;</span><br><span class="line">root@XQH:/TestShell# echo $len</span><br><span class="line">11</span><br></pre></td></tr></table></figure></div>

<h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">使用命令expr length $string</span><br><span class="line">root@XQH:/TestShell# len=`expr length &quot;$varA1&quot;`</span><br><span class="line">root@XQH:/TestShell# echo $len</span><br><span class="line">11</span><br></pre></td></tr></table></figure></div>

<h3 id="2、获取字符索引位置（这里的索引下标是从1开始的）"><a href="#2、获取字符索引位置（这里的索引下标是从1开始的）" class="headerlink" title="2、获取字符索引位置（这里的索引下标是从1开始的）"></a>2、获取字符索引位置（这里的索引下标是从1开始的）</h3><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><p><strong><code>expr index &quot;$string&quot; substr</code></strong></p>

  <div class="note p-4 mb-4 rounded-small info">
    <p>这里的获取字符索引时它是根据字符串一个个拆分出来，然后直接寻找最先找到的字符，然后显示最先找到的字符的位置</p>

  </div>

<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">root@XQH:/TestShell# varA2=&quot;quaickstart is a app&quot; </span><br><span class="line">root@XQH:/TestShell# ind=`expr index &quot;$varA2&quot; start`</span><br><span class="line">root@XQH:/TestShell# echo $ind</span><br><span class="line">3</span><br></pre></td></tr></table></figure></div>

<h3 id="3、获取子串长度"><a href="#3、获取子串长度" class="headerlink" title="3、获取子串长度"></a>3、获取子串长度</h3><h4 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h4><p><strong><code>expr match &quot;$string&quot; substr</code></strong></p>

  <div class="note p-4 mb-4 rounded-small info">
    <p>实际上这个方法的弊端很多，所以不经常用，会有替代方法</p>

  </div>

<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">root@XQH:/TestShell# echo $varA2</span><br><span class="line">quaickstart is a app</span><br><span class="line">root@XQH:/TestShell# sub_len=`expr match &quot;$varA2&quot; app`</span><br><span class="line">root@XQH:/TestShell# echo $sub_len</span><br><span class="line">0</span><br><span class="line">(从这里可以看出如果从后面的字符开始索引，无法获取出字串长度)</span><br><span class="line">root@XQH:/TestShell# sub_len=`expr match &quot;$varA2&quot; quick` </span><br><span class="line">root@XQH:/TestShell# echo $sub_len                      </span><br><span class="line">0</span><br><span class="line">(从这里可以看出我并没有正确打出需要索引的第一个字符，所以也无法获取出字串长度)</span><br><span class="line">root@XQH:/TestShell# sub_len=`expr match &quot;$varA2&quot; quaick`</span><br><span class="line">root@XQH:/TestShell# echo $sub_len                       </span><br><span class="line">6</span><br><span class="line">(从这里可以看出我正确打出了第一个字符，所以成功获取到了字串长度)</span><br><span class="line">root@XQH:/TestShell# sub_len=`expr match &quot;$varA2&quot; qu.*`  </span><br><span class="line">root@XQH:/TestShell# </span><br><span class="line">root@XQH:/TestShell# echo $sub_len                     </span><br><span class="line">20</span><br><span class="line">(从这里可以看出我使用了通配符，所以成功获取了整个字符串的长度)</span><br></pre></td></tr></table></figure></div>

<h3 id="4、抽取字符串中的子串"><a href="#4、抽取字符串中的子串" class="headerlink" title="4、抽取字符串中的子串"></a>4、抽取字符串中的子串</h3><h4 id="方法一-1"><a href="#方法一-1" class="headerlink" title="方法一"></a><strong>方法一</strong></h4><p><strong>（1）<code>$&#123;string:position&#125;</code>（2）<code>$&#123;string:position:length&#125;</code>（3）<code>$&#123;stirng: -position&#125;</code> 或者 <code>$&#123;string:（position）&#125;</code></strong></p>
<h4 id="方法二-1"><a href="#方法二-1" class="headerlink" title="方法二"></a><strong>方法二</strong></h4><p><strong><code>expr substr $string $position $length</code></strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@debian:/# var1=&quot;This is a Test file.&quot;</span><br><span class="line">root@debian:/# echo $var1 </span><br><span class="line">root@debian:/# substr_1=$&#123;var1:10&#125;</span><br><span class="line">root@debian:/# echo $substr_1 </span><br><span class="line">Test file.</span><br><span class="line">root@debian:/# substr_2=$&#123;var1:10:6&#125;</span><br><span class="line">root@debian:/# echo $substr_2</span><br><span class="line">Test f</span><br><span class="line">root@debian:/# substr_3=$&#123;var1: -5&#125;</span><br><span class="line">root@debian:/# echo $substr_3</span><br><span class="line">file.</span><br><span class="line">root@debian:/# substr_4=$&#123;var1:(-5)&#125;</span><br><span class="line">root@debian:/# echo $substr_4</span><br><span class="line">file.</span><br><span class="line">（这里的（-5）和空格后-5的效果一致）</span><br><span class="line">root@debian:/# substr_5=$&#123;var1:(-5):2&#125;</span><br><span class="line">root@debian:/# echo $substr_5</span><br><span class="line">fi</span><br><span class="line">root@debian:/# substr_6=`expr substr &quot;$var1&quot; 5 6`</span><br><span class="line">root@debian:/# echo $substr_6</span><br><span class="line">is a</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h2 id="三、字符串处理完整脚本"><a href="#三、字符串处理完整脚本" class="headerlink" title="三、字符串处理完整脚本"></a>三、字符串处理完整脚本</h2><h3 id="1、需求描述"><a href="#1、需求描述" class="headerlink" title="1、需求描述"></a><strong>1、需求描述</strong></h3><p>​	变量string&#x3D;”This is a Test file,The Test file will press the Enter.”</p>
<p>​	执行脚本后，打印输出string字符串变量，并给出用户以下选项：</p>
<p>（1）打印string长度</p>
<p>（2）删除字符串中所有的Test</p>
<p>（3）替换第一个Test为Nothing</p>
<p>（4）替换全部的Test为Nothing</p>
<p>用户输入1|2|3|4，可以执行对应项的功能；输入q|Q则退出交互模式。</p>
<h3 id="2、思路分析"><a href="#2、思路分析" class="headerlink" title="2、思路分析"></a><strong>2、思路分析</strong></h3><p>​	1、划分不同的功能模块，并编写函数</p>
<p>​	（1）function print_tips					（打印字符串）</p>
<p>​	（2）function len_of_string				（打印字符串长度）</p>
<p>​	（3）function del_Test					（删除字符串中所有的Test）</p>
<p>​	（4）function rep_Test_Nothing_first		（替换第一个Test为Nothing）</p>
<p>​	（5）function rep_Test_Nothing_all			（替换所有的Test为Nothing）</p>
<p>接下来就是写好代码：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash                                           <span class="comment">###（固定格式）</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"></span></span><br><span class="line">string=&quot;This is a Test file,The Test file will press the Enter.&quot;</span><br><span class="line"></span><br><span class="line">function print_tips</span><br><span class="line">&#123;</span><br><span class="line">	echo &quot;**********************************&quot;</span><br><span class="line">	echo &quot;（1）打印string长度&quot;</span><br><span class="line">	echo &quot;（2）删除字符串中所有的Test&quot;</span><br><span class="line">	echo &quot;（3）替换第一个Test为nothing&quot;</span><br><span class="line">	echo &quot;（4）替换全部Test为Nothing&quot;</span><br><span class="line">	echo &quot;**********************************&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">print_tips											###（直接输入函数名即可输出相应结果）</span><br><span class="line"></span><br><span class="line">function len_of_string</span><br><span class="line">&#123;</span><br><span class="line">	echo &quot;$&#123;#string&#125;&quot;								###像这样的写法其实并没有任何实际意义，这里是为了学习使用。</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function del_Test</span><br><span class="line">&#123;</span><br><span class="line">	echo &quot;$&#123;string//Test/&#125;&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function rep_Test_Nothing_first</span><br><span class="line">&#123;</span><br><span class="line">	echo &quot;$&#123;string/Test/Nothing&#125;&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function rep_Test_Nothing_all</span><br><span class="line">&#123;</span><br><span class="line">	echo &quot;$&#123;string//Test/Nothing&#125;&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">len_of_string</span><br><span class="line">del_Test</span><br><span class="line">rep_Test_Nothing_first</span><br><span class="line">rep_Test_Nothing_all</span><br></pre></td></tr></table></figure></div>

<p>这是输出结果：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@debian:/Shell# ./StringTest1.sh </span><br><span class="line">**********************************</span><br><span class="line">（1）打印string长度</span><br><span class="line">（2）删除字符串中所有的Test</span><br><span class="line">（3）替换第一个Test为nothing</span><br><span class="line">（4）替换全部Test为Nothing</span><br><span class="line">**********************************</span><br><span class="line">55</span><br><span class="line">This is a  file,The  file will press the Enter.</span><br><span class="line">This is a Nothing file,The Test file will press the Enter.</span><br><span class="line">This is a Nothing file,The Nothing file will press the Enter.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>这中间有一个小插曲，一般Linux有两个shell环境，<code>sh</code>和<code>bash</code>；他们都是Unix和Linux系统中常见的shell环境。他们之间存在一些重要的区别：</p>
<p>sh提供了基本的shell功能，如命令行解释、变量替换、流程控制等，bash包含了许多额外的特性，如命令行编辑、命令历史记录、命令别名等。此外，<code>bash</code>还</p>
<p>增加了一些编程功能，如函数、数组等。</p>
<p>我按照教学视频里进行”<code>sh StringTest1.sh</code> “操作后出现了报错function not found，因此我们可以看出在sh环境下类似于<code>function</code>、</p>
<p><code>$&#123;string//Test/Nothing&#125;</code>这样的语法并不被<code>sh</code>环境支持，所以这里有两种解决方法：</p>
<p>（1）输入命令使用bash环境运行（推荐使用）：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">chmod +x your_script.sh</span><br><span class="line">./your_script.sh</span><br></pre></td></tr></table></figure></div>

<p>（2）强制修改.sh文件执行bash环境：</p>
<p>可以在你的脚本的第一行明确指定使用bash，而不是sh。你可以将你的脚本的第一行改为<code>#!/usr/bin/env bash</code>，这样无论你如何运行你的脚本，它都会在</p>
<p>bash环境中运行。</p>
<h3 id="3、实现全部需求"><a href="#3、实现全部需求" class="headerlink" title="3、实现全部需求"></a><strong>3、实现全部需求</strong></h3><p><strong>接下来我们来实现”用户输入1|2|3|4，可以执行对应项的功能；输入q|Q则退出交互模式。“这个需求：</strong></p>
<p>首先我们需要进行模块分析：</p>
<p>需要一个while true的判定，然后首先我们打印出四个选项的内容，使用<code>read -p &quot;请选择你的数字：&quot;  choice</code>这样的形式来输出选择的选项，再然后使用<code>case $XXX in</code>来判定用户输入相应数字的情况，所以整合后的代码为：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"></span></span><br><span class="line">string=&quot;This is a Test file,The Test file will press the Enter.&quot;</span><br><span class="line"></span><br><span class="line">function print_tips</span><br><span class="line">&#123;</span><br><span class="line">	echo &quot;**********************************&quot;</span><br><span class="line">	echo &quot;（1）打印string长度&quot;</span><br><span class="line">	echo &quot;（2）删除字符串中所有的Test&quot;</span><br><span class="line">	echo &quot;（3）替换第一个Test为nothing&quot;</span><br><span class="line">	echo &quot;（4）替换全部Test为Nothing&quot;</span><br><span class="line">	echo &quot;**********************************&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function len_of_string</span><br><span class="line">&#123;</span><br><span class="line">	echo &quot;$&#123;#string&#125;&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function del_Test</span><br><span class="line">&#123;</span><br><span class="line">	echo &quot;$&#123;string//Test/&#125;&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function rep_Test_Nothing_first</span><br><span class="line">&#123;</span><br><span class="line">	echo &quot;$&#123;string/Test/Nothing&#125;&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function rep_Test_Nothing_all</span><br><span class="line">&#123;</span><br><span class="line">	echo &quot;$&#123;string//Test/Nothing&#125;&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">while true</span><br><span class="line">do</span><br><span class="line">	echo &quot;【string=$string】&quot;</span><br><span class="line">	echo </span><br><span class="line">	print_tips</span><br><span class="line">	read -p &quot;Please input your choice（1|2|3|4|q|Q）：&quot; choice				##choice关键字</span><br><span class="line"></span><br><span class="line">	case $choice in													###声明choice变量</span><br><span class="line">		1)</span><br><span class="line">			len_of_string</span><br><span class="line">			;;</span><br><span class="line">		2)</span><br><span class="line">			del_Test</span><br><span class="line">			;;</span><br><span class="line">		3)</span><br><span class="line">			rep_Test_Nothing_first</span><br><span class="line">			;;</span><br><span class="line">		4)</span><br><span class="line">			rep_Test_Nothing_all</span><br><span class="line">			;;</span><br><span class="line">		q|Q)</span><br><span class="line">			exit</span><br><span class="line">			;;</span><br><span class="line">		*)</span><br><span class="line">			echo &quot;Error Number,input only in &#123;1|2|3|4|q|Q&#125;&quot;			###*号代表输入除上述的数字以外的所有数字</span><br><span class="line">	esac</span><br><span class="line">done</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>



<p>执行脚本后我们可以看到，需求已经达成：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">root@debian:/Shell# ./StringTest1.sh </span><br><span class="line">【string=This is a Test file,The Test file will press the Enter.】</span><br><span class="line"></span><br><span class="line">**********************************</span><br><span class="line">（1）打印string长度</span><br><span class="line">（2）删除字符串中所有的Test</span><br><span class="line">（3）替换第一个Test为nothing</span><br><span class="line">（4）替换全部Test为Nothing</span><br><span class="line">**********************************</span><br><span class="line">Please input your choice（1|2|3|4|q|Q）：1</span><br><span class="line">55</span><br><span class="line">【string=This is a Test file,The Test file will press the Enter.】</span><br><span class="line"></span><br><span class="line">**********************************</span><br><span class="line">（1）打印string长度</span><br><span class="line">（2）删除字符串中所有的Test</span><br><span class="line">（3）替换第一个Test为nothing</span><br><span class="line">（4）替换全部Test为Nothing</span><br><span class="line">**********************************</span><br><span class="line">Please input your choice（1|2|3|4|q|Q）：2</span><br><span class="line">This is a  file,The  file will press the Enter.</span><br><span class="line">【string=This is a Test file,The Test file will press the Enter.】</span><br><span class="line"></span><br><span class="line">**********************************</span><br><span class="line">（1）打印string长度</span><br><span class="line">（2）删除字符串中所有的Test</span><br><span class="line">（3）替换第一个Test为nothing</span><br><span class="line">（4）替换全部Test为Nothing</span><br><span class="line">**********************************</span><br><span class="line">Please input your choice（1|2|3|4|q|Q）：3</span><br><span class="line">This is a Nothing file,The Test file will press the Enter.</span><br><span class="line">【string=This is a Test file,The Test file will press the Enter.】</span><br><span class="line"></span><br><span class="line">**********************************</span><br><span class="line">（1）打印string长度</span><br><span class="line">（2）删除字符串中所有的Test</span><br><span class="line">（3）替换第一个Test为nothing</span><br><span class="line">（4）替换全部Test为Nothing</span><br><span class="line">**********************************</span><br><span class="line">Please input your choice（1|2|3|4|q|Q）：Q</span><br><span class="line">root@debian:/Shell# </span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h2 id="四、命令替换"><a href="#四、命令替换" class="headerlink" title="四、命令替换"></a>四、命令替换</h2><p><strong>语法格式：</strong></p>
<table>
<thead>
<tr>
<th></th>
<th>语法格式</th>
</tr>
</thead>
<tbody><tr>
<td>方法一</td>
<td><code>command</code></td>
</tr>
<tr>
<td>方法二</td>
<td>$(command)</td>
</tr>
</tbody></table>
<h3 id="例子1"><a href="#例子1" class="headerlink" title="例子1"></a>例子1</h3><p><strong>获取系统的所有用户并输出。</strong></p>
<p>首先我们使用cat etc&#x2F;passwd命令进行查看所有用户：</p>
<div class="highlight-container" data-rel="Cmd"><figure class="iseeu highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="function">root@debian:/<span class="title">Shell</span># <span class="title">cat</span> /<span class="title">etc</span>/<span class="title">passwd</span></span></span><br><span class="line"><span class="function"><span class="title">root:x</span>:0:0:<span class="title">root</span>:/<span class="title">root</span>:/<span class="title">bin</span>/<span class="title">bash</span></span></span><br><span class="line"><span class="function"><span class="title">daemon:x</span>:1:1:<span class="title">daemon</span>:/<span class="title">usr</span>/<span class="title">sbin</span>:/<span class="title">usr</span>/<span class="title">sbin</span>/<span class="title">nologin</span></span></span><br><span class="line"><span class="function"><span class="title">bin:x</span>:2:2:<span class="title">bin</span>:/<span class="title">bin</span>:/<span class="title">usr</span>/<span class="title">sbin</span>/<span class="title">nologin</span></span></span><br><span class="line"><span class="function"><span class="title">sys:x</span>:3:3:<span class="title">sys</span>:/<span class="title">dev</span>:/<span class="title">usr</span>/<span class="title">sbin</span>/<span class="title">nologin</span></span></span><br><span class="line"><span class="function"><span class="title">sync:x</span>:4:65534:<span class="title">sync</span>:/<span class="title">bin</span>:/<span class="title">bin</span>/<span class="title">sync</span></span></span><br><span class="line"><span class="function"><span class="title">games:x</span>:5:60:<span class="title">games</span>:/<span class="title">usr</span>/<span class="title">games</span>:/<span class="title">usr</span>/<span class="title">sbin</span>/<span class="title">nologin</span></span></span><br><span class="line"><span class="function"><span class="title">man:x</span>:6:12:<span class="title">man</span>:/<span class="title">var</span>/<span class="title">cache</span>/<span class="title">man</span>:/<span class="title">usr</span>/<span class="title">sbin</span>/<span class="title">nologin</span></span></span><br><span class="line"><span class="function"><span class="title">lp:x</span>:7:7:<span class="title">lp</span>:/<span class="title">var</span>/<span class="title">spool</span>/<span class="title">lpd</span>:/<span class="title">usr</span>/<span class="title">sbin</span>/<span class="title">nologin</span></span></span><br><span class="line"><span class="function"><span class="title">mail:x</span>:8:8:<span class="title">mail</span>:/<span class="title">var</span>/<span class="title">mail</span>:/<span class="title">usr</span>/<span class="title">sbin</span>/<span class="title">nologin</span></span></span><br><span class="line"><span class="function"><span class="title">news:x</span>:9:9:<span class="title">news</span>:/<span class="title">var</span>/<span class="title">spool</span>/<span class="title">news</span>:/<span class="title">usr</span>/<span class="title">sbin</span>/<span class="title">nologin</span></span></span><br><span class="line"><span class="function"><span class="title">uucp:x</span>:10:10:<span class="title">uucp</span>:/<span class="title">var</span>/<span class="title">spool</span>/<span class="title">uucp</span>:/<span class="title">usr</span>/<span class="title">sbin</span>/<span class="title">nologin</span></span></span><br><span class="line"><span class="function"><span class="title">proxy:x</span>:13:13:<span class="title">proxy</span>:/<span class="title">bin</span>:/<span class="title">usr</span>/<span class="title">sbin</span>/<span class="title">nologin</span></span></span><br><span class="line"><span class="function"><span class="title">www</span>-<span class="title">data:x</span>:33:33:<span class="title">www</span>-<span class="title">data</span>:/<span class="title">var</span>/<span class="title">www</span>:/<span class="title">usr</span>/<span class="title">sbin</span>/<span class="title">nologin</span></span></span><br><span class="line"><span class="function"><span class="title">backup:x</span>:34:34:<span class="title">backup</span>:/<span class="title">var</span>/<span class="title">backups</span>:/<span class="title">usr</span>/<span class="title">sbin</span>/<span class="title">nologin</span></span></span><br><span class="line"><span class="function"><span class="title">list:x</span>:38:38:<span class="title">Mailing</span> <span class="title">List</span> <span class="title">Manager</span>:/<span class="title">var</span>/<span class="title">list</span>:/<span class="title">usr</span>/<span class="title">sbin</span>/<span class="title">nologin</span></span></span><br><span class="line"><span class="function"><span class="title">irc:x</span>:39:39:<span class="title">ircd</span>:/<span class="title">run</span>/<span class="title">ircd</span>:/<span class="title">usr</span>/<span class="title">sbin</span>/<span class="title">nologin</span></span></span><br><span class="line"><span class="function"><span class="title">gnats:x</span>:41:41:<span class="title">Gnats</span> <span class="title">Bug</span>-<span class="title">Reporting</span> <span class="title">System</span> (<span class="title">admin</span>):/<span class="title">var</span>/<span class="title">lib</span>/<span class="title">gnats</span>:/<span class="title">usr</span>/<span class="title">sbin</span>/<span class="title">nologin</span></span></span><br><span class="line"><span class="function"><span class="title">nobody:x</span>:65534:65534:<span class="title">nobody</span>:/<span class="title">nonexistent</span>:/<span class="title">usr</span>/<span class="title">sbin</span>/<span class="title">nologin</span></span></span><br><span class="line"><span class="function"><span class="title">_apt:x</span>:100:65534::/<span class="title">nonexistent</span>:/<span class="title">usr</span>/<span class="title">sbin</span>/<span class="title">nologin</span></span></span><br><span class="line"><span class="function"><span class="title">systemd</span>-<span class="title">timesync:x</span>:101:101:<span class="title">systemd</span> <span class="title">Time</span> <span class="title">Synchronization</span>,,,:/<span class="title">run</span>/<span class="title">systemd</span>:/<span class="title">usr</span>/<span class="title">sbin</span>/<span class="title">nologin</span></span></span><br><span class="line"><span class="function"><span class="title">systemd</span>-<span class="title">network:x</span>:102:103:<span class="title">systemd</span> <span class="title">Network</span> <span class="title">Management</span>,,,:/<span class="title">run</span>/<span class="title">systemd</span>:/<span class="title">usr</span>/<span class="title">sbin</span>/<span class="title">nologin</span></span></span><br><span class="line"><span class="function"><span class="title">systemd</span>-<span class="title">resolve:x</span>:103:104:<span class="title">systemd</span> <span class="title">Resolver</span>,,,:/<span class="title">run</span>/<span class="title">systemd</span>:/<span class="title">usr</span>/<span class="title">sbin</span>/<span class="title">nologin</span></span></span><br><span class="line"><span class="function"><span class="title">tss:x</span>:104:110:<span class="title">TPM</span> <span class="title">software</span> <span class="title">stack</span>,,,:/<span class="title">var</span>/<span class="title">lib</span>/<span class="title">tpm</span>:/<span class="title">bin</span>/<span class="title">false</span></span></span><br><span class="line"><span class="function"><span class="title">messagebus:x</span>:105:111::/<span class="title">nonexistent</span>:/<span class="title">usr</span>/<span class="title">sbin</span>/<span class="title">nologin</span></span></span><br><span class="line"><span class="function"><span class="title">usbmux:x</span>:106:46:<span class="title">usbmux</span> <span class="title">daemon</span>,,,:/<span class="title">var</span>/<span class="title">lib</span>/<span class="title">usbmux</span>:/<span class="title">usr</span>/<span class="title">sbin</span>/<span class="title">nologin</span></span></span><br><span class="line"><span class="function"><span class="title">rtkit:x</span>:107:114:<span class="title">RealtimeKit</span>,,,:/<span class="title">proc</span>:/<span class="title">usr</span>/<span class="title">sbin</span>/<span class="title">nologin</span></span></span><br><span class="line"><span class="function"><span class="title">sshd:x</span>:108:65534::/<span class="title">run</span>/<span class="title">sshd</span>:/<span class="title">usr</span>/<span class="title">sbin</span>/<span class="title">nologin</span></span></span><br><span class="line"><span class="function"><span class="title">dnsmasq:x</span>:109:65534:<span class="title">dnsmasq</span>,,,:/<span class="title">var</span>/<span class="title">lib</span>/<span class="title">misc</span>:/<span class="title">usr</span>/<span class="title">sbin</span>/<span class="title">nologin</span></span></span><br><span class="line"><span class="function"><span class="title">avahi:x</span>:110:115:<span class="title">Avahi</span> <span class="title">mDNS</span> <span class="title">daemon</span>,,,:/<span class="title">run</span>/<span class="title">avahi</span>-<span class="title">daemon</span>:/<span class="title">usr</span>/<span class="title">sbin</span>/<span class="title">nologin</span></span></span><br><span class="line"><span class="function"><span class="title">speech</span>-<span class="title">dispatcher:x</span>:111:29:<span class="title">Speech</span> <span class="title">Dispatcher</span>,,,:/<span class="title">run</span>/<span class="title">speech</span>-<span class="title">dispatcher</span>:/<span class="title">bin</span>/<span class="title">false</span></span></span><br><span class="line"><span class="function"><span class="title">pulse:x</span>:112:116:<span class="title">PulseAudio</span> <span class="title">daemon</span>,,,:/<span class="title">run</span>/<span class="title">pulse</span>:/<span class="title">usr</span>/<span class="title">sbin</span>/<span class="title">nologin</span></span></span><br><span class="line"><span class="function"><span class="title">saned:x</span>:113:119::/<span class="title">var</span>/<span class="title">lib</span>/<span class="title">saned</span>:/<span class="title">usr</span>/<span class="title">sbin</span>/<span class="title">nologin</span></span></span><br><span class="line"><span class="function"><span class="title">colord:x</span>:114:120:<span class="title">colord</span> <span class="title">colour</span> <span class="title">management</span> <span class="title">daemon</span>,,,:/<span class="title">var</span>/<span class="title">lib</span>/<span class="title">colord</span>:/<span class="title">usr</span>/<span class="title">sbin</span>/<span class="title">nologin</span></span></span><br><span class="line"><span class="function"><span class="title">geoclue:x</span>:115:121::/<span class="title">var</span>/<span class="title">lib</span>/<span class="title">geoclue</span>:/<span class="title">usr</span>/<span class="title">sbin</span>/<span class="title">nologin</span></span></span><br><span class="line"><span class="function"><span class="title">gnome</span>-<span class="title">initial</span>-<span class="title">setup:x</span>:116:65534::/<span class="title">run</span>/<span class="title">gnome</span>-<span class="title">initial</span>-<span class="title">setup</span>/:/<span class="title">bin</span>/<span class="title">false</span></span></span><br><span class="line"><span class="function"><span class="title">Debian</span>-<span class="title">gdm:x</span>:117:122:<span class="title">Gnome</span> <span class="title">Display</span> <span class="title">Manager</span>:/<span class="title">var</span>/<span class="title">lib</span>/<span class="title">gdm3</span>:/<span class="title">bin</span>/<span class="title">false</span></span></span><br><span class="line"><span class="function"><span class="title">x:x</span>:1000:1000:<span class="title">x</span>,,,:/<span class="title">home</span>/<span class="title">x</span>:/<span class="title">bin</span>/<span class="title">bash</span></span></span><br><span class="line"><span class="function"><span class="title">systemd</span>-<span class="title">coredump:x</span>:999:999:<span class="title">systemd</span> <span class="title">Core</span> <span class="title">Dumper</span>:/:/<span class="title">usr</span>/<span class="title">sbin</span>/<span class="title">nologin</span></span></span><br></pre></td></tr></table></figure></div>

<p>接着我们可以使用cut -d ”:“ 来指定用”：“来做分隔符，同时使用-f 1来指定只取第1个：</p>
<p>整合起来后：<code>cut -d &quot;:&quot; -f 1</code></p>
<div class="highlight-container" data-rel="Cmd"><figure class="iseeu highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="function">root@debian:/<span class="title">Shell</span># <span class="title">cat</span> /<span class="title">etc</span>/<span class="title">passwd</span> | <span class="title">cut</span> -<span class="title">d</span> &quot;:&quot; -<span class="title">f</span> 1</span></span><br><span class="line"><span class="function"><span class="title">root</span></span></span><br><span class="line"><span class="function"><span class="title">daemon</span></span></span><br><span class="line"><span class="function"><span class="title">bin</span></span></span><br><span class="line"><span class="function"><span class="title">sys</span></span></span><br><span class="line"><span class="function"><span class="title">sync</span></span></span><br><span class="line"><span class="function"><span class="title">games</span></span></span><br><span class="line"><span class="function"><span class="title">man</span></span></span><br><span class="line"><span class="function"><span class="title">lp</span></span></span><br><span class="line"><span class="function"><span class="title">mail</span></span></span><br><span class="line"><span class="function"><span class="title">news</span></span></span><br><span class="line"><span class="function"><span class="title">uucp</span></span></span><br><span class="line"><span class="function"><span class="title">proxy</span></span></span><br><span class="line"><span class="function"><span class="title">www</span>-<span class="title">data</span></span></span><br><span class="line"><span class="function"><span class="title">backup</span></span></span><br><span class="line"><span class="function"><span class="title">list</span></span></span><br><span class="line"><span class="function"><span class="title">irc</span></span></span><br><span class="line"><span class="function"><span class="title">gnats</span></span></span><br><span class="line"><span class="function"><span class="title">nobody</span></span></span><br><span class="line"><span class="function"><span class="title">_apt</span></span></span><br><span class="line"><span class="function"><span class="title">systemd</span>-<span class="title">timesync</span></span></span><br><span class="line"><span class="function"><span class="title">systemd</span>-<span class="title">network</span></span></span><br><span class="line"><span class="function"><span class="title">systemd</span>-<span class="title">resolve</span></span></span><br><span class="line"><span class="function"><span class="title">tss</span></span></span><br><span class="line"><span class="function"><span class="title">messagebus</span></span></span><br><span class="line"><span class="function"><span class="title">usbmux</span></span></span><br><span class="line"><span class="function"><span class="title">rtkit</span></span></span><br><span class="line"><span class="function"><span class="title">sshd</span></span></span><br><span class="line"><span class="function"><span class="title">dnsmasq</span></span></span><br><span class="line"><span class="function"><span class="title">avahi</span></span></span><br><span class="line"><span class="function"><span class="title">speech</span>-<span class="title">dispatcher</span></span></span><br><span class="line"><span class="function"><span class="title">pulse</span></span></span><br><span class="line"><span class="function"><span class="title">saned</span></span></span><br><span class="line"><span class="function"><span class="title">colord</span></span></span><br><span class="line"><span class="function"><span class="title">geoclue</span></span></span><br><span class="line"><span class="function"><span class="title">gnome</span>-<span class="title">initial</span>-<span class="title">setup</span></span></span><br><span class="line"><span class="function"><span class="title">Debian</span>-<span class="title">gdm</span></span></span><br><span class="line"><span class="function"><span class="title">x</span></span></span><br><span class="line"><span class="function"><span class="title">systemd</span>-<span class="title">coredump</span></span></span><br></pre></td></tr></table></figure></div>

<p>接下来，我们可以使用for …..  in  来循环所有抓取的用户：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">root@debian:/Shell# vim Test.sh</span><br><span class="line">root@debian:/Shell# cat Test.sh </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"></span></span><br><span class="line">index=1</span><br><span class="line"></span><br><span class="line">for user in `cat /etc/passwd | cut -d &quot;:&quot; -f 1`			##for....in循环</span><br><span class="line">do</span><br><span class="line">	echo &quot;This is $index user：$user&quot;		##输出“This is（循环）user：（得到的用户名）”</span><br><span class="line">	index=$(($index + 1))					##index自增</span><br><span class="line">done</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>得到的结果就实现了我们的需求：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">root@debian:/Shell# chmod +x Test.sh </span><br><span class="line">root@debian:/Shell# ./Test.sh </span><br><span class="line">This is 1 user：root</span><br><span class="line">This is 2 user：daemon</span><br><span class="line">This is 3 user：bin</span><br><span class="line">This is 4 user：sys</span><br><span class="line">This is 5 user：sync</span><br><span class="line">This is 6 user：games</span><br><span class="line">This is 7 user：man</span><br><span class="line">This is 8 user：lp</span><br><span class="line">This is 9 user：mail</span><br><span class="line">This is 10 user：news</span><br><span class="line">This is 11 user：uucp</span><br><span class="line">This is 12 user：proxy</span><br><span class="line">This is 13 user：www-data</span><br><span class="line">This is 14 user：backup</span><br><span class="line">This is 15 user：list</span><br><span class="line">This is 16 user：irc</span><br><span class="line">This is 17 user：gnats</span><br><span class="line">This is 18 user：nobody</span><br><span class="line">This is 19 user：_apt</span><br><span class="line">This is 20 user：systemd-timesync</span><br><span class="line">This is 21 user：systemd-network</span><br><span class="line">This is 22 user：systemd-resolve</span><br><span class="line">This is 23 user：tss</span><br><span class="line">This is 24 user：messagebus</span><br><span class="line">This is 25 user：usbmux</span><br><span class="line">This is 26 user：rtkit</span><br><span class="line">This is 27 user：sshd</span><br><span class="line">This is 28 user：dnsmasq</span><br><span class="line">This is 29 user：avahi</span><br><span class="line">This is 30 user：speech-dispatcher</span><br><span class="line">This is 31 user：pulse</span><br><span class="line">This is 32 user：saned</span><br><span class="line">This is 33 user：colord</span><br><span class="line">This is 34 user：geoclue</span><br><span class="line">This is 35 user：gnome-initial-setup</span><br><span class="line">This is 36 user：Debian-gdm</span><br><span class="line">This is 37 user：x</span><br><span class="line">This is 38 user：systemd-coredump</span><br></pre></td></tr></table></figure></div>

<h3 id="例子2"><a href="#例子2" class="headerlink" title="例子2"></a>例子2</h3><p><strong>根据系统时间计算今年或明年。</strong></p>
<p>首先我们进行思路分析：</p>
<p>使用<code>date +%Y</code>这个命令（为什么是+%Y这个问题可以使用man命令查看date命令的参数解释）就可以获取到今年是什么年，然后我们可以在<code>date +%Y</code>的基础上再+1就可以获取到明年是什么年：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">root@debian:/Shell# date +%Y</span><br><span class="line">2024</span><br><span class="line">root@debian:/Shell# echo &quot;This is $(date +%Y) year.&quot;</span><br><span class="line">This is 2024 year.</span><br><span class="line">root@debian:/Shell# echo &quot;The next year is $(($(date +%Y) + 1)).&quot;</span><br><span class="line">The next year is 2025.</span><br></pre></td></tr></table></figure></div>

<h3 id="例子3"><a href="#例子3" class="headerlink" title="例子3"></a>例子3</h3><p><strong>根据系统时间获取今年还剩下多少个星期，已经过了多少个星期。</strong></p>
<p>首先进行思路分析：</p>
<p>使用<code>date +%j</code>这个命令来获取day of years，也就是今年已经过去了多少天，然后我们可以再这个<code>date +%j</code></p>
<p>的基础上除以7得到我们已经过了多少个星期；最后用365减<code>date +%j</code>然后再除以7得到我们还剩下多少个星期：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">root@debian:/Shell# vim Test1.sh</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="built_in">echo</span> <span class="string">&quot;This year have passed <span class="subst">$(date +%j)</span> days.&quot;</span></span></span><br><span class="line">echo &quot;This year have passed $(($(date +%j) / 7)).&quot;</span><br><span class="line">echo &quot;There is $((365 - $(date +%j))) days before new year.&quot;</span><br><span class="line">echo &quot;There is $(((365 - $(date +%j)) / 7)) weeks before new year.&quot;</span><br><span class="line">root@debian:/Shell# chmod +x Test1.sh </span><br><span class="line">root@debian:/Shell# ./Test1.sh </span><br><span class="line">This year have passed 128 days.</span><br><span class="line">This year have passed 18.</span><br><span class="line">There is 237 days before new year.</span><br><span class="line">There is 33 weeks before new year.</span><br></pre></td></tr></table></figure></div>

<h3 id="例子4"><a href="#例子4" class="headerlink" title="例子4"></a>例子4</h3><p>判定nginx进程是否存在，若不存在则自动拉起进程。</p>
<p>首先进行思路分析：</p>
<p>使用命令 <code>ps -ef |  grep nginx</code> 来输出nginx在linux下的进程列表：</p>
<div class="highlight-container" data-rel="Cmd"><figure class="iseeu highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="function">root@debian:/<span class="title">Shell</span># <span class="title">ps</span> -<span class="title">ef</span> | <span class="title">grep</span> <span class="title">nginx</span></span></span><br><span class="line"><span class="function"><span class="title">root</span>        1740       1  0 22:17 ?        00:00:00 <span class="title">nginx</span>: <span class="title">master</span> <span class="title">process</span> /<span class="title">usr</span>/<span class="title">sbin</span>/<span class="title">nginx</span> -<span class="title">g</span> <span class="title">daemon</span> <span class="title">on</span>; <span class="title">master_process</span> <span class="title">on</span>;</span></span><br><span class="line"><span class="function"><span class="title">www</span>-<span class="title">data</span>    1742    1740  0 22:17 ?        00:00:00 <span class="title">nginx</span>: <span class="title">worker</span> <span class="title">process</span></span></span><br><span class="line"><span class="function"><span class="title">www</span>-<span class="title">data</span>    1743    1740  0 22:17 ?        00:00:00 <span class="title">nginx</span>: <span class="title">worker</span> <span class="title">process</span></span></span><br><span class="line"><span class="function"><span class="title">root</span>        1807     948  0 22:25 <span class="title">pts</span>/0    00:00:00 <span class="title">grep</span> <span class="title">nginx</span></span></span><br></pre></td></tr></table></figure></div>

<p>但是我们发现如果要模拟出nginx完全宕机的这种情况下还需要额外的过滤掉<code>root        1807     948  0 22:25 pts/0    00:00:00 grep nginx</code>这一行的状态（因为这行进程是始终都在那里），所以我们需要使用<code>grep -v grep</code> 来过滤掉grep的nginx进程，最后使用<code>wc -l</code>这个命令来计数我们选中了多少行：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@debian:/Shell# ps -ef | grep nginx | grep -v grep </span><br><span class="line">root        1740       1  0 22:17 ?        00:00:00 nginx: master process /usr/sbin/nginx -g daemon on; master_process on;</span><br><span class="line">www-data    1742    1740  0 22:17 ?        00:00:00 nginx: worker process</span><br><span class="line">www-data    1743    1740  0 22:17 ?        00:00:00 nginx: worker process</span><br><span class="line">root@debian:/Shell# ps -ef | grep nginx | grep -v grep | wc -l</span><br><span class="line">3</span><br></pre></td></tr></table></figure></div>

<p>接下来我们就可以编写脚本了：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">root@debian:/Shell# vim Test2.sh</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"></span></span><br><span class="line">nginx_process_num=$(ps -ef | grep nginx | grep -v grep | wc -l)</span><br><span class="line"></span><br><span class="line">if [ $nginx_process_num -eq 0 ];then</span><br><span class="line">	systemctl start nginx</span><br><span class="line">fi</span><br><span class="line">root@debian:/Shell# systemctl stop nginx</span><br><span class="line">root@debian:/Shell# ps -ef | grep nginx</span><br><span class="line">root        1863     948  0 22:37 pts/0    00:00:00 grep nginx</span><br><span class="line">root@debian:/Shell# ./Test2.sh </span><br><span class="line">root@debian:/Shell# ps -ef | grep nginx</span><br><span class="line">root        1874       1  0 22:37 ?        00:00:00 nginx: master process /usr/sbin/nginx -g daemon on; master_process on;</span><br><span class="line">www-data    1875    1874  0 22:37 ?        00:00:00 nginx: worker process</span><br><span class="line">www-data    1876    1874  0 22:37 ?        00:00:00 nginx: worker process</span><br><span class="line">root        1878     948  0 22:38 pts/0    00:00:00 grep nginx</span><br></pre></td></tr></table></figure></div>

<p>由此可看出需求已经实现。</p>
<h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><p>&#96;&#96;和$()两者是等价的，但推荐初学者使用$()，易于掌握；缺点是极少数UNIX可能不支持</p>
<p>$（（））主要是用来进行整数运算，包括加减乘除，引用变量前面可以加$，也可以不加$</p>
<p>例：</p>
<p>num1&#x3D;20，num2&#x3D;30</p>
<p>（（num++））</p>
<p>（（num–））</p>
<p>$(($num1+$num2*2))</p>
]]></content>
      <categories>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux权限详解</title>
    <url>/2024/05/07/Linux%E6%9D%83%E9%99%90%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<p>​	Linux系统上对文件的权限有着严格的控制，用于如果相对某个文件执行某种操作，必须具有对应的权限方可执行成功。</p>
<p>Linux下文件的权限类型一般包括读，写，执行。对应字母为 r、w、x。</p>
<p>Linux下权限的粒度有 拥有者 、群组 、其它组 三种。每个文件都可以针对三个粒度，设置不同的rwx(读写执行)权限。通常情况下，一个文件只能归属于一个用户和组， 如果其它的用户想有这个文件的权限，则可以将该用户加入具备权限的群组，一个用户可以同时归属于多个组。</p>
<p>Linux上通常使用chmod命令对文件的权限进行设置和更改。</p>
<h2 id="一、快速入门"><a href="#一、快速入门" class="headerlink" title="一、快速入门"></a>一、快速入门</h2><p>更改文件权限 （chmod命令）</p>
<h3 id="一般使用格式"><a href="#一般使用格式" class="headerlink" title="一般使用格式"></a>一般使用格式</h3><p><code>chmod [可选项] &lt;mode&gt; &lt;file...&gt;</code></p>
<p>参数说明：</p>
<p>[可选项]</p>
<p><code>-c</code>, –changes like verbose but report only when a change is made (若该档案权限确实已经更改，才显示其更改动作)</p>
<p><code>-f</code>, –silent, –quiet suppress most error messages （若该档案权限无法被更改也不要显示错误讯息）</p>
<p><code>-v</code>, –verbose output a diagnostic for every file processed（显示权限变更的详细资料）</p>
<p>–no-preserve-root do not treat ‘&#x2F;‘ specially (the default)</p>
<p>–preserve-root fail to operate recursively on ‘&#x2F;‘</p>
<p>–reference&#x3D;RFILE use RFILE’s mode instead of MODE values</p>
<p><code>-R</code>, –recursive change files and directories recursively （以递归的方式对目前目录下的所有档案与子目录进行相同的权限变更)</p>
<p><code>--help</code> 显示此帮助信息</p>
<p><code>--version</code> 显示版本信息</p>
<p>[mode]</p>
<p>权限设定字串，详细格式如下 ：</p>
<p>【ugoa】【【+-&#x3D;】【rwxX】…】【,…】,</p>
<p>其中</p>
<p>【ugoa】</p>
<p>u 表示该档案的拥有者，g 表示与该档案的拥有者属于同一个群体(group)者，o 表示其他以外的人，a 表示所有（包含上面三者）。</p>
<p>【+-&#x3D;】</p>
<p>+ 表示增加权限，- 表示取消权限，&#x3D; 表示唯一设定权限。</p>
<p>【rwxX】</p>
<p>r 表示可读取，w 表示可写入，x 表示可执行，X 表示只有当该档案是个子目录或者该档案已经被设定过为可执行。</p>
<p>【file…】</p>
<p>文件列表（单个或者多个文件、文件夹）</p>
<p> 范例：</p>
<p>设置所有用户可读取文件 a.conf</p>
<p><code>chmod ugo+r a.conf</code><br>或<br><code>chmod a+r a.conf</code></p>
<p>设置 c.sh 只有 拥有者可以读写及执行</p>
<p><code>chmod u+rwx c.sh</code></p>
<p>设置文件 a.conf 与 b.xml 权限为拥有者与其所属同一个群组 可读写，其它组可读不可写</p>
<p><code>chmod a+r,ug+w,o-w a.conf b.xml</code></p>
<p>设置当前目录下的所有档案与子目录皆设为任何人可读写</p>
<p><code>chmod -R a+rw *</code></p>
<h3 id="数字权限使用格式"><a href="#数字权限使用格式" class="headerlink" title="数字权限使用格式"></a>数字权限使用格式</h3><p>在这种使用方式中，首先我们需要了解数字如何表示权限。 首先，我们规定 数字 4 、2 和 1表示读、写、执行权限（具体原因可见下节权限详解内容），即 r&#x3D;4，w&#x3D;2，x&#x3D;1 。此时其他的权限组合也可以用其他的八进制数字表示出来，<br>如：<br>rwx &#x3D; 4 + 2 + 1 &#x3D; 7<br>rw &#x3D; 4 + 2 &#x3D; 6<br>rx &#x3D; 4 +1 &#x3D; 5</p>
<p>即<br>若要同时设置 rwx (可读写运行） 权限则将该权限位 设置 为 4 + 2 + 1 &#x3D; 7<br>若要同时设置 rw- （可读写不可运行）权限则将该权限位 设置 为 4 + 2 &#x3D; 6<br>若要同时设置 r-x （可读可运行不可写）权限则将该权限位 设置 为 4 +1 &#x3D; 5</p>
<p>上面我们提到，每个文件都可以针对三个粒度，设置不同的rwx(读写执行)权限。即我们可以用三个8进制数字分别表示 拥有者 、群组 、其它组( u、 g 、o)的权限详情，并用chmod直接加三个8进制数字的方式直接改变文件权限。语法格式为 ：</p>
<p><code>chmod &lt;abc&gt; file...</code></p>
<p>其中<br>a,b,c各为一个数字，分别代表User、Group、及Other的权限。<br>相当于简化版的<br>chmod u&#x3D;权限,g&#x3D;权限,o&#x3D;权限 file…<br>而此处的权限将用8进制的数字来表示User、Group、及Other的读、写、执行权限</p>
<p>范例：<br>设置所有人可以读写及执行<br><code>chmod 777 file</code> (等价于 chmod u&#x3D;rwx,g&#x3D;rwx,o&#x3D;rwx file 或 chmod a&#x3D;rwx file)<br>设置拥有者可读写，其他人不可读写执行<br><code>chmod 600 file</code> (等价于 chmod u&#x3D;rw,g&#x3D;—,o&#x3D;— file 或 chmod u&#x3D;rw,go-rwx file )<br>更改文件拥有者（chown命令）<br>linux&#x2F;Unix 是多人多工作业系统，每个的文件都有拥有者（所有者），如果我们想变更文件的拥有者（利用 chown 将文件拥有者加以改变），一般只有系统管理员(root)拥有此操作权限，而普通用户则没有权限将自己或者别人的文件的拥有者设置为别人。</p>
<p>语法格式：<br><code>chown [可选项] user[:group] file...</code></p>
<p>使用权限：root</p>
<p>说明：</p>
<p>[可选项] : 同上文chmod</p>
<p>user : 新的文件拥有者的使用者</p>
<p>group : 新的文件拥有者的使用者群体(group)</p>
<p>范例：</p>
<p>设置文件 d.key、e.scrt的拥有者设为 users 群体的 tom</p>
<p><code>chown tom:users file d.key e.scrt</code></p>
<p>设置当前目录下与子目录下的所有文件的拥有者为 users 群体的 James</p>
<p><code>chown -R James:users *</code></p>
<h2 id="二、Linux权限详解"><a href="#二、Linux权限详解" class="headerlink" title="二、Linux权限详解"></a>二、Linux权限详解</h2><p>​	Linux系统上对文件的权限有着严格的控制，用于如果相对某个文件执行某种操作，必须具有对应的权限方可执行成功。这也是Linux有别于Windows的机制，也是基于这个权限机制，Linux可以有效防止病毒自我运行，因为运行的条件是必须要有运行的权限，而这个权限在Linux是用户所赋予的。</p>
<p>Linux的文件权限有以下设定：</p>
<p>Linux下文件的权限类型一般包括读，写，执行。对应字母为 r、w、x。</p>
<p>Linux下权限的属组有 拥有者 、群组 、其它组 三种。每个文件都可以针对这三个属组（粒度），设置不同的rwx(读写执行)权限。</p>
<p>通常情况下，一个文件只能归属于一个用户和组， 如果其它的用户想有这个文件的权限，则可以将该用户加入具备权限的群组，一个用户可以同时归属于多个组。</p>
<p>如果我们要表示一个文件的所有权限详情，有两种方式：</p>
<p>第一种是十位二进制表示法，(三个属组每个数组使用一个二进制位，再加一个最高位共十位)，可简化为三位八进制形式</p>
<p>另外一种十二位二进制表示法(十二个二进制位)，可简化为四位八进制形式</p>
<p>十位权限表示</p>
<p>常见的权限表示形式有：</p>
<p>-rw——- (600) 只有拥有者有读写权限。</p>
<p>-rw-r–r– (644) 只有拥有者有读写权限；而属组用户和其他用户只有读权限。</p>
<p>-rwx—— (700) 只有拥有者有读、写、执行权限。</p>
<p>-rwxr-xr-x (755) 拥有者有读、写、执行权限；而属组用户和其他用户只有读、执行权限。</p>
<p>-rwx–x–x (711) 拥有者有读、写、执行权限；而属组用户和其他用户只有执行权限。</p>
<p>-rw-rw-rw- (666) 所有用户都有文件读、写权限。</p>
<p>-rwxrwxrwx (777) 所有用户都有读、写、执行权限。</p>
<p>后九位解析： 我们知道Linux权限总共有三个属组，这里我们给每个属组使用三个位置来定义三种操作（读、写、执行）权限，合起来则是权限的后九位。 上面我们用字符表示权限，其中 -代表无权限，r代表读权限，w代表写权限，x代表执行权限。</p>
<p>实际上，后九位每个位置的意义（代表某个属组的某个权限）都是固定的，如果我们将各个位置权限的有无用二进制数 1和 0来代替，则只读、只写、只执行权限，可以用三位二进制数表示为</p>
<p>r– &#x3D; 100</p>
<p>-w- &#x3D; 010</p>
<p>–x &#x3D; 001</p>
<p>— &#x3D; 000</p>
<p>转换成八进制数，则为 r&#x3D;4, w&#x3D;2, x&#x3D;1, -&#x3D;0（这也就是用数字设置权限时为何是4代表读，2代表写，1代表执行）</p>
<p>实际上，我们可以将所有的权限用二进制形式表现出来，并进一步转变成八进制数字：</p>
<p>rwx &#x3D; 111 &#x3D; 7</p>
<p>rw- &#x3D; 110 &#x3D; 6</p>
<p>r-x &#x3D; 101 &#x3D; 5</p>
<p>r– &#x3D; 100 &#x3D; 4</p>
<p>-wx &#x3D; 011 &#x3D; 3</p>
<p>-w- &#x3D; 010 &#x3D; 2</p>
<p>–x &#x3D; 001 &#x3D; 1</p>
<p>— &#x3D; 000 &#x3D; 0</p>
<p>由上可以得出，每个属组的所有的权限都可以用一位八进制数表示，每个数字都代表了不同的权限（权值）。如 最高的权限为是7，代表可读，可写，可执行。</p>
<p>故 如果我们将每个属组的权限都用八进制数表示，则文件的权限可以表示为三位八进制数</p>
<p>-rw——- &#x3D; 600</p>
<p>-rw-rw-rw- &#x3D; 666</p>
<p>-rwxrwxrwx &#x3D; 777</p>
<p>关于第一位最高位的解释： 上面我们说到了权限表示中后九位的含义，剩下的第一位代表的是文件的类型，类型可以是下面几个中的一个：</p>
<p>d代表的是目录(directroy)</p>
<p>-代表的是文件(regular file)</p>
<p>s代表的是套字文件(socket)</p>
<p>p代表的管道文件(pipe)或命名管道文件(named pipe)</p>
<p>l代表的是符号链接文件(symbolic link)</p>
<p>b代表的是该文件是面向块的设备文件(block-oriented device file)</p>
<p>c代表的是该文件是面向字符的设备文件(charcter-oriented device file)</p>
<p>下图是文件权限的解释图：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://streamcons.oss-cn-guangzhou.aliyuncs.com/img/Linux1.png"
                     
                ></p>
<p>出处：<a class="link"   href="https://javaforall.cn/130109.html" >https://javaforall.cn/130109.html <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>原文链接：<a class="link"   href="https://javaforall.cn/" >https://javaforall.cn <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2024/05/11/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a class="link"   href="https://hexo.io/" >Hexo <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>! This is your very first post. Check <a class="link"   href="https://hexo.io/docs/" >documentation <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class="link"   href="https://hexo.io/docs/troubleshooting.html" >troubleshooting <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> or you can ask me on <a class="link"   href="https://github.com/hexojs/hexo/issues" >GitHub <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/writing.html" >Writing <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/server.html" >Server <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/generating.html" >Generating <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/one-command-deployment.html" >Deployment <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
  </entry>
  <entry>
    <title>从0到1使用Hexo+Github Pages+Redefine+阿里云oss+Typora+PicGo搭建一套个人博客</title>
    <url>/2024/05/05/%E4%BB%8E0%E5%88%B01%E4%BD%BF%E7%94%A8Hexo+Github-Pages+%E9%98%BF%E9%87%8C%E4%BA%91oss+Typora+PicGo%E6%90%AD%E5%BB%BA%E4%B8%80%E5%A5%97%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h1 id="一、搭建前的环境准备"><a href="#一、搭建前的环境准备" class="headerlink" title="一、搭建前的环境准备"></a>一、搭建前的环境准备</h1>
  <div class="note-large blue">
    <div class="notel-title rounded-t-lg p-3 font-bold text-lg flex flex-row gap-2 items-center">
      <p>所需环境</p>

    </div>
    <div class="notel-content">
      <p>1、Git：官网下载并安装到电脑上：<a class="link"   href="https://git-scm.com/" >https://git-scm.com/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>2、Node.js：官网下载并安装到电脑上：<a class="link"   href="https://nodejs.org/" >https://nodejs.org/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>

    </div>
  </div>



<h1 id="二、安装hexo，并完成简单的本地页面展示"><a href="#二、安装hexo，并完成简单的本地页面展示" class="headerlink" title="二、安装hexo，并完成简单的本地页面展示"></a>二、安装hexo，并完成简单的本地页面展示</h1><h2 id="1、进入cmd输入指令"><a href="#1、进入cmd输入指令" class="headerlink" title="1、进入cmd输入指令"></a>1、进入cmd输入指令</h2><p>1.1 进入cmd输入指令：<code>npm install -g hexo-cli</code>，然后输入<code>hexo -v</code> 查看hexo版本顺便验证是否安装成功。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Users\X&gt;npm install -g hexo-cli</span><br><span class="line"></span><br><span class="line">added 53 packages <span class="keyword">in</span> 22s</span><br><span class="line"></span><br><span class="line">14 packages are looking <span class="keyword">for</span> funding</span><br><span class="line">  run `npm fund` <span class="keyword">for</span> details</span><br><span class="line">  </span><br><span class="line">E:\nodejs&gt;hexo -v</span><br><span class="line">hexo-cli: 4.3.2</span><br><span class="line">os: win32 10.0.19045 undefined</span><br><span class="line">node: 20.12.2</span><br><span class="line">acorn: 8.11.3</span><br><span class="line">ada: 2.7.6</span><br><span class="line">ares: 1.27.0</span><br><span class="line"><span class="built_in">base64</span>: 0.5.2</span><br><span class="line">brotli: 1.1.0</span><br><span class="line">cjs_module_lexer: 1.2.2</span><br><span class="line">cldr: 44.1</span><br><span class="line">icu: 74.2</span><br><span class="line">llhttp: 8.1.2</span><br><span class="line">modules: 115</span><br><span class="line">napi: 9</span><br><span class="line">nghttp2: 1.60.0</span><br><span class="line">nghttp3: 0.7.0</span><br><span class="line">ngtcp2: 0.8.1</span><br><span class="line">openssl: 3.0.13+quic</span><br><span class="line">simdutf: 4.0.8</span><br><span class="line">tz: 2024a</span><br><span class="line">undici: 5.28.4</span><br><span class="line">unicode: 15.1</span><br><span class="line">uv: 1.46.0</span><br><span class="line">uvwasi: 0.0.20</span><br><span class="line">v8: 11.3.244.8-node.19</span><br><span class="line">zlib: 1.3.0.1-motley-40e35a7</span><br></pre></td></tr></table></figure></div>

<h2 id="2、创建文件夹并初始化hexo"><a href="#2、创建文件夹并初始化hexo" class="headerlink" title="2、创建文件夹并初始化hexo"></a>2、创建文件夹并初始化hexo</h2><p>2.1 创建一个文件夹Test（这个文件夹用来存放hexo初始化后的文件），并在这个创建好的test文件夹下直接右键git bash打开。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://streamcons.oss-cn-guangzhou.aliyuncs.com/BlogImg/Hexo/2024-05-03_223819.png"
                     
                ></p>
<p>2.2 查看是否能启动成功</p>
<p><code>hexo s</code></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://streamcons.oss-cn-guangzhou.aliyuncs.com/BlogImg/Hexo/2024-05-03_223925.png"
                     
                ></p>
 
  <div class="note-large red">
    <div class="notel-title rounded-t-lg p-3 font-bold text-lg flex flex-row gap-2 items-center">
      <p>指定文件夹目录</p>

    </div>
    <div class="notel-content">
      <p>node_modules: 依赖包</p>
<p>public：存放生成的页面</p>
<p>scaffolds：生成文章的一些模板</p>
<p>source：用来存放你的文章</p>
<p>themes：主题</p>
<p><strong>_config.yml: 博客的配置文件</strong></p>

    </div>
  </div>



<p>2.3 复制网址打开</p>
<p><code>http://localhost:4000/</code></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://streamcons.oss-cn-guangzhou.aliyuncs.com/BlogImg/Hexo/2024-05-03_224033.png"
                     
                ></p>
<h1 id="三、将Hexo部署到github"><a href="#三、将Hexo部署到github" class="headerlink" title="三、将Hexo部署到github"></a>三、将Hexo部署到github</h1><h2 id="1、Github创建个人仓库"><a href="#1、Github创建个人仓库" class="headerlink" title="1、Github创建个人仓库"></a>1、Github创建个人仓库</h2>
  <div class="note p-4 mb-4 rounded-small success">
    <p>首先，需要有一个github账号。登上账号后建一个仓库：仓库名为你的用户名.github.io，<br>举例如下：<br>创建一个和你用户名相同的仓库，后面加.github.io，<br>只有这样，将来要部署到GitHub的时候，才会被识别，也就是xxxx.github.io，其中xxx就是你注册GitHub的用户名。</p>

  </div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://streamcons.oss-cn-guangzhou.aliyuncs.com/BlogImg/Hexo/a.png"
                     
                ></p>
<h2 id="2、生成ssh添加到Github"><a href="#2、生成ssh添加到Github" class="headerlink" title="2、生成ssh添加到Github"></a>2、生成ssh添加到Github</h2>
  <div class="note p-4 mb-4 rounded-small primary">
    <p>在Github上创建仓库完成之后，需要设置ssh免密登录</p>

  </div>



<p>2.1 打开cmd窗口：执行如下命令</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;yourname&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;youremail&quot;</span></span><br></pre></td></tr></table></figure></div>

<p>防止输错可以检查：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">git config user.name</span><br><span class="line">git config user.email</span><br></pre></td></tr></table></figure></div>



<p>2.2 接着进入家目录：C:\Users\X（这是你自己电脑上的家目录），右击打开git bash，输入：</p>
<p><code>ssh-keygen -t rsa -C 1500937374@qq.com（这里填你自己的QQ邮箱）</code></p>
<p>然后就敲三次回车：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://streamcons.oss-cn-guangzhou.aliyuncs.com/BlogImg/Hexo/b.png"
                     
                ></p>
<p>2.3 接着就会发现C：\Users\X 下多了一个.ssh目录，打开后有一个公钥，一个私钥。id_rsa.pub是公钥，我们需要打开它，复制里面的内容。</p>
<p>然后进入github：</p>
<p>点击<strong>setting</strong></p>
<p>进行以下操作</p>
<p>找到SSH and GPG keys选项——&gt;点击绿色按钮“New SSH key”——&gt;输入相应的title和key（key为上一步的id_rsa.pub里的内容）——&gt;然后点击Add SSH Key</p>
<h2 id="3、进行部署"><a href="#3、进行部署" class="headerlink" title="3、进行部署"></a>3、进行部署</h2>
  <div class="note p-4 mb-4 rounded-small primary">
    <p>这一步，我们就可以将hexo和GitHub关联起来，也就是将hexo生成的文章部署到GitHub上，打开站点配置文件 _config.yml，翻到最后，修改为YourgithubName（就是你的GitHub账户）。</p>

  </div>



<p>3.1 修改配置文件，然后修改内容：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: git@github.com:goubin18/goubin18.github.io.git</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure></div>


  <div class="note-large default">
    <div class="notel-title rounded-t-lg p-3 font-bold text-lg flex flex-row gap-2 items-center">
      <i class="notel-icon fa-solid fa-info"></i><p>注意</p>

    </div>
    <div class="notel-content">
      <p>在这里我们需要注意的是在每一个类型下都有一个空格，因为配置文件<code>_config.redefine.yml</code>使用yaml语法，所以我们需要注意缩进。</p>

    </div>
  </div>

<p><strong>repo：获取步骤如下</strong></p>
<p><strong>点进自己刚刚创建的仓库，复制</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://streamcons.oss-cn-guangzhou.aliyuncs.com/BlogImg/Hexo/2024-05-05_154324.png"
                     
                ></p>
<p>3.2 找到自己的博客路径打开，这个时候需要先安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub。</p>
<p><code>npm install hexo-deployer-git --save</code></p>
<p>3.3 然后依次执行以下命令：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean   		#清除缓存文件 db.json 和已生成的静态文件 public</span><br><span class="line">hexo generate       #生成网站静态文件到默认设置的 public 文件夹(hexo generate 的缩写)</span><br><span class="line">hexo deploy			#自动生成网站静态文件，并部署到设定的仓库(hexo deploy 的缩写)</span><br></pre></td></tr></table></figure></div>

<p>注意在输入<code>hexo deploy</code>后会有一个提示让你手动输入yes&#x2F;no，我们直接输入yes。</p>
<p>最后回到Github上查看自己的仓库：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://streamcons.oss-cn-guangzhou.aliyuncs.com/BlogImg/Hexo/2024-05-05_155620.png"
                     
                ></p>
<p>上传成功。</p>
<p>现在可以使用xxx.github.io就可以访问你的博客了。</p>
<h1 id="四、使用Hexo的主题Redefine"><a href="#四、使用Hexo的主题Redefine" class="headerlink" title="四、使用Hexo的主题Redefine"></a>四、使用Hexo的主题Redefine</h1><p>现在我们可以进一步的美化博客，我选择的是Hexo的主题商店里的Redefine。</p>
<p>Hexo官网主题：<a class="link"   href="https://hexo.io/themes/" >https://hexo.io/themes/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>Redefine部署及使用文档：<a class="link"   href="https://redefine-docs.ohevan.com/introduction" >https://redefine-docs.ohevan.com/introduction <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2 id="1、安装主题"><a href="#1、安装主题" class="headerlink" title="1、安装主题"></a>1、安装主题</h2><p>在 Hexo 根目录执行以下命令安装主题，有两种方式：npm、git。</p>
<p>我使用的是npm方式，git方式可以自己去官网文档查看：</p>
<p><code>npm install hexo-theme-redefine@latest</code></p>
<h2 id="2、启动主题"><a href="#2、启动主题" class="headerlink" title="2、启动主题"></a>2、启动主题</h2><p>在 Hexo 根目录的 <code>_config.yml</code> 文件中，将 <code>theme</code> 值修改为 <code>redefine</code>。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">theme: redefine</span><br></pre></td></tr></table></figure></div>

<h2 id="3、创建主题配置文件"><a href="#3、创建主题配置文件" class="headerlink" title="3、创建主题配置文件"></a>3、创建主题配置文件</h2><p>在 Hexo 根目录下创建 <code>_config.redefine.yml</code> 文件。</p>
<p>并将<a class="link"   href="https://github.com/EvanNotFound/hexo-theme-redefine/blob/main/_config.yml" >此处 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>的所有内容复制进去。</p>
<p>本文件会自动覆盖主题的配置项，创建本文件的目的是为了方便你在升级主题时，不会丢失你的配置。</p>
<h2 id="4、创建成功"><a href="#4、创建成功" class="headerlink" title="4、创建成功"></a>4、创建成功</h2><p>现在就可以启动Hexo，看看效果了。</p>
<p>后续的步骤请移步<a class="link"   href="https://redefine-docs.ohevan.com/" >官方文档 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>仔细查看使用方法。</p>
<h2 id="5、属于Redefine的Typroa主题"><a href="#5、属于Redefine的Typroa主题" class="headerlink" title="5、属于Redefine的Typroa主题"></a>5、属于Redefine的Typroa主题</h2><p>我们可以在官方文档的写作指南上找到适合写文章的Typroa主题，也可点击 <a class="link"   href="https://github.com/EvanNotFound/typora-theme-redefine" >这里 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 直接进入下载。</p>
<h1 id="五、关于在博客上使用图片的存储问题"><a href="#五、关于在博客上使用图片的存储问题" class="headerlink" title="五、关于在博客上使用图片的存储问题"></a>五、关于在博客上使用图片的存储问题</h1><p>因为在博客上写文章的时候需要引用自己的图片，所以我们可以使用<strong>阿里云OSS存储+Picgo</strong>的方式。</p>
<p>具体细节可以参考这一篇文章来进行设置：<a class="link"   href="https://developer.aliyun.com/article/1465963?spm=a2c6h.12873639.article-detail.24.e9234aefLQGLq8" >https://developer.aliyun.com/article/1465963?spm=a2c6h.12873639.article-detail.24.e9234aefLQGLq8 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>经过上述步骤后，我们就拥有了一个属于自己的个人博客。</p>
<p><strong>参考文章：</strong></p>
<p><a class="link"   href="https://developer.aliyun.com/article/1218122" >使用Hexo从0到1搭建个人博客详细教程（超详细，超简单） <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://developer.aliyun.com/article/1465963?spm=a2c6h.12873639.article-detail.24.e9234aefLQGLq8" >手把手教你搭建阿里云图床(PicGo+Typora+阿里云OSS)，新手小白一看就会 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://redefine-docs.ohevan.com/" >Redefine官网 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>搭建个人博客</category>
      </categories>
      <tags>
        <tag>搭建个人博客</tag>
        <tag>Hexo</tag>
        <tag>PicGo</tag>
        <tag>Typora</tag>
      </tags>
  </entry>
  <entry>
    <title>博客写作模板</title>
    <url>/2024/05/04/%E5%86%99%E4%BD%9C%E6%A8%A1%E6%9D%BF/</url>
    <content><![CDATA[<h1 id="写作模板"><a href="#写作模板" class="headerlink" title="写作模板"></a>写作模板</h1><h4 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h4><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">test</span></span><br></pre></td></tr></table></figure></div>

<h3 id="示例图片"><a href="#示例图片" class="headerlink" title="示例图片"></a>示例图片</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://streamcons.oss-cn-guangzhou.aliyuncs.com/img/c.png"
                      alt="test"
                ></p>
<h2 id="大号提示块"><a href="#大号提示块" class="headerlink" title="大号提示块"></a>大号提示块</h2><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><p>（<code>notel</code>意思是<code>note large</code>，方便记，也可以是<code>note-large</code>）</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;% notel [颜色] [可选: 自定义图标] [标题] %&#125;</span><br><span class="line">内容</span><br><span class="line">支持换行</span><br><span class="line">&#123;% endnotel %&#125;</span><br></pre></td></tr></table></figure></div>

<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
<th>可选值</th>
</tr>
</thead>
<tbody><tr>
<td>颜色</td>
<td>提示块的样式或颜色</td>
<td><code>blue</code>、<code>red</code>、<code>cyan</code>、<code>purple</code>、<code>orange</code>、<code>yellow</code>、<code>green</code></td>
</tr>
<tr>
<td>自定义图标</td>
<td>自定义图标，选填</td>
<td>Fontawsome的图标名称后半部分，比如<code>fa-image</code></td>
</tr>
</tbody></table>
<h3 id="例如"><a href="#例如" class="headerlink" title="例如"></a>例如</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;% notel default fa-info 信息 %&#125;</span><br><span class="line"></span><br><span class="line">换行测试</span><br><span class="line"></span><br><span class="line">换行测试</span><br><span class="line"></span><br><span class="line">换行测试</span><br><span class="line"></span><br><span class="line">&#123;% endnotel %&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;% notel blue 提示 %&#125;</span><br><span class="line"></span><br><span class="line">换行测试</span><br><span class="line"></span><br><span class="line">换行测试</span><br><span class="line"></span><br><span class="line">换行测试</span><br><span class="line"></span><br><span class="line">&#123;% endnotel %&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> &#123;% notel red 自定义标题 %&#125;</span><br><span class="line"></span><br><span class="line">换行测试</span><br><span class="line"></span><br><span class="line">换行测试</span><br><span class="line"></span><br><span class="line">换行测试</span><br><span class="line"></span><br><span class="line">&#123;% endnotel %&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3>
  <div class="note-large default">
    <div class="notel-title rounded-t-lg p-3 font-bold text-lg flex flex-row gap-2 items-center">
      <i class="notel-icon fa-solid fa-info"></i><p>信息</p>

    </div>
    <div class="notel-content">
      <p>换行测试</p>
<p>换行测试</p>
<p>换行测试</p>

    </div>
  </div>




  <div class="note-large blue">
    <div class="notel-title rounded-t-lg p-3 font-bold text-lg flex flex-row gap-2 items-center">
      <p>提示</p>

    </div>
    <div class="notel-content">
      <p>换行测试</p>
<p>换行测试</p>
<p>换行测试</p>

    </div>
  </div>



 
  <div class="note-large red">
    <div class="notel-title rounded-t-lg p-3 font-bold text-lg flex flex-row gap-2 items-center">
      <p>自定义标题</p>

    </div>
    <div class="notel-content">
      <p>换行测试</p>
<p>换行测试</p>
<p>换行测试</p>

    </div>
  </div>

<h2 id="小号提示块"><a href="#小号提示块" class="headerlink" title="小号提示块"></a>小号提示块</h2><h3 id="格式-1"><a href="#格式-1" class="headerlink" title="格式"></a>格式</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% note [样式/颜色] [可选: 自定义图标] %&#125;</span><br><span class="line">笔记内容</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></div>

<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
<th>可选值</th>
</tr>
</thead>
<tbody><tr>
<td>样式&#x2F;颜色</td>
<td>提示块的样式或颜色</td>
<td><code>success</code>、<code>default</code>、<code>primary</code>、<code>info</code>、<code>warning</code>、<code>danger</code>、<code>tip</code>、<code>question</code>以及<code>blue</code>、<code>red</code>、<code>cyan</code>、<code>purple</code>、<code>orange</code>、<code>yellow</code>、<code>green</code>等颜色</td>
</tr>
<tr>
<td>自定义图标</td>
<td>自定义图标，选填</td>
<td>Fontawsome的图标名称后半部分，比如<code>fa-image</code></td>
</tr>
</tbody></table>
<h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;% note  %&#125;</span><br><span class="line">默认 提示块标签</span><br><span class="line">&#123;% endnote %&#125; </span><br><span class="line"></span><br><span class="line">&#123;% note default  %&#125;</span><br><span class="line">default 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary  %&#125;</span><br><span class="line">primary 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success  %&#125;</span><br><span class="line">success 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info  %&#125;</span><br><span class="line">info 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning  %&#125;</span><br><span class="line">warning 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger  %&#125;</span><br><span class="line">danger 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red fa-bolt%&#125;</span><br><span class="line">自定义提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="效果-1"><a href="#效果-1" class="headerlink" title="效果"></a>效果</h3>
  <div class="note p-4 mb-4 rounded-small default">
    <p>默认 提示块标签</p>

  </div> 




  <div class="note p-4 mb-4 rounded-small default">
    <p>default 提示块标签</p>

  </div>




  <div class="note p-4 mb-4 rounded-small primary">
    <p>primary 提示块标签</p>

  </div>




  <div class="note p-4 mb-4 rounded-small success">
    <p>success 提示块标签</p>

  </div>




  <div class="note p-4 mb-4 rounded-small info">
    <p>info 提示块标签</p>

  </div>




  <div class="note p-4 mb-4 rounded-small warning">
    <p>warning 提示块标签</p>

  </div>




  <div class="note p-4 mb-4 rounded-small danger">
    <p>danger 提示块标签</p>

  </div>




  <div class="note p-4 mb-4 rounded-small red icon-padding">
    <i class="note-icon fa-solid fa-bolt"></i><p>自定义提示块标签</p>

  </div>

<h2 id="折叠模块"><a href="#折叠模块" class="headerlink" title="折叠模块"></a>折叠模块</h2><h3 id="写法"><a href="#写法" class="headerlink" title="写法"></a>写法</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% folding [颜色]::[标题] %&#125;</span><br><span class="line">需要写的内容</span><br><span class="line">&#123;% endfolding %&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% folding blue::Folding 测试： 点击查看更多 %&#125;</span><br><span class="line"></span><br><span class="line">啊啊啊啊啊 </span><br><span class="line"></span><br><span class="line">&#123;% note danger  %&#125;</span><br><span class="line"></span><br><span class="line">danger 提示块标签</span><br><span class="line"></span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note tip  %&#125;</span><br><span class="line"></span><br><span class="line">tip 提示块标签</span><br><span class="line"></span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="效果-2"><a href="#效果-2" class="headerlink" title="效果"></a>效果</h3><details class="blue" data-header-exclude><summary><i class="fa-solid fa-chevron-right"></i>Folding 测试： 点击查看更多 </summary>
              <div class='content'>
              <p>测试测试测试</p>  <div class="note p-4 mb-4 rounded-small danger">    <p>danger 提示块标签</p>  </div>  <div class="note p-4 mb-4 rounded-small tip">    <p>tip 提示块标签</p>  </div>
              </div>
            </details>

<h3 id="颜色列表"><a href="#颜色列表" class="headerlink" title="颜色列表"></a>颜色列表</h3><p><code>yellow</code>、<code>blue</code>、<code>green</code>、<code>red</code>、<code>orange</code>、<code>pink</code>、<code>cyan</code>、<code>white</code>、<code>black</code>、<code>gray</code></p>
<h2 id="Tabs分栏模块"><a href="#Tabs分栏模块" class="headerlink" title="Tabs分栏模块"></a>Tabs分栏模块</h2><p>通过本模块可以在页面中添加多个栏目，用户可以通过点击标签页来切换内容</p>
<h3 id="写法-1"><a href="#写法-1" class="headerlink" title="写法"></a>写法</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% tabs 页面内不重复的ID %&#125;</span><br><span class="line">&lt;!-- tab 栏目1名称 --&gt;</span><br><span class="line">内容</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&lt;!-- tab 栏目2名称 --&gt;</span><br><span class="line">内容</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure></div>

<p>其中，<code>页面内不重复的ID</code> 为你为这个选项卡创建的唯一标识符，可以随便取。</p>
<p>每个栏目内容使用 <code>&lt;!-- tab 栏目名称 --&gt;</code> 和 <code>&lt;!-- endtab --&gt;</code> 来定义。</p>
<h3 id="例子-2"><a href="#例子-2" class="headerlink" title="例子"></a>例子</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% tabs First unique name %&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab First Tab--&gt;</span><br><span class="line"></span><br><span class="line">***\*This is Tab 1.\****</span><br><span class="line"></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab Second Tab--&gt;</span><br><span class="line"></span><br><span class="line">***\*This is Tab 2.\**** </span><br><span class="line"></span><br><span class="line">This is Tab 2.</span><br><span class="line"></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab Third Tab--&gt;</span><br><span class="line"></span><br><span class="line">***\*This is Tab 3.\**** This is Tab 3. This is Tab 3.</span><br><span class="line"></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="效果-3"><a href="#效果-3" class="headerlink" title="效果"></a>效果</h3><div class="tabs" id="tab-first-unique-name"><ul class="nav-tabs"><li class="tab active"><a class="#first-unique-name-1">First Tab</a></li><li class="tab"><a class="#first-unique-name-2">Second Tab</a></li><li class="tab"><a class="#first-unique-name-3">Third Tab</a></li></ul><div class="tab-content"><div class="tab-pane active" id="first-unique-name-1"><p><em><strong>*This is Tab 1.*</strong></em></p></div><div class="tab-pane" id="first-unique-name-2"><p><em><strong>*This is Tab 2.*</strong></em> </p>
<p>This is Tab 2.</p></div><div class="tab-pane" id="first-unique-name-3"><p><em><strong>*This is Tab 3.*</strong></em> This is Tab 3. This is Tab 3.</p></div></div></div>

<h2 id="Buttons按钮模块"><a href="#Buttons按钮模块" class="headerlink" title="Buttons按钮模块"></a>Buttons按钮模块</h2><h3 id="写法-2"><a href="#写法-2" class="headerlink" title="写法"></a>写法</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% btn [可选大小]::[名称]::[url]::[可选图标] %&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="变量可选值"><a href="#变量可选值" class="headerlink" title="变量可选值"></a>变量可选值</h3><p><code>[可选大小]</code>：</p>
<p><code>center</code>, <code>regular</code>, <code>large</code>, <code>center large</code>, <code>center regular</code></p>
<p><code>[可选图标]</code>：</p>
<p>Fontawsome图标名称，比如<code>fa-solid</code> <code>fa-house</code></p>
<h3 id="效果-4"><a href="#效果-4" class="headerlink" title="效果"></a>效果</h3><p>不设置任何参数的 <a class="button " href='/' title='按钮'>按钮</a> 适合融入段落中。 </p>
<p>regular 按钮适合独立于段落之外： </p>
<a class="button  regular" href='https://www.ohevan.com' title='示例博客'><i class='fa-solid fa-play-circle'></i> 示例博客</a>

<a class="button  regular" href='https://www.ohevan.com' title='示例博客'><i class='fa-solid fa-play-circle'></i> 示例博客</a> 

<p>large 按钮更具有强调作用，建议搭配 center 使用： </p>
<a class="button  center large" href='https://redefine-docs.ohevan.com' title='开始使用'>开始使用</a>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>写了在官网上说明的写作模板，如果还需看更详细的文档，请移步<a href="https://redefine-docs.ohevan.com/modules"><strong>官方文档</strong></a>查看。</p>
]]></content>
      <categories>
        <category>写作模板</category>
      </categories>
      <tags>
        <tag>Demo</tag>
        <tag>写作模板</tag>
        <tag>first</tag>
      </tags>
  </entry>
  <entry>
    <title>网络丢包的定位与处理</title>
    <url>/2024/05/10/%E7%BD%91%E7%BB%9C%E4%B8%A2%E5%8C%85%E7%9A%84%E5%AE%9A%E4%BD%8D%E4%B8%8E%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<h1 id="网络丢包的定位与处理"><a href="#网络丢包的定位与处理" class="headerlink" title="网络丢包的定位与处理"></a>网络丢包的定位与处理</h1><p>​	出现网络丢包现象时，第一步需要确定丢包的网络位置，其次是确定丢包的故障原因，然后依据定位的故障原因再进行解决。定位流程大致如图所示：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://streamcons.oss-cn-guangzhou.aliyuncs.com/img/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B8%A2%E5%8C%85.png"
                     
                ></p>
<p>​	例如，某园区部署的网络如图9-2上连接用户A、用户B和用户C上连接入交换机Switch_3和Switch_2，用户D和用户E上连接入交换机Switch_4，之后共同接入到核心交换机Switch_1，并通过防火墙连接到Internet。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://streamcons.oss-cn-guangzhou.aliyuncs.com/img/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B8%A2%E5%8C%852.png"
                     
                ></p>
<h2 id="1、确认网络发生丢包"><a href="#1、确认网络发生丢包" class="headerlink" title="1、确认网络发生丢包"></a>1、确认网络发生丢包</h2><p>​	<strong>用户丢包的现象描述通常表现为：</strong></p>
<p>​	<strong>用户上网时：</strong></p>
<ul>
<li>网络速度不稳定，打开网页的速度特别的慢，有时候还会出现网页部分内容或是整个页面无法显示的问题；</li>
<li>观看视频业务时有马赛克或花屏等卡顿现象；</li>
<li>QQ等即时通讯工具等频繁掉线或提示登录超时；</li>
<li>下载文件速度慢；</li>
</ul>
<p>​	<strong>交换机工作时：</strong></p>
<ul>
<li>在交换机上执行Ping操作，对网络进行连通性测试，提示超时；</li>
<li>端口无法正常转发数据；</li>
<li>管理用户登录交换机，提示超时；</li>
<li>业务经常中断；</li>
</ul>
<p>这些故障现象几乎都跟网络丢包有关。如果现网当中出现以上故障现象中的一种或多种，基本可以确认发生了网络丢包。</p>
<h2 id="2、排查产生丢包现象的PC"><a href="#2、排查产生丢包现象的PC" class="headerlink" title="2、排查产生丢包现象的PC"></a>2、排查产生丢包现象的PC</h2><p>​	如PC的网卡是否正常、PC连接设备的线缆是否正常都有可能造成设备丢包。解决方法：断开网络后给PC查杀病毒、<strong>检查网线重装操作系统</strong>、<strong>检查网卡</strong>等。</p>
<p>确认PC正常后，如果故障仍然存在，继续执行下一步。</p>
<h2 id="3、检查接口物理状态是否为Down"><a href="#3、检查接口物理状态是否为Down" class="headerlink" title="3、检查接口物理状态是否为Down"></a>3、检查接口物理状态是否为Down</h2><p>​	一般来说，接口的物理状态Down，或接口双工模式或速率协商模式与对端不一致，会造成接口的状态异常。</p>
<h2 id="4、检查接口入方向是否存在CRC校验错误"><a href="#4、检查接口入方向是否存在CRC校验错误" class="headerlink" title="4、检查接口入方向是否存在CRC校验错误"></a>4、检查接口入方向是否存在CRC校验错误</h2><p>​	检查报文经过的物理端口是否存在CRC校验错误，且错误计数是否在不断增长。</p>
<p>如果输出信息显示字段“CRC”有计数，且重复执行命令发现计数在不断增长，说明端口接收到了CRC错误报文，即存在CRC校验错误，说明是由于物理链路或者设备问题导致的错包 。</p>
<h2 id="5、检查接口出方向是否存在Discard计数"><a href="#5、检查接口出方向是否存在Discard计数" class="headerlink" title="5、检查接口出方向是否存在Discard计数"></a>5、检查接口出方向是否存在Discard计数</h2><p>​	网络中，有时会出现在非常短的时间（毫秒级别）内收到非常多的突发数据，以至于瞬时突发速率达到平均速率的数十倍、数百倍，甚至超过端口带宽的现</p>
<p>象。这种现象被称为<strong>微突发</strong>。网管设备或网络性能监控软件通常是基于比较长的时间(数秒到数分钟)计算网络实时带宽。在这种情况下，流量速率通常是一条比较</p>
<p>平稳的曲线。但是，一秒钟对于一个高速收发数据包的接口来说是非常长的一个时间段。如果将数据更改为毫秒级进行观察，流量速率很可能是带锯齿的。如果锯</p>
<p>齿突变很大，可以认为是微突发。</p>
<p>​	目前的运维手段很难监控到微突发，原因如下：</p>
<ul>
<li><p>网管软件的数据统计依赖于设备数据的上报，且网管软件的轮询周期一般是分钟级别，计算的是平均流量。</p>
</li>
<li><p>交换机默认端口带宽的统计周期是300秒，可以设置的最小统计间隔为10秒。</p>
</li>
<li><p>交换机的端口峰值速率统计周期为秒级，只能计算出秒级内的平均最大值。</p>
<p>因此，需要通过获取报文后进行分析，才能证明网络中的确存在微突发。</p>
<p><strong>拥塞</strong>是指网络资源不足而造成速率下降，引入额外延时的现象。当网络中存在大量的组播流容易引起流量突发，或者多业务并存的复杂环境下，拥塞现象极为</p>
<p>常见。流量突发导致设备接口发送带宽超出限制，设备出现拥塞丢包。</p>
<p>拥塞主要在以下的场景发生：</p>
</li>
<li><p>高速率端口向低速率端口发送流量，流量超过低速率端口的带宽。</p>
</li>
<li><p>多个端口向一个端口发送流量，流量叠加之和超过发送端口的带宽。</p>
</li>
<li><p>端口的出方向配置限速或者流量整形，发送的流量超过限速或者流量整形的阈值。</p>
</li>
<li><p>网络流量存在突发，在某个时刻，端口流量超过端口的带宽。</p>
</li>
</ul>
<h2 id="6、检查是否有环路"><a href="#6、检查是否有环路" class="headerlink" title="6、检查是否有环路"></a>6、检查是否有环路</h2><p>​	这是最容易造成丢包现象的因素，并且具有比较强的隐蔽性，例如在较大型的网络环境中，管理员很容易把交换机之间的端口连接错误，从而引起网络环路，</p>
<p>导致丢包。</p>
<h2 id="7、检查是否存在攻击"><a href="#7、检查是否存在攻击" class="headerlink" title="7、检查是否存在攻击"></a>7、检查是否存在攻击</h2><p>​	发生网络攻击时，交换机忙于处理来自于攻击源的非正常网络交互请求，无法处理其他业务造成丢包。</p>
<p>常见的网络攻击包括ARP、ARP-Miss以及DHCP等协议报文攻击，这些攻击行为的共同特点是攻击源产生大量的协议报文对设备进行冲击，因此可以在设备上看到</p>
<p>大量上送CPU的报文统计。</p>
<ul>
<li><p>ARP协议报文攻击和ARP-Miss协议报文攻击</p>
</li>
<li><p>DHCP协议报文攻击</p>
</li>
<li><p>其他攻击</p>
</li>
</ul>
<p>​		ICMP攻击</p>
<p>​		DDoS攻击</p>
<p>​		广播报文攻击</p>
<p>​		TTL-expired报文攻击</p>
<p>​		目的IP为设备IP的报文攻击</p>
<p>​		SSH&#x2F;FTP&#x2F;Telnet等应用层协议报文攻击</p>
<h2 id="8、检查上送CPU的报文速率是否超出设备限速"><a href="#8、检查上送CPU的报文速率是否超出设备限速" class="headerlink" title="8、检查上送CPU的报文速率是否超出设备限速"></a>8、检查上送CPU的报文速率是否超出设备限速</h2><p>​	设备针对每类协议报文都有缺省的CPCAR值，一般情况下，设备上协议报文的CPCAR值采用默认值就可以满足应用。部分协议报文的CPCAR值需要根据实际</p>
<p>业务规模和具体的用户网络环境进行调整。</p>
<ol>
<li>通过display cpu-defend statistics all命令查看上送CPU报文的统计信息，确认对应的业务是否丢包。</li>
<li>通过display cpu-defend configuration [ packet-type packet-type ] { all | slot slot-id | mcu }命令查看设备对上送CPU的报文限速值。</li>
<li>通过display cpu-defend rate [ packet-type packet-type ] { all | mcu | slot slot-id }命令查看上送CPU的报文速率。</li>
<li>结合现网规模确认当前CPCAR设定值是否匹配。</li>
</ol>
<h2 id="9、检查相关配置是否合理"><a href="#9、检查相关配置是否合理" class="headerlink" title="9、检查相关配置是否合理"></a>9、检查相关配置是否合理</h2><p>​	查看接口、VLAN、VLANIF以及全局的配置，检查是否配置了与丢包相关的配置。</p>
<p>是否有相关的流量过滤、抑制或限速，以及是否正确运用了流策略。例如流策略误配置了对某类报文采取丢弃。</p>
<p>流策略检查：主要检查是否正确应用了流策略，流策略中定义的流行为动作和流分类中匹配的规则是否有导致报文被丢弃的配置。</p>
<p>执行命令display traffic policy user-defined查看配置的流策略信息。</p>
<p>是否存在安全相关的配置，如端口安全、IPSG、URPF等。</p>
<p>port-security enable：使能端口安全功能后，接口会将学习到的MAC地址转换为安全动态MAC地址。当接口学习的安全动态MAC数量达到上限后（缺省值为</p>
<p>1），不再学习新的MAC地址，对超过MAC地址学习数量限制的报文采取直接丢弃的动作。</p>
<h2 id="10、通过流量统计判断丢包位置"><a href="#10、通过流量统计判断丢包位置" class="headerlink" title="10、通过流量统计判断丢包位置"></a>10、通过流量统计判断丢包位置</h2><p>​	沿着发生丢包的链路，在设备的入接口和出接口上部署流策略，分别统计入接口的Inbound方向和出接口的Outbound方向的特定报文，以确认该类报文是否</p>
<p>在本设备被丢弃。</p>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次VMware的虚拟机和主机的三种配置模式</title>
    <url>/2024/05/06/%E8%AE%B0%E4%B8%80%E6%AC%A1VMware%E7%9A%84%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%92%8C%E4%B8%BB%E6%9C%BA%E7%9A%84%E4%B8%89%E7%A7%8D%E9%85%8D%E7%BD%AE%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="一、VMware的三种配置模式"><a href="#一、VMware的三种配置模式" class="headerlink" title="一、VMware的三种配置模式"></a>一、VMware的三种配置模式</h1><h2 id="1、桥接模式"><a href="#1、桥接模式" class="headerlink" title="1、桥接模式"></a>1、桥接模式</h2><p><strong>特点：</strong></p>
<p>虚拟机和主机处于同等地位，并且和主机处于同一网段。</p>
<p><strong>原理：</strong></p>
<p>桥接模式，使用的是VMnet0虚拟网卡。</p>
<p>vmnet0实际上就是一个*<u>虚拟的网桥</u>*(2层交换机)，这个网桥有若干个接口，一个端口用于连接你的Host主机，其余</p>
<p>端口可以用于连接虚拟机，他们的位置是对等的，谁也不是谁的网关。所以桥接模式下，虚拟机和Host主机是同</p>
<p>等地位的主机。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://streamcons.oss-cn-guangzhou.aliyuncs.com/img/%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F.png"
                     
                ></p>
<h2 id="2、NAT模式"><a href="#2、NAT模式" class="headerlink" title="2、NAT模式"></a>2、NAT模式</h2><p><strong>原理：</strong></p>
<p>NAT模式，就是让虚拟系统借助NAT（网络地址转换）功能，通过宿主机器所在的网络来访问公网。</p>
<p>实际上VMnet8充当了路由器的作用，负责将虚拟机转发到VMnet8的包进行地址转换之后发送到实际的网络中，</p>
<p>再将实际网络中返回的包进行地址转换后通过VMnet8发送给虚拟机。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://streamcons.oss-cn-guangzhou.aliyuncs.com/img/Nat%E6%A8%A1%E5%BC%8F.png"
                     
                ></p>

  <div class="note p-4 mb-4 rounded-small primary">
    <p>虚拟机的IP都是由虚拟交换机决定的，由虚拟NAT负责连接外网，而虚拟网卡VMware Network Adapter Vmnet8只是负责主机与虚拟机之间的通信。</p>

  </div>

<h2 id="3、仅主机模式"><a href="#3、仅主机模式" class="headerlink" title="3、仅主机模式"></a>3、仅主机模式</h2><p><strong>特点：</strong></p>
<p>只能和主机互相通信，不能上网，也不能访问其他主机，用于建立与外部隔离的网络环境。</p>
<p><strong>原理：</strong></p>

  <div class="note p-4 mb-4 rounded-small primary">
    <p>Host-only模式使用的是VMnet1网卡，这种情况下虚拟机连接到VMnet1上，但系统并不为其提供任何路由服务，因此虚拟机只能和宿主机进行通信，不能连接到真正的网络上。</p>

  </div>



<h1 id="二、遇到的问题"><a href="#二、遇到的问题" class="headerlink" title="二、遇到的问题"></a>二、遇到的问题</h1><p>因学习需要，故想安装linux系统配合shell远程连接使用，但是发现原来默认VMware虚拟网络编辑器里的VMnet8（NAT模式）配置无法让虚拟机成功ping通主机。</p>
<p><strong>这是VMware虚拟网络编辑器里VMnet8我更改后的配置：</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://streamcons.oss-cn-guangzhou.aliyuncs.com/img/VMware1.png"
                     
                ></p>
<p>这是NAT设置里的内容，也就是NAT的网关。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://streamcons.oss-cn-guangzhou.aliyuncs.com/img/VMware2.png"
                     
                ></p>
<p>这是DHCP设置里的内容，也就是NAT的起始地址和结束地址。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://streamcons.oss-cn-guangzhou.aliyuncs.com/img/VMware3.png"
                     
                ></p>
<p>这是我的主机IP：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://streamcons.oss-cn-guangzhou.aliyuncs.com/img/VMware4.png"
                     
                ></p>
<p>这是我的虚拟机IP：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://streamcons.oss-cn-guangzhou.aliyuncs.com/img/VMware8.png"
                     
                ></p>
<p>此时，我尝试着从虚拟机ping主机ping：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://streamcons.oss-cn-guangzhou.aliyuncs.com/img/VMware5.png"
                     
                ></p>
<p>我尝试着虚拟机ping设置好的网关192.168.18.2：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://streamcons.oss-cn-guangzhou.aliyuncs.com/img/VMware6.png"
                     
                ></p>
<p>可以看出均无法ping通。</p>
<p>但是我尝试着从主机ping虚拟机：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://streamcons.oss-cn-guangzhou.aliyuncs.com/img/VMware7.png"
                     
                ></p>
<p>可以看出它ping通了。</p>
<p>后来经过查找网上大量资料后发现，NAT模式下并不能将子网IP（也就是DHCP分配的网段）设置成和主机的IP网段一致，并且网关IP不能被包含在DHCP设置里的起始地址和结束地址之间，由上面的配置可以看出，我把子网IP和主机IP的网段设为了一致，并且设置的默认网关IP（192.168.18.2）<strong>被包含</strong>在起始地址192.168.18.1~192.168.18.254内，所以我们需要把这两个地方更改一下，把子网IP的网段设置为和主机IP网段不一样，起始地址设置为192.168.xx.3即可（xx为即将设置的子网IP网段）。</p>
<p>下面是更换后的配置：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://streamcons.oss-cn-guangzhou.aliyuncs.com/img/VMware9.png"
                     
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://streamcons.oss-cn-guangzhou.aliyuncs.com/img/VMware10.png"
                     
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://streamcons.oss-cn-guangzhou.aliyuncs.com/img/VMware11.png"
                     
                ></p>
<p>更改后的虚拟机IP：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://streamcons.oss-cn-guangzhou.aliyuncs.com/img/VMware12.png"
                     
                ></p>
<p>然后我们可以测试一下主机和虚拟机能否互相ping通：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://streamcons.oss-cn-guangzhou.aliyuncs.com/img/VMware13.png"
                     
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://streamcons.oss-cn-guangzhou.aliyuncs.com/img/VMware14.png"
                     
                ></p>
<p>至此，虚拟机和主机和外网都打通了，问题得到了解决。</p>
<p>其实我们遇到这种情况一般都可以直接选择<strong>恢复默认设置</strong>这个选项，但我们在手动设置的时候出错后主动研究并解决问题可以培养一下自身解决问题的能力，我们显然选择后者更好。</p>
<p>参考文章：**<a class="link"   href="https://juejin.cn/post/7244099508212744253" >VMware虚拟机网络配置-NAT篇 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> **</p>
]]></content>
      <categories>
        <category>VMware</category>
      </categories>
      <tags>
        <tag>VMware</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次我的博客迁移</title>
    <url>/2024/05/12/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB/</url>
    <content><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>最近打算购入一台云服务器和域名来迁移博客，遂记录一次迁移过程</p>
<p>为什么迁移博客？</p>
<p>答：因为之前用Github  pages的方式虽然方便，但是不易维护，而且访问有时会受限，最重要的一点是Github存储库中最大限制为100M，所以为了做一个完成度高的个人博客，打算以下面的架构进行对博客进行完善：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://streamcons.oss-cn-guangzhou.aliyuncs.com/img/2024-05-13_114708.png"
                     
                ></p>
<p>现在因为时间问题，我只能先实现简单的前端Hexo，Docker部署环境，域名映射Nginx等要点。后续再将剩下的部分完善。</p>
<h2 id="1、安装Git"><a href="#1、安装Git" class="headerlink" title="1、安装Git"></a>1、安装Git</h2><h3 id="Git安装过程"><a href="#Git安装过程" class="headerlink" title="Git安装过程"></a>Git安装过程</h3><div class="highlight-container" data-rel="Cmd"><figure class="iseeu highlight cmd"><table><tr><td class="code"><pre><span class="line">[root@SC /]# yum install git</span><br><span class="line">Loaded plugins: fastestmirror</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line">Resolving Dependencies</span><br><span class="line">--&gt; Running transaction check</span><br><span class="line">---&gt; Package git.x86_64 <span class="number">0</span>:<span class="number">1</span>.<span class="number">8</span>.<span class="number">3</span>.<span class="number">1</span>-<span class="number">25</span>.el7_9 will be installed</span><br><span class="line">--&gt; Processing Dependency: perl-Git = <span class="number">1</span>.<span class="number">8</span>.<span class="number">3</span>.<span class="number">1</span>-<span class="number">25</span>.el7_9 <span class="keyword">for</span> package: git-<span class="number">1</span>.<span class="number">8</span>.<span class="number">3</span>.<span class="number">1</span>-<span class="number">25</span>.el7_9.x86_64</span><br><span class="line">--&gt; Processing Dependency: perl(Term::ReadKey) <span class="keyword">for</span> package: git-<span class="number">1</span>.<span class="number">8</span>.<span class="number">3</span>.<span class="number">1</span>-<span class="number">25</span>.el7_9.x86_64</span><br><span class="line">--&gt; Processing Dependency: perl(Git) <span class="keyword">for</span> package: git-<span class="number">1</span>.<span class="number">8</span>.<span class="number">3</span>.<span class="number">1</span>-<span class="number">25</span>.el7_9.x86_64</span><br><span class="line">--&gt; Processing Dependency: perl(Error) <span class="keyword">for</span> package: git-<span class="number">1</span>.<span class="number">8</span>.<span class="number">3</span>.<span class="number">1</span>-<span class="number">25</span>.el7_9.x86_64</span><br><span class="line">--&gt; Running transaction check</span><br><span class="line">---&gt; Package perl-Error.noarch <span class="number">1</span>:<span class="number">0</span>.<span class="number">17020</span>-<span class="number">2</span>.el7 will be installed</span><br><span class="line">---&gt; Package perl-Git.noarch <span class="number">0</span>:<span class="number">1</span>.<span class="number">8</span>.<span class="number">3</span>.<span class="number">1</span>-<span class="number">25</span>.el7_9 will be installed</span><br><span class="line">---&gt; Package perl-TermReadKey.x86_64 <span class="number">0</span>:<span class="number">2</span>.<span class="number">30</span>-<span class="number">20</span>.el7 will be installed</span><br><span class="line">--&gt; Finished Dependency Resolution</span><br><span class="line"></span><br><span class="line">Dependencies Resolved</span><br><span class="line"></span><br><span class="line">===============================================================================================================================================================================</span><br><span class="line"> Package                                       Arch                                Version                                          Repository                            Size</span><br><span class="line">===============================================================================================================================================================================</span><br><span class="line"><span class="function">Installing:</span></span><br><span class="line"><span class="function"> <span class="title">git</span>                                           <span class="title">x86_64</span>                              1.8.3.1-25.<span class="title">el7_9</span>                                 <span class="title">updates</span>                              4.4 <span class="title">M</span></span></span><br><span class="line"><span class="function"><span class="title">Installing</span> <span class="title">for</span> <span class="title">dependencies</span>:</span></span><br><span class="line"><span class="function"> <span class="title">perl</span>-<span class="title">Error</span>                                    <span class="title">noarch</span>                              1:0.17020-2.<span class="title">el7</span>                                  <span class="title">base</span>                                  32 <span class="title">k</span></span></span><br><span class="line"><span class="function"> <span class="title">perl</span>-<span class="title">Git</span>                                      <span class="title">noarch</span>                              1.8.3.1-25.<span class="title">el7_9</span>                                 <span class="title">updates</span>                               56 <span class="title">k</span></span></span><br><span class="line"><span class="function"> <span class="title">perl</span>-<span class="title">TermReadKey</span>                              <span class="title">x86_64</span>                              2.30-20.<span class="title">el7</span>                                      <span class="title">base</span>                                  31 <span class="title">k</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">Transaction</span> <span class="title">Summary</span></span></span><br><span class="line"><span class="function">===============================================================================================================================================================================</span></span><br><span class="line"><span class="function"><span class="title">Install</span>  1 <span class="title">Package</span> (+3 <span class="title">Dependent</span> <span class="title">packages</span>)</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">Total</span> <span class="title">download</span> <span class="title">size</span>: 4.5 <span class="title">M</span></span></span><br><span class="line"><span class="function"><span class="title">Installed</span> <span class="title">size</span>: 22 <span class="title">M</span></span></span><br><span class="line"><span class="function"><span class="title">Is</span> <span class="title">this</span> <span class="title">ok</span> [<span class="title">y</span>/<span class="title">d</span>/<span class="title">N</span>]: <span class="title">y</span></span></span><br><span class="line"><span class="function"><span class="title">Downloading</span> <span class="title">packages</span>:</span></span><br><span class="line"><span class="function">(1/4): <span class="title">perl</span>-<span class="title">TermReadKey</span>-2.30-20.<span class="title">el7.x86_64.rpm</span>                                                                                                          |  31 <span class="title">kB</span>  00:00:00     </span></span><br><span class="line"><span class="function">(2/4): <span class="title">perl</span>-<span class="title">Error</span>-0.17020-2.<span class="title">el7.noarch.rpm</span>                                                                                                              |  32 <span class="title">kB</span>  00:00:00     </span></span><br><span class="line"><span class="function">(3/4): <span class="title">perl</span>-<span class="title">Git</span>-1.8.3.1-25.<span class="title">el7_9.noarch.rpm</span>                                                                                                             |  56 <span class="title">kB</span>  00:00:00     </span></span><br><span class="line"><span class="function">(4/4): <span class="title">git</span>-1.8.3.1-25.<span class="title">el7_9.x86_64.rpm</span>                                                                                                                  | 4.4 <span class="title">MB</span>  00:00:00     </span></span><br><span class="line"><span class="function">-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="function"><span class="title">Total</span>                                                                                                                                           19 <span class="title">MB</span>/<span class="title">s</span> | 4.5 <span class="title">MB</span>  00:00:00     </span></span><br><span class="line"><span class="function"><span class="title">Running</span> <span class="title">transaction</span> <span class="title">check</span></span></span><br><span class="line"><span class="function"><span class="title">Running</span> <span class="title">transaction</span> <span class="title">test</span></span></span><br><span class="line"><span class="function"><span class="title">Transaction</span> <span class="title">test</span> <span class="title">succeeded</span></span></span><br><span class="line"><span class="function"><span class="title">Running</span> <span class="title">transaction</span></span></span><br><span class="line"><span class="function">  <span class="title">Installing</span> : 1:<span class="title">perl</span>-<span class="title">Error</span>-0.17020-2.<span class="title">el7.noarch</span>                                                                                                                           1/4 </span></span><br><span class="line"><span class="function">  <span class="title">Installing</span> : <span class="title">perl</span>-<span class="title">TermReadKey</span>-2.30-20.<span class="title">el7.x86_64</span>                                                                                                                         2/4 </span></span><br><span class="line"><span class="function">  <span class="title">Installing</span> : <span class="title">git</span>-1.8.3.1-25.<span class="title">el7_9.x86_64</span>                                                                                                                                 3/4 </span></span><br><span class="line"><span class="function">  <span class="title">Installing</span> : <span class="title">perl</span>-<span class="title">Git</span>-1.8.3.1-25.<span class="title">el7_9.noarch</span>                                                                                                                            4/4 </span></span><br><span class="line"><span class="function">  <span class="title">Verifying</span>  : 1:<span class="title">perl</span>-<span class="title">Error</span>-0.17020-2.<span class="title">el7.noarch</span>                                                                                                                           1/4 </span></span><br><span class="line"><span class="function">  <span class="title">Verifying</span>  : <span class="title">git</span>-1.8.3.1-25.<span class="title">el7_9.x86_64</span>                                                                                                                                 2/4 </span></span><br><span class="line"><span class="function">  <span class="title">Verifying</span>  : <span class="title">perl</span>-<span class="title">Git</span>-1.8.3.1-25.<span class="title">el7_9.noarch</span>                                                                                                                            3/4 </span></span><br><span class="line"><span class="function">  <span class="title">Verifying</span>  : <span class="title">perl</span>-<span class="title">TermReadKey</span>-2.30-20.<span class="title">el7.x86_64</span>                                                                                                                         4/4 </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">Installed</span>:</span></span><br><span class="line"><span class="function">  <span class="title">git.x86_64</span> 0:1.8.3.1-25.<span class="title">el7_9</span>                                                                                                                                                </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">Dependency</span> <span class="title">Installed</span>:</span></span><br><span class="line"><span class="function">  <span class="title">perl</span>-<span class="title">Error.noarch</span> 1:0.17020-2.<span class="title">el7</span>                       <span class="title">perl</span>-<span class="title">Git.noarch</span> 0:1.8.3.1-25.<span class="title">el7_9</span>                       <span class="title">perl</span>-<span class="title">TermReadKey.x86_64</span> 0:2.30-20.<span class="title">el7</span>                      </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">Complete</span>!</span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></table></figure></div>

<h2 id="2、安装-Docker"><a href="#2、安装-Docker" class="headerlink" title="2、安装 Docker"></a>2、安装 Docker</h2><div class="highlight-container" data-rel="Cmd"><figure class="iseeu highlight cmd"><table><tr><td class="code"><pre><span class="line">##	通过 uname -r 命令查看我们当前的内核版本</span><br><span class="line">[root@SC /]# uname -r</span><br><span class="line"><span class="number">3</span>.<span class="number">10</span>.<span class="number">0</span>-<span class="number">1160</span>.<span class="number">114</span>.<span class="number">2</span>.el7.x86_64</span><br><span class="line"></span><br><span class="line">##	将yum包更新到最新</span><br><span class="line">[root@SC /]# yum update</span><br><span class="line">Loaded plugins: fastestmirror</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line">No packages marked <span class="keyword">for</span> update</span><br><span class="line"></span><br><span class="line">##	卸载旧版本（如果安装过旧版本的Docker包的话，我这里是没有安装过的）</span><br><span class="line">[root@SC /]# yum remove docker docker-common docker-selinux docker-engine</span><br><span class="line">Loaded plugins: fastestmirror</span><br><span class="line">No Match <span class="keyword">for</span> argument: docker</span><br><span class="line">No Match <span class="keyword">for</span> argument: docker-common</span><br><span class="line">No Match <span class="keyword">for</span> argument: docker-selinux</span><br><span class="line">No Match <span class="keyword">for</span> argument: docker-engine</span><br><span class="line">No Packages marked <span class="keyword">for</span> removal</span><br><span class="line"></span><br><span class="line">##	 安装需要的软件包，yum-util 提供 yum-config-manager 功能，另外两个是d evicemapper 驱动依赖的包</span><br><span class="line">[root@SC /]# yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line">..............（此处省略过程）</span><br><span class="line"></span><br><span class="line">======================================================================================================================================</span><br><span class="line"> Package                                                Arch                            Version                                       </span><br><span class="line">======================================================================================================================================</span><br><span class="line"><span class="function">Installing:</span></span><br><span class="line"><span class="function"> <span class="title">device</span>-<span class="title">mapper</span>-<span class="title">persistent</span>-<span class="title">data</span>                          <span class="title">x86_64</span>                          0.8.5-3.<span class="title">el7_9</span>.2                               </span></span><br><span class="line"><span class="function"> <span class="title">lvm2</span>                                                   <span class="title">x86_64</span>                          7:2.02.187-6.<span class="title">el7_9</span>.5                          </span></span><br><span class="line"><span class="function"><span class="title">Installing</span> <span class="title">for</span> <span class="title">dependencies</span>:</span></span><br><span class="line"><span class="function"> <span class="title">device</span>-<span class="title">mapper</span>-<span class="title">event</span>                                    <span class="title">x86_64</span>                          7:1.02.170-6.<span class="title">el7_9</span>.5                          </span></span><br><span class="line"><span class="function"> <span class="title">device</span>-<span class="title">mapper</span>-<span class="title">event</span>-<span class="title">libs</span>                               <span class="title">x86_64</span>                          7:1.02.170-6.<span class="title">el7_9</span>.5                          </span></span><br><span class="line"><span class="function"> <span class="title">libaio</span>                                                 <span class="title">x86_64</span>                          0.3.109-13.<span class="title">el7</span>                                </span></span><br><span class="line"><span class="function"> <span class="title">lvm2</span>-<span class="title">libs</span>                                              <span class="title">x86_64</span>                          7:2.02.187-6.<span class="title">el7_9</span>.5                          </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">Transaction</span> <span class="title">Summary</span></span></span><br><span class="line"><span class="function">=====================================================================================================================================</span></span><br><span class="line"><span class="function">...............（此处省略过程）</span></span><br><span class="line"><span class="function"><span class="title">Complete</span>!</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">##	设置 <span class="title">yum</span> 源</span></span><br><span class="line"><span class="function"><span class="title">yum</span>-<span class="title">config</span>-<span class="title">manager</span> --<span class="title">add</span>-<span class="title">repo</span> <span class="title">https</span>://<span class="title">download.docker.com</span>/<span class="title">linux</span>/<span class="title">centos</span>/<span class="title">docker</span>-<span class="title">ce.repo</span></span></span><br><span class="line"><span class="function">[<span class="title">root</span>@<span class="title">SC</span> /]# <span class="title">yum</span>-<span class="title">config</span>-<span class="title">manager</span> --<span class="title">add</span>-<span class="title">repo</span> <span class="title">https</span>://<span class="title">download.docker.com</span>/<span class="title">linux</span>/<span class="title">centos</span>/<span class="title">docker</span>-<span class="title">ce.repo</span></span></span><br><span class="line"><span class="function"><span class="title">Loaded</span> <span class="title">plugins</span>: <span class="title">fastestmirror</span></span></span><br><span class="line"><span class="function"><span class="title">adding</span> <span class="title">repo</span> <span class="title">from</span>: <span class="title">https</span>://<span class="title">download.docker.com</span>/<span class="title">linux</span>/<span class="title">centos</span>/<span class="title">docker</span>-<span class="title">ce.repo</span></span></span><br><span class="line"><span class="function"><span class="title">grabbing</span> <span class="title">file</span> <span class="title">https</span>://<span class="title">download.docker.com</span>/<span class="title">linux</span>/<span class="title">centos</span>/<span class="title">docker</span>-<span class="title">ce.repo</span> <span class="title">to</span> /<span class="title">etc</span>/<span class="title">yum.repos.d</span>/<span class="title">docker</span>-<span class="title">ce.repo</span></span></span><br><span class="line"><span class="function"><span class="title">repo</span> <span class="title">saved</span> <span class="title">to</span> /<span class="title">etc</span>/<span class="title">yum.repos.d</span>/<span class="title">docker</span>-<span class="title">ce.repo</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">##	查看 <span class="title">docker</span> <span class="title">list</span>，根据自己的喜欢选择相应版本</span></span><br><span class="line"><span class="function">[<span class="title">root</span>@<span class="title">SC</span> /]# <span class="title">yum</span> <span class="title">list</span> <span class="title">docker</span>-<span class="title">ce</span> --<span class="title">showduplicates</span> | <span class="title">sort</span> -<span class="title">r</span></span></span><br><span class="line"><span class="function"><span class="title">Loading</span> <span class="title">mirror</span> <span class="title">speeds</span> <span class="title">from</span> <span class="title">cached</span> <span class="title">hostfile</span></span></span><br><span class="line"><span class="function"><span class="title">Loaded</span> <span class="title">plugins</span>: <span class="title">fastestmirror</span></span></span><br><span class="line"><span class="function"><span class="title">docker</span>-<span class="title">ce.x86_64</span>            3:26.1.2-1.<span class="title">el7</span>                      <span class="title">docker</span>-<span class="title">ce</span>-<span class="title">stable</span></span></span><br><span class="line"><span class="function"><span class="title">docker</span>-<span class="title">ce.x86_64</span>            3:26.1.1-1.<span class="title">el7</span>                      <span class="title">docker</span>-<span class="title">ce</span>-<span class="title">stable</span></span></span><br><span class="line"><span class="function"><span class="title">docker</span>-<span class="title">ce.x86_64</span>            3:26.1.0-1.<span class="title">el7</span>                      <span class="title">docker</span>-<span class="title">ce</span>-<span class="title">stable</span></span></span><br><span class="line"><span class="function"><span class="title">docker</span>-<span class="title">ce.x86_64</span>            3:26.0.2-1.<span class="title">el7</span>                      <span class="title">docker</span>-<span class="title">ce</span>-<span class="title">stable</span></span></span><br><span class="line"><span class="function"><span class="title">docker</span>-<span class="title">ce.x86_64</span>            3:26.0.1-1.<span class="title">el7</span>                      <span class="title">docker</span>-<span class="title">ce</span>-<span class="title">stable</span></span></span><br><span class="line"><span class="function"><span class="title">docker</span>-<span class="title">ce.x86_64</span>            3:26.0.0-1.<span class="title">el7</span>                      <span class="title">docker</span>-<span class="title">ce</span>-<span class="title">stable</span></span></span><br><span class="line"><span class="function"><span class="title">docker</span>-<span class="title">ce.x86_64</span>            3:25.0.5-1.<span class="title">el7</span>                      <span class="title">docker</span>-<span class="title">ce</span>-<span class="title">stable</span></span></span><br><span class="line"><span class="function"><span class="title">docker</span>-<span class="title">ce.x86_64</span>            3:25.0.4-1.<span class="title">el7</span>                      <span class="title">docker</span>-<span class="title">ce</span>-<span class="title">stable</span></span></span><br><span class="line"><span class="function"><span class="title">docker</span>-<span class="title">ce.x86_64</span>            3:25.0.3-1.<span class="title">el7</span>                      <span class="title">docker</span>-<span class="title">ce</span>-<span class="title">stable</span></span></span><br><span class="line"><span class="function"><span class="title">docker</span>-<span class="title">ce.x86_64</span>            3:25.0.2-1.<span class="title">el7</span>                      <span class="title">docker</span>-<span class="title">ce</span>-<span class="title">stable</span></span></span><br><span class="line"><span class="function"><span class="title">docker</span>-<span class="title">ce.x86_64</span>            3:25.0.1-1.<span class="title">el7</span>                      <span class="title">docker</span>-<span class="title">ce</span>-<span class="title">stable</span></span></span><br><span class="line"><span class="function"><span class="title">docker</span>-<span class="title">ce.x86_64</span>            3:25.0.0-1.<span class="title">el7</span>                      <span class="title">docker</span>-<span class="title">ce</span>-<span class="title">stable</span></span></span><br><span class="line"><span class="function">（可以根据自己的喜好选择相对应的版本，直接安装则是最新版本）</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">##	<span class="title">yum</span> <span class="title">install</span> -<span class="title">y</span> <span class="title">docker</span>-<span class="title">ce</span></span></span><br><span class="line"><span class="function">[<span class="title">root</span>@<span class="title">SC</span> /]# <span class="title">yum</span> <span class="title">install</span> <span class="title">docker</span>-<span class="title">ce</span></span></span><br><span class="line"><span class="function"><span class="title">Loaded</span> <span class="title">plugins</span>: <span class="title">fastestmirror</span></span></span><br><span class="line"><span class="function"><span class="title">Loading</span> <span class="title">mirror</span> <span class="title">speeds</span> <span class="title">from</span> <span class="title">cached</span> <span class="title">hostfile</span></span></span><br><span class="line"><span class="function"><span class="title">Resolving</span> <span class="title">Dependencies</span></span></span><br><span class="line"><span class="function">--&gt; <span class="title">Running</span> <span class="title">transaction</span> <span class="title">check</span></span></span><br><span class="line"><span class="function">---&gt; <span class="title">Package</span> <span class="title">docker</span>-<span class="title">ce.x86_64</span> 3:26.1.2-1.<span class="title">el7</span> <span class="title">will</span> <span class="title">be</span> <span class="title">installed</span></span></span><br><span class="line"><span class="function">.............</span></span><br><span class="line"><span class="function"><span class="title">Installed</span>:</span></span><br><span class="line"><span class="function">  <span class="title">docker</span>-<span class="title">ce.x86_64</span> 3:26.1.2-1.<span class="title">el7</span>   </span></span><br><span class="line"><span class="function">.............</span></span><br><span class="line"><span class="function"><span class="title">Complete</span>!</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">##	启动并加入开机自启动</span></span><br><span class="line"><span class="function">[<span class="title">root</span>@<span class="title">SC</span> /]# <span class="title">systemctl</span> <span class="title">start</span> <span class="title">docker</span></span></span><br><span class="line"><span class="function">[<span class="title">root</span>@<span class="title">SC</span> /]# <span class="title">systemctl</span> <span class="title">enable</span> <span class="title">docker</span></span></span><br><span class="line"><span class="function"><span class="title">Created</span> <span class="title">symlink</span> <span class="title">from</span> /<span class="title">etc</span>/<span class="title">systemd</span>/<span class="title">system</span>/<span class="title">multi</span>-<span class="title">user.target.wants</span>/<span class="title">docker.service</span> <span class="title">to</span> /<span class="title">usr</span>/<span class="title">lib</span>/<span class="title">systemd</span>/<span class="title">system</span>/<span class="title">docker.service</span>.</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">##	验证<span class="title">Docker</span>是否安装成功了（有<span class="title">Client</span>和<span class="title">service</span>两部分即代表成功了）</span></span><br><span class="line"><span class="function">[<span class="title">root</span>@<span class="title">SC</span> /]# <span class="title">docker</span> <span class="title">version</span></span></span><br><span class="line"><span class="function"><span class="title">Client</span>: <span class="title">Docker</span> <span class="title">Engine</span> - <span class="title">Community</span></span></span><br><span class="line"><span class="function"> <span class="title">Version</span>:           26.1.2</span></span><br><span class="line"><span class="function"> <span class="title">API</span> <span class="title">version</span>:       1.45</span></span><br><span class="line"><span class="function"> <span class="title">Go</span> <span class="title">version</span>:        <span class="title">go1</span>.21.10</span></span><br><span class="line"><span class="function"> <span class="title">Git</span> <span class="title">commit</span>:        211<span class="title">e74b</span></span></span><br><span class="line"><span class="function"> <span class="title">Built</span>:             <span class="title">Wed</span> <span class="title">May</span>  8 14:01:02 2024</span></span><br><span class="line"><span class="function"> <span class="title">OS</span>/<span class="title">Arch</span>:           <span class="title">linux</span>/<span class="title">amd64</span></span></span><br><span class="line"><span class="function"> <span class="title">Context</span>:           <span class="title">default</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">Server</span>: <span class="title">Docker</span> <span class="title">Engine</span> - <span class="title">Community</span></span></span><br><span class="line"><span class="function"> <span class="title">Engine</span>:</span></span><br><span class="line"><span class="function">  <span class="title">Version</span>:          26.1.2</span></span><br><span class="line"><span class="function">  <span class="title">API</span> <span class="title">version</span>:      1.45 (<span class="title">minimum</span> <span class="title">version</span> 1.24)</span></span><br><span class="line"><span class="function">  <span class="title">Go</span> <span class="title">version</span>:       <span class="title">go1</span>.21.10</span></span><br><span class="line"><span class="function">  <span class="title">Git</span> <span class="title">commit</span>:       <span class="title">qewlkfdnkqeiw1234141cdaqef</span></span></span><br><span class="line"><span class="function">  <span class="title">Built</span>:            <span class="title">Wed</span> <span class="title">May</span>  8 13:59:55 2024</span></span><br><span class="line"><span class="function">  <span class="title">OS</span>/<span class="title">Arch</span>:          <span class="title">linux</span>/<span class="title">amd64</span></span></span><br><span class="line"><span class="function">  <span class="title">Experimental</span>:     <span class="title">false</span></span></span><br><span class="line"><span class="function"> <span class="title">containerd</span>:</span></span><br><span class="line"><span class="function">  <span class="title">Version</span>:          1.6.31</span></span><br><span class="line"><span class="function">  <span class="title">GitCommit</span>:        <span class="title">Sdqwdqwd124312341dedw</span></span></span><br><span class="line"><span class="function"> <span class="title">runc</span>:</span></span><br><span class="line"><span class="function">  <span class="title">Version</span>:          1.1.12</span></span><br><span class="line"><span class="function">  <span class="title">GitCommit</span>:        <span class="title">v1</span>.1.12-0-23<span class="title">sjhdqw</span></span></span><br><span class="line"><span class="function"> <span class="title">docker</span>-<span class="title">init</span>:</span></span><br><span class="line"><span class="function">  <span class="title">Version</span>:          0.19.0</span></span><br><span class="line"><span class="function">  <span class="title">GitCommit</span>:        <span class="title">qwdnqwoidj</span></span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></table></figure></div>

<p>​	由于国内网络的问题，我们在Docker上拉取镜像会非常慢，所以我们需要配置加速器来解决，我选择的是网易的Docker镜像源地址：<code>https://hub-mirror.c.163.com</code></p>

  <div class="note-large red">
    <div class="notel-title rounded-t-lg p-3 font-bold text-lg flex flex-row gap-2 items-center">
      <p>注意</p>

    </div>
    <div class="notel-content">
      <p>我们的新版Docker是使用的<code>/etc/docker/daemon.json</code>配置Daemon<br>我们需要在该配置文件中加入<strong>（如果没有我们需要自己新建一个）</strong></p>

    </div>
  </div>

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@SC /]# vim /etc/docker/daemon.json</span><br><span class="line">[root@SC /]# cat /etc/docker/daemon.json </span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">	&quot;registry-mirrors&quot;: [&quot;http://hub-mirror.c.163.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">##	最后刷新配置并重启Docker</span><br><span class="line">[root@SC /]# systemctl daemon-reload</span><br><span class="line">[root@SC /]# systemctl restart docker.service </span><br></pre></td></tr></table></figure></div>

<h2 id="3、Github配置更改"><a href="#3、Github配置更改" class="headerlink" title="3、Github配置更改"></a>3、Github配置更改</h2><p>首先，在服务器上生成一个ssh key</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">##	&quot;your_email@example.com&quot;就是你的Github邮箱</span><br><span class="line">ssh-keygen -t rsa -b 4096 -C &quot;your_email@example.com&quot;</span><br><span class="line">##	此时会让你做三个选择：</span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/root/.ssh/id_rsa): </span><br><span class="line">Enter passphrase (empty for no passphrase): </span><br><span class="line">Enter same passphrase again: </span><br><span class="line">##	第一个意思就是生成的ssh文件保存在/root/.ssh/id_rsa目录下，第二个选项的意思是是否设置密码，第三个选项的意思是确认密码，你也可以不设置，这样可以直接不需要密码连接，但这种做法非常的不安全。。</span><br><span class="line"></span><br><span class="line">##	然后登陆上你的Github账户后点击“Settings”-&gt;“SSH and GPG keys”—&gt;“New SSH key”—&gt;title随便取，Key type选择Authentication Key，Key填写在云服务器上你保存的路径，像文中保存的是/root/.ssh/id_rsa下的id_rsa.pub文件里的内容。</span><br></pre></td></tr></table></figure></div>

<h2 id="4、Clone-Git库"><a href="#4、Clone-Git库" class="headerlink" title="4、Clone Git库"></a>4、Clone Git库</h2><p>现在我们可以在服务器上直接克隆下来，克隆的库是我们在Github新创建的库</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@SC /]# mkdir usr/Blog		##创建一个存放克隆下的Git库的文件夹</span><br><span class="line">[root@SC /]# cd usr/Blog/		##进入到目录下</span><br><span class="line">##	这里直接使用git clone命令，然后直接去Github项目里面复制ssh的克隆命令</span><br><span class="line">[root@SC MyBlog]# git clone git@github.com:example/example.git</span><br><span class="line">...........</span><br><span class="line">Receiving objects: 100% (835/835), 14.24 MiB | 3.51 MiB/s, done.</span><br><span class="line">Resolving deltas: 100% (332/332), done.</span><br></pre></td></tr></table></figure></div>

<p>至此，Git的准备工作就结束了。</p>
<h2 id="5、创建Dockerfile并创建容器"><a href="#5、创建Dockerfile并创建容器" class="headerlink" title="5、创建Dockerfile并创建容器"></a>5、创建Dockerfile并创建容器</h2><p>Dockerfile是Docker镜像的描述文件，我们可以通过编写Dockerfile文件就可以配置我们想要的Docker镜像。</p>
<p>在服务器中的某个目录下，比如~&#x2F;dockerfile&#x2F;中，我们可以创建一个Dockerfile文件：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@SC /]# touch dockerfile/Dockerfile</span><br><span class="line">[root@SC /]# vim dockerfile/Dockerfile </span><br><span class="line">[root@SC /]# cat dockerfile/Dockerfile </span><br><span class="line">###############</span><br><span class="line">FROM node:latest</span><br><span class="line">MAINTAINER Martin &lt;a1500937374@gmail.com&gt;</span><br><span class="line">RUN npm install</span><br><span class="line"># install hexo</span><br><span class="line">RUN npm install hexo-cli -g</span><br><span class="line"># set home dir</span><br><span class="line">WORKDIR /usr/MyBlog/aliveman6.github.io</span><br><span class="line">###############</span><br></pre></td></tr></table></figure></div>

<p>然后我们执行Dockerfile文件，创建我们的Hexo镜像：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">##	最后的这个/dockfile/就是我们在上面存放Dockfile的文件夹</span><br><span class="line">docker build -t hexo-image /dockfile/</span><br><span class="line"></span><br><span class="line">##	成功后它在Shell会提示成功，而且结果也不会有报错，有error会自动停止。</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>创建Docker容器：</p>
<div class="highlight-container" data-rel="Cmd"><figure class="iseeu highlight cmd"><table><tr><td class="code"><pre><span class="line"># 创建名叫 hexo-blog 的 docker 容器</span><br><span class="line">docker run -itd -p <span class="number">4000</span>:<span class="number">4000</span> -v /usr/Blog/Myblog:/usr/Blog --name hexo-blog hexo-image</span><br><span class="line"></span><br><span class="line">##解释：<span class="number">4000</span>是Hexo默认的端口，-v后的第一个“/usr/Blog/Myblog”指的是我们在Github上克隆下来的库，因为我们在Clone库之后会在原有的文件夹Blog生成一个克隆下来的库名，第二个“/usr/Blog”指的是我们需要存放的Hexo初始化后的文件目录，--name后的“hexo-blog”指的是Docker容器的名称，“hexo-image”指的是刚刚构建的Hexo镜像</span><br><span class="line"></span><br><span class="line">##	检查Docker镜像是否创建成功</span><br><span class="line">[root@SC ~]# docker images</span><br><span class="line">REPOSITORY   TAG       IMAGE ID       CREATED          SIZE</span><br><span class="line">hexo-image   latest    b5ed4f5c8f77   <span class="number">37</span> minutes ago   <span class="number">1</span>.<span class="number">13</span>GB</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">##	检查Docker容器是否创建成功</span><br><span class="line">[root@SC ~]# docker ps -a</span><br><span class="line">CONTAINER ID   IMAGE        COMMAND                  CREATED          STATUS          PORTS                                       NAMES</span><br><span class="line"><span class="number">57209</span>ce9586e   hexo-image   &quot;docker-entrypoint.s…&quot;   <span class="number">32</span> minutes ago   Up <span class="number">11</span> minutes   <span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>:<span class="number">4000</span>-&gt;<span class="number">4000</span>/tcp, :::<span class="number">4000</span>-&gt;<span class="number">4000</span>/tcp   hexo-blog</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>至此Docker容器已创建成功。</p>
<h2 id="6、初始化Hexo"><a href="#6、初始化Hexo" class="headerlink" title="6、初始化Hexo"></a>6、初始化Hexo</h2><p>进入Docker容器</p>
<div class="highlight-container" data-rel="Cmd"><figure class="iseeu highlight cmd"><table><tr><td class="code"><pre><span class="line">docker exec -it hexo-blog /bin/bash</span><br><span class="line"></span><br><span class="line">##	接下来我们直接安装hexo-server、hexo hexo-deployer-git组件</span><br><span class="line"><span class="function">root@57209ce9586e:/<span class="title">usr</span>/<span class="title">MyBlog</span># <span class="title">npm</span> <span class="title">install</span> <span class="title">hexo</span>-<span class="title">server</span></span></span><br><span class="line"><span class="function"><span class="title">root</span>@57209<span class="title">ce9586e</span>:/<span class="title">usr</span>/<span class="title">MyBlog</span># <span class="title">npm</span> <span class="title">install</span> <span class="title">hexo</span>-<span class="title">deployer</span>-<span class="title">git</span> --<span class="title">save</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">##	接下来我们开始初始化</span></span><br><span class="line"><span class="function"><span class="title">root</span>@57209<span class="title">ce9586e</span>:/<span class="title">usr</span>/<span class="title">MyBlog</span># <span class="title">hexo</span> <span class="title">init</span></span></span><br><span class="line"><span class="function"><span class="title">root</span>@57209<span class="title">ce9586e</span>:/<span class="title">usr</span>/<span class="title">MyBlog</span># <span class="title">ls</span></span></span><br><span class="line"><span class="function"><span class="title">_config.landscape.yml</span>  <span class="title">_config.yml</span>  <span class="title">db.json</span>  <span class="title">node_modules</span>  <span class="title">package.json</span>  <span class="title">scaffolds</span>  <span class="title">source</span>  <span class="title">themes</span>  <span class="title">yarn.lock</span></span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></table></figure></div>

<p>可以看到，我们初始化出了hexo的文件。</p>
<p>最后使用<code>hexo s</code>（s代表server）命令查看是否能使用<code>域名:4000</code>这样的形式获取Hexo初始界面。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://streamcons.oss-cn-guangzhou.aliyuncs.com/img/2024-05-12_021156.png"
                     
                ></p>
<h2 id="7、恢复Hexo博客环境"><a href="#7、恢复Hexo博客环境" class="headerlink" title="7、恢复Hexo博客环境"></a>7、恢复Hexo博客环境</h2><p>接下来我们需要按照之前的步骤进行安装Redefine主题，具体步骤可以参考之前写过的文章</p>
<p>点击此处跳转</p>
<h2 id="8、使用Nginx进行映射"><a href="#8、使用Nginx进行映射" class="headerlink" title="8、使用Nginx进行映射"></a>8、使用Nginx进行映射</h2><p>有关Nginx在linux下的安装方法可以参考<strong>这篇文章</strong><a class="link"   href="https://blog.csdn.net/Colton_Null/article/details/78513268" >Linux系统安装Nginx的方法 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>下面是我自己参考文章后的安装过程：</p>
<div class="highlight-container" data-rel="Cmd"><figure class="iseeu highlight cmd"><table><tr><td class="code"><pre><span class="line">##	安装所需环境</span><br><span class="line">yum -y install make zlib zlib-devel gcc-c++ libtool  openssl openssl-devel</span><br><span class="line"></span><br><span class="line">##	下载pcre</span><br><span class="line"><span class="function">root@57209ce9586e:/<span class="title">usr</span>/<span class="title">MyBlog</span># <span class="title">wget</span> <span class="title">https</span>://<span class="title">sourceforge.net</span>/<span class="title">projects</span>/<span class="title">pcre</span>/<span class="title">files</span>/<span class="title">pcre</span>/8.45/<span class="title">pcre</span>-8.45.<span class="title">tar.gz</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">##	解压后安装并编译<span class="title">pcre</span></span></span><br><span class="line"><span class="function"><span class="title">cd</span> <span class="title">pcre</span>-8.45</span></span><br><span class="line"><span class="function">./<span class="title">configure</span></span></span><br><span class="line"><span class="function"><span class="title">make</span> &amp;&amp; <span class="title">make</span> <span class="title">install</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">##	下载<span class="title">Nginx</span></span></span><br><span class="line"><span class="function"><span class="title">root</span>@57209<span class="title">ce9586e</span>:/<span class="title">opt</span># <span class="title">wget</span> <span class="title">http</span>://<span class="title">nginx.org</span>/<span class="title">download</span>/<span class="title">nginx</span>-1.13.6.<span class="title">tar.gz</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">##	解压后安装并编译<span class="title">Nginx</span>，需要注意的是在--<span class="title">with</span>-<span class="title">pcre</span>这个选项后的<span class="title">pcre</span>目录需要是你<span class="title">pcre</span>的安装目录</span></span><br><span class="line"><span class="function"><span class="title">root</span>@57209<span class="title">ce9586e</span>:/<span class="title">opt</span>/<span class="title">nginx</span>-1.13.6# ./<span class="title">configure</span> --<span class="title">prefix</span>=/<span class="title">usr</span>/<span class="title">local</span>/<span class="title">nginx</span> --<span class="title">with</span>-<span class="title">http_stub_status_module</span> --<span class="title">with</span>-<span class="title">http_ssl_module</span> --<span class="title">with</span>-<span class="title">pcre</span>=/<span class="title">opt</span>/<span class="title">pcre</span>-8.45</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">Configuration</span> <span class="title">summary</span></span></span><br><span class="line"><span class="function">  + <span class="title">using</span> <span class="title">PCRE</span> <span class="title">library</span>: /<span class="title">opt</span>/<span class="title">pcre</span>-8.45</span></span><br><span class="line"><span class="function">  + <span class="title">using</span> <span class="title">system</span> <span class="title">OpenSSL</span> <span class="title">library</span></span></span><br><span class="line"><span class="function">  + <span class="title">using</span> <span class="title">system</span> <span class="title">zlib</span> <span class="title">library</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">  <span class="title">nginx</span> <span class="title">path</span> <span class="title">prefix</span>: &quot;/<span class="title">usr</span>/<span class="title">local</span>/<span class="title">nginx</span>&quot;</span></span><br><span class="line"><span class="function">  <span class="title">nginx</span> <span class="title">binary</span> <span class="title">file</span>: &quot;/<span class="title">usr</span>/<span class="title">local</span>/<span class="title">nginx</span>/<span class="title">sbin</span>/<span class="title">nginx</span>&quot;</span></span><br><span class="line"><span class="function">  <span class="title">nginx</span> <span class="title">modules</span> <span class="title">path</span>: &quot;/<span class="title">usr</span>/<span class="title">local</span>/<span class="title">nginx</span>/<span class="title">modules</span>&quot;</span></span><br><span class="line"><span class="function">  <span class="title">nginx</span> <span class="title">configuration</span> <span class="title">prefix</span>: &quot;/<span class="title">usr</span>/<span class="title">local</span>/<span class="title">nginx</span>/<span class="title">conf</span>&quot;</span></span><br><span class="line"><span class="function">  <span class="title">nginx</span> <span class="title">configuration</span> <span class="title">file</span>: &quot;/<span class="title">usr</span>/<span class="title">local</span>/<span class="title">nginx</span>/<span class="title">conf</span>/<span class="title">nginx.conf</span>&quot;</span></span><br><span class="line"><span class="function">  <span class="title">nginx</span> <span class="title">pid</span> <span class="title">file</span>: &quot;/<span class="title">usr</span>/<span class="title">local</span>/<span class="title">nginx</span>/<span class="title">logs</span>/<span class="title">nginx.pid</span>&quot;</span></span><br><span class="line"><span class="function">  <span class="title">nginx</span> <span class="title">error</span> <span class="title">log</span> <span class="title">file</span>: &quot;/<span class="title">usr</span>/<span class="title">local</span>/<span class="title">nginx</span>/<span class="title">logs</span>/<span class="title">error.log</span>&quot;</span></span><br><span class="line"><span class="function">  <span class="title">nginx</span> <span class="title">http</span> <span class="title">access</span> <span class="title">log</span> <span class="title">file</span>: &quot;/<span class="title">usr</span>/<span class="title">local</span>/<span class="title">nginx</span>/<span class="title">logs</span>/<span class="title">access.log</span>&quot;</span></span><br><span class="line"><span class="function">  <span class="title">nginx</span> <span class="title">http</span> <span class="title">client</span> <span class="title">request</span> <span class="title">body</span> <span class="title">temporary</span> <span class="title">files</span>: &quot;<span class="title">client_body_temp</span>&quot;</span></span><br><span class="line"><span class="function">  <span class="title">nginx</span> <span class="title">http</span> <span class="title">proxy</span> <span class="title">temporary</span> <span class="title">files</span>: &quot;<span class="title">proxy_temp</span>&quot;</span></span><br><span class="line"><span class="function">  <span class="title">nginx</span> <span class="title">http</span> <span class="title">fastcgi</span> <span class="title">temporary</span> <span class="title">files</span>: &quot;<span class="title">fastcgi_temp</span>&quot;</span></span><br><span class="line"><span class="function">  <span class="title">nginx</span> <span class="title">http</span> <span class="title">uwsgi</span> <span class="title">temporary</span> <span class="title">files</span>: &quot;<span class="title">uwsgi_temp</span>&quot;</span></span><br><span class="line"><span class="function">  <span class="title">nginx</span> <span class="title">http</span> <span class="title">scgi</span> <span class="title">temporary</span> <span class="title">files</span>: &quot;<span class="title">scgi_temp</span>&quot;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">root</span>@57209<span class="title">ce9586e</span>:/<span class="title">opt</span>/<span class="title">nginx</span>-1.13.6# <span class="title">make</span></span></span><br><span class="line"><span class="function"><span class="title">root</span>@57209<span class="title">ce9586e</span>:/<span class="title">opt</span>/<span class="title">nginx</span>-1.13.6# <span class="title">make</span> <span class="title">install</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">##	成功后我们进入&quot;/<span class="title">usr</span>/<span class="title">local</span>/<span class="title">nginx</span>/<span class="title">sbin</span>/&quot;下使用&quot;./<span class="title">Nginx</span>&quot;命令启动</span></span><br><span class="line"><span class="function">[<span class="title">root</span>@<span class="title">SC</span> <span class="title">sbin</span>]# ./<span class="title">nginx</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">##	然后使用<span class="title">ps</span> -<span class="title">ef</span> | <span class="title">grep</span> &quot;<span class="title">Nginx</span>&quot;命令查看<span class="title">Nginx</span>是否可开启成功</span></span><br><span class="line"><span class="function">[<span class="title">root</span>@<span class="title">SC</span> <span class="title">sbin</span>]# <span class="title">ps</span> -<span class="title">ef</span> | <span class="title">grep</span> &quot;<span class="title">nginx</span>&quot;</span></span><br><span class="line"><span class="function"><span class="title">root</span>     30017     1  0 12:22 ?        00:00:00 <span class="title">nginx</span>: <span class="title">master</span> <span class="title">process</span> ./<span class="title">nginx</span></span></span><br><span class="line"><span class="function"><span class="title">nobody</span>   30018 30017  0 12:22 ?        00:00:00 <span class="title">nginx</span>: <span class="title">worker</span> <span class="title">process</span></span></span><br><span class="line"><span class="function"><span class="title">root</span>     30021  8788  0 12:22 <span class="title">pts</span>/0    00:00:00 <span class="title">grep</span> --<span class="title">color</span>=<span class="title">auto</span> <span class="title">nginx</span></span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></table></figure></div>

<p>安装Nginx后我们需要进行在<code>/usr/local/nginx/conf/nginx.conf</code>路径下配置<code>nginx.conf</code>文件：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">##	找到下面的这个server项，然后listen指的是我们需要让Nginx监听哪个端口，server_name可以设置为已有的域名或者云服务器IP地址</span><br><span class="line">   server &#123;</span><br><span class="line">        listen       4000;				##	hexo默认运行端口为4000</span><br><span class="line">        server_name  www.streamcons.love;</span><br><span class="line"></span><br><span class="line">        #charset koi8-r;</span><br><span class="line"></span><br><span class="line">        #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">##	这里的root位置需要填写的是你的云服务器主机下个人博客的public文件夹路径（如果是在Docker下装的Nginx，则需要对应的是Docker镜像下的public文件夹路径），而public文件夹是在我们常规的执行hexo server命令后，会生成一个public目录，这个public目录下的所有静态文件都是网站上线后所需的资源文件，同时也是github仓库上存储的文件。</span><br><span class="line">##	index位置填写的是我们指定Nginx访问的主页</span><br><span class="line">        location / &#123;</span><br><span class="line">            root   /usr/MyBlog/MyBlog/Index/public;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">##	最后我们在Nginx的sbin目录中执行下面这个命令，重新加载Nginx配置就大功告成了</span><br><span class="line">[root@SC sbin]# ./nginx -s reload</span><br></pre></td></tr></table></figure></div>



<h2 id="9、关于域名DNS解析与ICP备案"><a href="#9、关于域名DNS解析与ICP备案" class="headerlink" title="9、关于域名DNS解析与ICP备案"></a>9、关于域名DNS解析与ICP备案</h2><p>因为我买的是阿里云的云服务器，所以我同时也在阿里云上购买了域名，我们需要在云服务器ECS上的云服务器管理控制台上找到”<strong>ICP备案</strong>“一项，将域名按要求进行实名认证（过程略微繁琐，不过如今的网络世界也都应该实名上网），然后等待备案通过就可以直接输入域名访问我们的个人博客了。</p>
<h2 id="10、最终效果"><a href="#10、最终效果" class="headerlink" title="10、最终效果"></a>10、最终效果</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://streamcons.oss-cn-guangzhou.aliyuncs.com/img/2024-05-13_113038.png"
                     
                ></p>
<p>迁移完成。</p>
<p>参考文章：<a class="link"   href="https://blog.csdn.net/Colton_Null/article/details/93805908" >https://blog.csdn.net/Colton_Null/article/details/93805908 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>博客迁移</category>
      </categories>
      <tags>
        <tag>博客迁移</tag>
      </tags>
  </entry>
</search>
